From 28cd4f179932722f0672a812b484578092297e24 Mon Sep 17 00:00:00 2001
From: Jason Rogena <jasonrogena@gmail.com>
Date: Mon, 28 Apr 2014 09:30:41 +0300
Subject: [PATCH 147/213] Now caching milk production data in SQLite database

---
 .../cgiar/ilri/mistro/farmer/AddEventActivity.java | 10 ++-
 .../mistro/farmer/AddMilkProductionActivity.java   | 21 +++---
 .../farmer/MilkProcutionHistoryActivity.java       | 61 ++++++++++++++---
 .../ilri/mistro/farmer/backend/DataHandler.java    | 42 +++++++++++-
 .../farmer/backend/database/DatabaseHelper.java    |  6 +-
 .../org/cgiar/ilri/mistro/farmer/carrier/Cow.java  | 14 ++++
 .../ilri/mistro/farmer/carrier/MilkProduction.java | 78 ++++++++++++++++++++++
 7 files changed, 203 insertions(+), 29 deletions(-)
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/MilkProduction.java

diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddEventActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddEventActivity.java
index e95ff37..ee124df 100644
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddEventActivity.java
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddEventActivity.java
@@ -806,8 +806,10 @@ public class AddEventActivity extends SherlockActivity implements View.OnClickLi
         {
             super.onPostExecute(result);
             progressDialog.dismiss();
-            if(result == true)
-            {
+            if(result == null || result == false){
+                Toast.makeText(AddEventActivity.this, sendUnsuccessfulWarning, Toast.LENGTH_LONG).show();
+            }
+            else if(result == true) {
                 Toast.makeText(AddEventActivity.this, eventRecorded, Toast.LENGTH_LONG).show();
                 Intent intent;
                 if(presetMode != null && (presetMode.equals(MODE_SERVICING) || presetMode.equals(MODE_CALVING))){
@@ -820,10 +822,6 @@ public class AddEventActivity extends SherlockActivity implements View.OnClickLi
                 }
                 startActivity(intent);
             }
-            else
-            {
-                Toast.makeText(AddEventActivity.this, sendUnsuccessfulWarning, Toast.LENGTH_LONG).show();
-            }
         }
     }
 
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddMilkProductionActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddMilkProductionActivity.java
index 0f13a06..9741ded 100644
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddMilkProductionActivity.java
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddMilkProductionActivity.java
@@ -356,7 +356,7 @@ public class AddMilkProductionActivity extends SherlockActivity implements View.
         }
     }
 
-    private class MilkProductionDataAdditionThread extends AsyncTask<String,Integer,String>
+    private class MilkProductionDataAdditionThread extends AsyncTask<String, Integer, Boolean>
     {
         private ProgressDialog progressDialog;
 
@@ -367,7 +367,7 @@ public class AddMilkProductionActivity extends SherlockActivity implements View.
         }
 
         @Override
-        protected String doInBackground(String... params) {
+        protected Boolean doInBackground(String... params) {
             Log.d(TAG, "at milkProductionDataAdditionThread");
             JSONObject jsonObject=new JSONObject();
             try
@@ -381,7 +381,8 @@ public class AddMilkProductionActivity extends SherlockActivity implements View.
                 jsonObject.put("date", params[6]);
                 /*jsonObject.put("noMilkingTimes",params[7]);
                 jsonObject.put("calfSuckling",params[8]);*/
-                String result=DataHandler.sendDataToServer(AddMilkProductionActivity.this, jsonObject.toString(),DataHandler.FARMER_ADD_MILK_PRODUCTION_URL, true);
+                //String result=DataHandler.sendDataToServer(AddMilkProductionActivity.this, jsonObject.toString(),DataHandler.FARMER_ADD_MILK_PRODUCTION_URL, true);
+                boolean result=DataHandler.cacheRequest(AddMilkProductionActivity.this, jsonObject.toString(),DataHandler.FARMER_ADD_MILK_PRODUCTION_URL);
                 Log.d(TAG,"data sent to server, result = "+result);
                 return result;
             }
@@ -393,22 +394,22 @@ public class AddMilkProductionActivity extends SherlockActivity implements View.
         }
 
         @Override
-        protected void onPostExecute(String result)
+        protected void onPostExecute(Boolean result)
         {
             super.onPostExecute(result);
             progressDialog.dismiss();
-            if(result==null) {
-                Toast.makeText(AddMilkProductionActivity.this,"server error",Toast.LENGTH_LONG).show();
+            if(result==null || result == false) {
+                Toast.makeText(AddMilkProductionActivity.this, Locale.getStringInLocale("something_went_wrong_try_again", AddMilkProductionActivity.this), Toast.LENGTH_LONG).show();
             }
-            else if(result.equals(DataHandler.ACKNOWLEDGE_OK)) {
-                Toast.makeText(AddMilkProductionActivity.this,Locale.getStringInLocale("information_successfully_sent_to_server", AddMilkProductionActivity.this), Toast.LENGTH_LONG).show();
+            else if(result == true) {
+                Toast.makeText(AddMilkProductionActivity.this,Locale.getStringInLocale("event_successfully_recorded", AddMilkProductionActivity.this), Toast.LENGTH_LONG).show();
                 Intent intent = new Intent(AddMilkProductionActivity.this, MilkProductionActivity.class);
                 intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
                 startActivity(intent);
             }
-            else if(result.equals(DataHandler.DATA_ERROR)) {
+            /*else if(result.equals(DataHandler.DATA_ERROR)) {
                 Toast.makeText(AddMilkProductionActivity.this, Locale.getStringInLocale("production_for_time_already_exists", AddMilkProductionActivity.this), Toast.LENGTH_LONG).show();
-            }
+            }*/
         }
     }
 
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MilkProcutionHistoryActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MilkProcutionHistoryActivity.java
index 4ca604d..2037d4b 100644
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MilkProcutionHistoryActivity.java
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MilkProcutionHistoryActivity.java
@@ -23,6 +23,9 @@ import com.actionbarsherlock.view.MenuItem;
 
 import org.cgiar.ilri.mistro.farmer.backend.DataHandler;
 import org.cgiar.ilri.mistro.farmer.backend.Locale;
+import org.cgiar.ilri.mistro.farmer.carrier.Cow;
+import org.cgiar.ilri.mistro.farmer.carrier.Farmer;
+import org.cgiar.ilri.mistro.farmer.carrier.MilkProduction;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -170,7 +173,7 @@ public class MilkProcutionHistoryActivity extends SherlockActivity implements Vi
         }
     }
 
-    private class ProductionHistoryThread extends AsyncTask<String,Integer,String>
+    private class ProductionHistoryThread extends AsyncTask<String,Integer,Farmer>
     {
         private ProgressDialog progressDialog;
 
@@ -181,9 +184,9 @@ public class MilkProcutionHistoryActivity extends SherlockActivity implements Vi
         }
 
         @Override
-        protected String doInBackground(String... params)
+        protected Farmer doInBackground(String... params)
         {
-            JSONObject jsonObject=new JSONObject();
+            /*JSONObject jsonObject=new JSONObject();
             try
             {
                 jsonObject.put("simCardSN",params[0]);
@@ -196,19 +199,31 @@ public class MilkProcutionHistoryActivity extends SherlockActivity implements Vi
             {
                 e.printStackTrace();
             }
-            return null;
+            return null;*/
+
+
+            String result = DataHandler.sendCachedRequests(MilkProcutionHistoryActivity.this, true);//send cached data and receive updated farmer data
+            if(result != null && !result.equals(DataHandler.CODE_USER_NOT_AUTHENTICATED)){//no data fetched for this farmer
+                try {//try converting the response into a jsonobject. It might not work if the DataHandler returns a response code
+                    Log.d(TAG, "response is "+result);
+                    DataHandler.saveFarmerData(MilkProcutionHistoryActivity.this, new JSONObject(result));
+                } catch (JSONException e) {
+                    e.printStackTrace();
+                }
+            }
+            return DataHandler.getFarmerData(MilkProcutionHistoryActivity.this);
         }
 
         @Override
-        protected void onPostExecute(String result)
+        protected void onPostExecute(Farmer farmer)
         {
-            super.onPostExecute(result);
+            super.onPostExecute(farmer);
             progressDialog.dismiss();
-            if(result==null)
+            if(farmer==null)
             {
                 Toast.makeText(MilkProcutionHistoryActivity.this,"server error",Toast.LENGTH_LONG).show();
             }
-            else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
+            /*else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
                 Toast.makeText(MilkProcutionHistoryActivity.this, Locale.getStringInLocale("generic_sms_error", MilkProcutionHistoryActivity.this), Toast.LENGTH_LONG).show();
             }
             else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
@@ -223,10 +238,10 @@ public class MilkProcutionHistoryActivity extends SherlockActivity implements Vi
             else if(result.equals(DataHandler.NO_DATA))
             {
                 Toast.makeText(MilkProcutionHistoryActivity.this,noDataWarning,Toast.LENGTH_LONG).show();
-            }
+            }*/
             else
             {
-                try
+                /*try
                 {
                     JSONObject jsonObject=new JSONObject(result);
                     JSONArray historyArray=jsonObject.getJSONArray("history");
@@ -236,6 +251,32 @@ public class MilkProcutionHistoryActivity extends SherlockActivity implements Vi
                 catch (JSONException e)
                 {
                     e.printStackTrace();
+                }*/
+                try{
+                    List<Cow> allCows = farmer.getCows();
+                    JSONArray historyArray = new JSONArray();
+                    for(int cowIndex = 0; cowIndex < allCows.size(); cowIndex++){
+                        //append all events for this cow to the UI
+                        List<MilkProduction> cowMP = allCows.get(cowIndex).getMilkProduction();
+                        for(int mpIndex = 0; mpIndex < cowMP.size(); mpIndex++){
+                            JSONObject currMP = new JSONObject();
+                            currMP.put("id", cowMP.get(mpIndex).getId());
+                            currMP.put("date", cowMP.get(mpIndex).getDate());
+                            currMP.put("time", cowMP.get(mpIndex).getTime());
+                            currMP.put("name", allCows.get(cowIndex).getName());
+                            currMP.put("ear_tag_number", allCows.get(cowIndex).getEarTagNumber());
+                            currMP.put("quantity_type", cowMP.get(mpIndex).getQuantityType());
+                            currMP.put("quantity", cowMP.get(mpIndex).getQuantity());
+
+                            historyArray.put(currMP);
+                        }
+                    }
+
+                    addTotalTableRows(historyArray);
+                    addHistoryTableRows(historyArray);
+                }
+                catch (Exception e){
+                    e.printStackTrace();
                 }
             }
         }
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/DataHandler.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/DataHandler.java
index 5f00b48..f769e10 100644
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/DataHandler.java
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/DataHandler.java
@@ -37,6 +37,7 @@ import org.cgiar.ilri.mistro.farmer.carrier.Cow;
 import org.cgiar.ilri.mistro.farmer.carrier.Dam;
 import org.cgiar.ilri.mistro.farmer.carrier.Event;
 import org.cgiar.ilri.mistro.farmer.carrier.Farmer;
+import org.cgiar.ilri.mistro.farmer.carrier.MilkProduction;
 import org.cgiar.ilri.mistro.farmer.carrier.Sire;
 import org.json.JSONArray;
 import org.json.JSONException;
@@ -544,6 +545,26 @@ public class DataHandler
 
                         databaseHelper.runInsertQuery(databaseHelper.TABLE_EVENT, columns, columnValues, 0, writableDB);
                     }
+
+                    JSONArray cowMilkProduction = currCow.getJSONArray("milk_production");
+                    for(int j = 0; j < cowMilkProduction.length(); j++){
+                        JSONObject currMProduction = cowMilkProduction.getJSONObject(j);
+                        //(id INTEGER PRIMARY KEY, cow_id INTEGER, time TEXT, quantity INTEGER, date_added TEXT, date TEXT, quantity_type TEXT)");
+                        columns = new String[]{"id", "cow_id", "time", "quantity", "date_added", "date", "quantity_type"};
+
+                        columnValues = new String[columns.length];
+
+                        columnValues[0] = currMProduction.getString("id");
+                        columnValues[1] = currMProduction.getString("cow_id");
+                        columnValues[2] = currMProduction.getString("time");
+                        columnValues[3] = currMProduction.getString("quantity");
+                        columnValues[4] = currMProduction.getString("date_added");
+                        columnValues[5] = currMProduction.getString("date");
+                        columnValues[6] = currMProduction.getString("quantity_type");
+
+                        databaseHelper.runInsertQuery(databaseHelper.TABLE_MILK_PRODUCTION, columns, columnValues, 0, writableDB);
+
+                    }
                 }
             }
             catch (Exception e){
@@ -676,6 +697,23 @@ public class DataHandler
 
                         currCow.addEvent(currEvent);
                     }
+
+                    //(id INTEGER PRIMARY KEY, cow_id INTEGER, time TEXT, quantity INTEGER, date_added TEXT, date TEXT, quantity_type TEXT)");
+                    columns = new String[] {"id", "cow_id", "time", "quantity", "date_added", "date", "quantity_type"};
+                    selection = "cow_id="+cowID;
+                    String[][] mpResult = databaseHelper.runSelectQuery(readableDB, databaseHelper.TABLE_MILK_PRODUCTION, columns, selection, null, null, null, null, null);
+                    for(int mpIndex = 0; mpIndex < mpResult.length; mpIndex++){
+                        MilkProduction currMP = new MilkProduction();
+
+                        currMP.setId(Integer.parseInt(mpResult[mpIndex][0]));
+                        currMP.setTime(mpResult[mpIndex][2]);
+                        currMP.setQuantity(Integer.parseInt(mpResult[mpIndex][3]));
+                        currMP.setDateAdded(mpResult[mpIndex][4]);
+                        currMP.setDate(mpResult[mpIndex][5]);
+                        currMP.setQuantityType(mpResult[mpIndex][6]);
+
+                        currCow.addMilkProduction(currMP);
+                    }
                     farmer.addCow(currCow);
                 }
             }
@@ -761,9 +799,9 @@ public class DataHandler
                             if(response != null && !response.equals(CODE_USER_NOT_AUTHENTICATED)){
                                 //delete the saved data from cache
                                 databaseHelper.runTruncateQuery(writableDB, databaseHelper.TABLE_CACHED_REQUESTS);
-                                String[] idsArray = new String[ids.size()];
+                                /*String[] idsArray = new String[ids.size()];
                                 idsArray = ids.toArray(idsArray);
-                                databaseHelper.runDeleteQuery(writableDB, databaseHelper.TABLE_CACHED_REQUESTS, "id", idsArray);
+                                databaseHelper.runDeleteQuery(writableDB, databaseHelper.TABLE_CACHED_REQUESTS, "id", idsArray);*/
                                 Log.d(TAG, "Deleted cached requests from SQLite database");
                             }
                             return response;
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/database/DatabaseHelper.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/database/DatabaseHelper.java
index dd07e1c..4a40920 100644
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/database/DatabaseHelper.java
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/database/DatabaseHelper.java
@@ -18,11 +18,13 @@ import java.io.Serializable;
 public class DatabaseHelper extends SQLiteOpenHelper implements Serializable{
 
     public static final String DB_NAME = "ngombe_planner";
-    public static final int DB_VERSION = 5;
+    public static final int DB_VERSION = 6;
     public static final String TABLE_FARMER = "farmer";
     public static final String TABLE_COW = "cow";
     public static final String TABLE_EVENT = "event";
     public static final String TABLE_CACHED_REQUESTS = "cached_requests";
+    public static final String TABLE_MILK_PRODUCTION = "milk_production";
+
     private static final String TAG = "DatabaseHelper";
 
     /**
@@ -46,6 +48,7 @@ public class DatabaseHelper extends SQLiteOpenHelper implements Serializable{
 		db.execSQL("CREATE TABLE " + TABLE_COW + " (id INTEGER PRIMARY KEY, farmer_id INTEGER, name TEXT, ear_tag_number TEXT, date_of_birth TEXT, age INTEGER, age_type TEXT, sex TEXT, sire_id INTEGER, dam_id INTEGER, date_added TEXT, service_type TEXT, country_id INTEGER, bull_owner TEXT, owner_name TEXT);");
         db.execSQL("CREATE TABLE "+TABLE_EVENT+" (id INTEGER PRIMARY KEY, cow_id INTEGER, event_name TEXT, remarks TEXT, event_date TEXT, birth_type TEXT, parent_cow_event INTEGER, bull_id INTEGER, servicing_days INTEGER, cod TEXT, no_of_live_births INTEGER, saved_on_server INTEGER)");
         db.execSQL("CREATE TABLE "+TABLE_CACHED_REQUESTS+" (id INTEGER PRIMARY KEY AUTOINCREMENT, url TEXT, json TEXT)");
+        db.execSQL("CREATE TABLE "+TABLE_MILK_PRODUCTION+" (id INTEGER PRIMARY KEY, cow_id INTEGER, time TEXT, quantity INTEGER, date_added TEXT, date TEXT, quantity_type TEXT)");
         //insert any static data to the db now
     }
 
@@ -64,6 +67,7 @@ public class DatabaseHelper extends SQLiteOpenHelper implements Serializable{
         db.execSQL("DROP TABLE IF EXISTS "+TABLE_FARMER);
         db.execSQL("DROP TABLE IF EXISTS "+TABLE_EVENT);
         db.execSQL("DROP TABLE IF EXISTS "+TABLE_CACHED_REQUESTS);
+        db.execSQL("DROP TABLE IF EXISTS "+TABLE_MILK_PRODUCTION);
 
         //recreate the database
         onCreate(db);
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Cow.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Cow.java
index 56cae07..5313223 100644
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Cow.java
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Cow.java
@@ -45,6 +45,7 @@ public class Cow implements Parcelable, Serializable {
     private String otherDeformity;
     private String piggyBack;
     private List<Event> events;
+    private List<MilkProduction> milkProduction;
 
     public Cow(boolean isNotDamOrSire) {
         name = "";
@@ -67,6 +68,7 @@ public class Cow implements Parcelable, Serializable {
         otherDeformity = "";
         piggyBack = "";
         this.events = new ArrayList<Event>();
+        this.milkProduction = new ArrayList<MilkProduction>();
     }
 
     public Cow(Parcel in) {
@@ -157,6 +159,18 @@ public class Cow implements Parcelable, Serializable {
         this.events = events;
     }
 
+    public void addMilkProduction(MilkProduction milkProduction){
+        this.milkProduction.add(milkProduction);
+    }
+
+    public void setMilkProduction(List<MilkProduction> milkProduction){
+        this.milkProduction = milkProduction;
+    }
+
+    public List<MilkProduction> getMilkProduction(){
+        return this.milkProduction;
+    }
+
     public String getName() {
         return name;
     }
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/MilkProduction.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/MilkProduction.java
new file mode 100644
index 0000000..9ea17fe
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/MilkProduction.java
@@ -0,0 +1,78 @@
+package org.cgiar.ilri.mistro.farmer.carrier;
+
+/**
+ * Created by jason on 4/28/14.
+ */
+public class MilkProduction {
+    private static final String TAG = "MilkProduction";
+    public static final String TIME_MORNING = "Morning";
+    public static final String TIME_AFTERNOON = "Afternoon";
+    public static final String TIME_EVENING = "Evening";
+    public static final String TIME_COMBINED = "Combined";
+    public static final String QUANTITY_TYPE_LITRES = "Litres";
+    public static final String QUANTITY_TYPE_KGS = "KGs";
+    private int id;
+    private String time;
+    private int quantity;
+    private String dateAdded;
+    private String date;
+    private String quantityType;
+
+
+    public MilkProduction(){
+        id = -1;
+        time = "";
+        quantity = -1;
+        dateAdded = "";
+        date = "";
+        quantityType = "";
+    }
+
+    public int getId() {
+        return id;
+    }
+
+    public void setId(int id) {
+        this.id = id;
+    }
+
+    public String getTime() {
+        return time;
+    }
+
+    public void setTime(String time) {
+        this.time = time;
+    }
+
+    public int getQuantity() {
+        return quantity;
+    }
+
+    public void setQuantity(int quantity) {
+        this.quantity = quantity;
+    }
+
+    public String getDateAdded() {
+        return dateAdded;
+    }
+
+    public void setDateAdded(String dateAdded) {
+        this.dateAdded = dateAdded;
+    }
+
+    public String getDate() {
+        return date;
+    }
+
+    public void setDate(String date) {
+        this.date = date;
+    }
+
+    public String getQuantityType() {
+        return quantityType;
+    }
+
+    public void setQuantityType(String quantityType) {
+        this.quantityType = quantityType;
+    }
+}
-- 
2.7.1

