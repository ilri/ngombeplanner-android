From 5972de07488f83d47f95d7904b76ea45b464e497 Mon Sep 17 00:00:00 2001
From: Jason Rogena <j.rogena@cgiar.org>
Date: Mon, 16 Jun 2014 10:12:46 +0300
Subject: [PATCH 200/213] Version 1.0.2: Editing of cow

Admins can now edit cows
---
 .idea/misc.xml                                     |   2 +-
 Android.iml                                        |   2 +-
 .../mistro/farmer/CowRegistrationActivity.java     |   2 +-
 .../ilri/mistro/farmer/CowSelectionActivity.java   |  23 +--
 .../cgiar/ilri/mistro/farmer/EditCowActivity.java  | 209 ++++++++++++++++++++-
 .../ilri/mistro/farmer/backend/DataHandler.java    |   3 +-
 .../cgiar/ilri/mistro/farmer/backend/Locale.java   |  16 +-
 .../org/cgiar/ilri/mistro/farmer/carrier/Cow.java  |  12 +-
 8 files changed, 234 insertions(+), 35 deletions(-)

diff --git a/.idea/misc.xml b/.idea/misc.xml
index f3b00d6..b153e48 100644
--- a/.idea/misc.xml
+++ b/.idea/misc.xml
@@ -3,7 +3,7 @@
   <component name="EntryPointsManager">
     <entry_points version="2.0" />
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_6" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_6" assert-keyword="true" jdk-15="true" project-jdk-name="JDK" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
 </project>
diff --git a/Android.iml b/Android.iml
index 91c73fb..58a239a 100644
--- a/Android.iml
+++ b/Android.iml
@@ -6,7 +6,7 @@
       <excludeFolder url="file://$MODULE_DIR$/.gradle" />
       <excludeFolder url="file://$MODULE_DIR$/build" />
     </content>
-    <orderEntry type="jdk" jdkName="1.6" jdkType="JavaSDK" />
+    <orderEntry type="jdk" jdkName="JDK" jdkType="JavaSDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/CowRegistrationActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/CowRegistrationActivity.java
index d2a3a3b..9dc89cf 100644
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/CowRegistrationActivity.java
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/CowRegistrationActivity.java
@@ -1243,7 +1243,7 @@ public class CowRegistrationActivity extends SherlockActivity implements MistroA
             thisCow.setAgeType(Cow.AGE_TYPE_YEAR);
         }
         thisCow.setDateOfBirth(dateOfBirthET.getText().toString());
-        thisCow.setBreeds(breedET.getText().toString().split(", "), this);
+        thisCow.setBreeds(breedET.getText().toString().split(", "), this, true);
         thisCow.setOtherBreed(this, breedACTV.getText().toString());
         thisCow.setDeformities(deformityET.getText().toString().split(", "), this);
         thisCow.setOtherDeformity(specifyET.getText().toString());
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/CowSelectionActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/CowSelectionActivity.java
index 89789ed..0c17709 100644
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/CowSelectionActivity.java
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/CowSelectionActivity.java
@@ -40,8 +40,8 @@ public class CowSelectionActivity extends SherlockActivity implements MistroActi
     private Spinner selectFarmerS;
     private TextView selectCowTV;
     private Spinner selectCowS;
-    private Button editB;
-    private Button cancelB;
+    private Button selectB;
+    private Button backB;
 
     private JSONObject adminData;
     private List<Farmer> farmers;
@@ -53,13 +53,13 @@ public class CowSelectionActivity extends SherlockActivity implements MistroActi
 
         selectFarmerTV = (TextView)findViewById(R.id.select_farmer_tv);
         selectFarmerS = (Spinner)findViewById(R.id.select_farmer_s);
-        selectCowS.setOnItemSelectedListener(this);
+        selectFarmerS.setOnItemSelectedListener(this);
         selectCowTV = (TextView)findViewById(R.id.select_cow_tv);
         selectCowS = (Spinner)findViewById(R.id.select_cow_s);
-        editB = (Button)findViewById(R.id.edit_b);
-        editB.setOnClickListener(this);
-        cancelB = (Button)findViewById(R.id.cancel_b);
-        cancelB.setOnClickListener(this);
+        selectB = (Button)findViewById(R.id.select_b);
+        selectB.setOnClickListener(this);
+        backB = (Button)findViewById(R.id.back_b);
+        backB.setOnClickListener(this);
 
         initTextInViews();
     }
@@ -112,8 +112,8 @@ public class CowSelectionActivity extends SherlockActivity implements MistroActi
         selectFarmerTV.setText(Locale.getStringInLocale("select_farmer", this));
         selectCowTV.setText(Locale.getStringInLocale("select_cow", this));
 
-        editB.setText(Locale.getStringInLocale("edit", this));
-        cancelB.setText(Locale.getStringInLocale("cancel", this));
+        selectB.setText(Locale.getStringInLocale("select", this));
+        backB.setText(Locale.getStringInLocale("back", this));
     }
 
     private void loadAdminData(String adminJSONString){
@@ -195,7 +195,7 @@ public class CowSelectionActivity extends SherlockActivity implements MistroActi
 
     @Override
     public void onClick(View v) {
-        if(v == editB){
+        if(v == selectB){
             if(selectFarmerS.getSelectedItemPosition() != -1){
                 Farmer selectedFarmer = farmers.get(selectFarmerS.getSelectedItemPosition());
                 if(selectedFarmer != null){
@@ -218,7 +218,7 @@ public class CowSelectionActivity extends SherlockActivity implements MistroActi
                 }
             }
         }
-        else if(v == cancelB){
+        else if(v == backB){
             Intent intent = new Intent(this, MainMenu.class);
             intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_ADMIN);
             intent.putExtra(MainMenu.KEY_ADMIN_DATA, adminData.toString());
@@ -278,6 +278,7 @@ public class CowSelectionActivity extends SherlockActivity implements MistroActi
             }
             else{
                 try{
+                    Log.d(TAG, "fetched cows  = "+result);
                     JSONArray cowJsonArray = new JSONArray(result);
                     farmers.get(farmerIndex).setCows(cowJsonArray);
                     loadCowData(farmers.get(farmerIndex).getCows());
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/EditCowActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/EditCowActivity.java
index 7494fab..b0e9ef9 100644
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/EditCowActivity.java
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/EditCowActivity.java
@@ -3,8 +3,10 @@ package org.cgiar.ilri.mistro.farmer;
 import android.app.AlertDialog;
 import android.app.DatePickerDialog;
 import android.app.Dialog;
+import android.app.ProgressDialog;
 import android.content.DialogInterface;
 import android.content.Intent;
+import android.os.AsyncTask;
 import android.os.Bundle;
 import android.util.Log;
 import android.util.SparseBooleanArray;
@@ -35,6 +37,8 @@ import org.cgiar.ilri.mistro.farmer.carrier.Cow;
 import org.cgiar.ilri.mistro.farmer.carrier.Dam;
 import org.cgiar.ilri.mistro.farmer.carrier.Farmer;
 import org.cgiar.ilri.mistro.farmer.carrier.Sire;
+import org.json.JSONArray;
+import org.json.JSONObject;
 
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
@@ -385,7 +389,7 @@ public class EditCowActivity extends SherlockActivity implements MistroActivity,
                     }
                     deformityET.setText(deformity);
 
-                    if(farmer.getMode().equals(Farmer.MODE_INITIAL_REGISTRATION)) {
+                    //if(farmer.getMode().equals(Farmer.MODE_INITIAL_REGISTRATION)) {
 
                         List<Cow> allCows = farmer.getCows();
                         validSires = new ArrayList<Cow>();
@@ -467,7 +471,7 @@ public class EditCowActivity extends SherlockActivity implements MistroActivity,
                                 embryoNumberET.setText(thisCow.getDam().getEmbryoNumber());
                             }
                         }
-                    }
+                    /*}
                     else {
                         serviceTypeTV.setVisibility(TextView.GONE);
                         serviceTypeS.setVisibility(Spinner.GONE);
@@ -485,7 +489,7 @@ public class EditCowActivity extends SherlockActivity implements MistroActivity,
                         damACTV.setVisibility(AutoCompleteTextView.GONE);
                         embryoNumberTV.setVisibility(TextView.GONE);
                         embryoNumberET.setVisibility(EditText.GONE);
-                    }
+                    }*/
 
                     countryOfOriginACTV.setText(thisCow.getCountryOfOrigin());
                 }
@@ -676,17 +680,27 @@ public class EditCowActivity extends SherlockActivity implements MistroActivity,
     @Override
     public void onClick(View view) {
         if(view==cancelB) {
-           //TODO: go back to cow selection page
+            Intent intent = new Intent(this, CowSelectionActivity.class);
+            intent.putExtra(CowSelectionActivity.KEY_ADMIN_DATA, adminData.toString());
+            startActivity(intent);
         }
         else if(view==editB) {
             if(validateInput()) {
-                //cacheThisCow();//TODO: cache this cow
-                /*Bundle bundle=new Bundle();
-                bundle.putParcelable(Farmer.PARCELABLE_KEY,farmer);*/
+                try{
+                    cacheThisCow();
 
-                clearEditTextDataCache();
+                    JSONObject cowJsonObject = thisCow.getJsonObject();
+                    cowJsonObject.put("farmer_id", farmer.getId());
 
-                //TODO: send edited data to server
+                    clearEditTextDataCache();
+
+                    Log.d(TAG, "Json Object for cow = "+cowJsonObject.toString());
+                    EditCowThread editCowThread = new EditCowThread();
+                    editCowThread.execute(cowJsonObject.toString());
+                }
+                catch (Exception e){
+                    e.printStackTrace();
+                }
             }
         }
         else if(view==dateOfBirthET) {
@@ -1097,4 +1111,181 @@ public class EditCowActivity extends SherlockActivity implements MistroActivity,
 
         return true;
     }
+
+    private void cacheThisCow() {
+        clearEditTextDataCache();
+
+        thisCow.setName(nameET.getText().toString());
+
+        thisCow.setEarTagNumber(earTagNumberET.getText().toString());
+        thisCow.setDateOfBirth(dateOfBirthET.getText().toString());
+        thisCow.setAge((ageET.getText().toString() == null || ageET.getText().toString().length() == 0) ? -1 : Integer.parseInt(ageET.getText().toString()));
+        String[] ageTypesInEN = Locale.getArrayInLocale("age_type_array",this,Locale.LOCALE_ENGLISH);
+        if(ageTypesInEN[ageS.getSelectedItemPosition()].equals("Days")) {
+            thisCow.setAgeType(Cow.AGE_TYPE_DAY);
+        }
+        else if(ageTypesInEN[ageS.getSelectedItemPosition()].equals("Months")) {
+            thisCow.setAgeType(Cow.AGE_TYPE_MONTH);
+        }
+        else if(ageTypesInEN[ageS.getSelectedItemPosition()].equals("Years")) {
+            thisCow.setAgeType(Cow.AGE_TYPE_YEAR);
+        }
+        thisCow.setDateOfBirth(dateOfBirthET.getText().toString());
+        thisCow.setBreeds(breedET.getText().toString().split(", "), this, false);
+
+        thisCow.setDeformities(deformityET.getText().toString().split(", "), this);
+        thisCow.setOtherDeformity(specifyET.getText().toString());
+        thisCow.setCountryOfOrigin(countryOfOriginACTV.getText().toString());
+        String[] sexInEN = Locale.getArrayInLocale("sex_array",this,Locale.LOCALE_ENGLISH);
+        if(sexInEN[sexS.getSelectedItemPosition()].equals("Female")) {
+            thisCow.setSex(Cow.SEX_FEMALE);
+
+            String[] milkingStatusInEN = Locale.getArrayInLocale("cow_status_array", this, Locale.LOCALE_ENGLISH);
+            thisCow.setMilkingStatus(milkingStatusInEN[milkingStatusS.getSelectedItemPosition()], this);
+            String[] inCalfArrayInEN = Locale.getArrayInLocale("cow_in_calf_array", this, Locale.LOCALE_ENGLISH);
+            if(inCalfArrayInEN[inCalfStatusS.getSelectedItemPosition()].equals(Cow.COW_IN_CALF)){
+                thisCow.setInCalf(true);
+            }
+            else{
+                thisCow.setInCalf(false);
+            }
+        }
+        else if(sexInEN[sexS.getSelectedItemPosition()].equals("Male")) {
+            thisCow.setSex(Cow.SEX_MALE);
+        }
+        //if(farmer.getMode().equals(Farmer.MODE_INITIAL_REGISTRATION)) {
+            String[] serviceTypesInEN = Locale.getArrayInLocale("service_types",this,Locale.LOCALE_ENGLISH);
+            if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Bull")) {
+                thisCow.setServiceType(Cow.SERVICE_TYPE_BULL);
+
+                Sire sire = new Sire();
+//                sire.setName(validSires.get(sireS.getSelectedItemPosition()).getName());
+//                sire.setEarTagNumber(validSires.get(sireS.getSelectedItemPosition()).getEarTagNumber());
+
+                for(int i = 0; i < validSires.size(); i++){
+                    if(sireACTV.getText().toString().equals(validSires.get(i).getEarTagNumber()+" ("+validSires.get(i).getName()+")")){
+                        sire.setEarTagNumber(validSires.get(i).getEarTagNumber());
+                        sire.setName(validSires.get(i).getName());
+                    }
+                }
+                if(sire.getEarTagNumber().trim().equals("")){//if not yet set then assume the sire is not part of the herd
+                    sire.setEarTagNumber(sireACTV.getText().toString());
+                }
+
+                String[] sireOwnersInEN = Locale.getArrayInLocale("bull_owners", this, Locale.LOCALE_ENGLISH);
+                sire.setOwnerType(sireOwnersInEN[sireOwnerS.getSelectedItemPosition()]);
+                sire.setOwner(sireOwnerNameET.getText().toString());
+                thisCow.setSire(sire);
+
+                Dam dam =new Dam();
+//                dam.setName(validDams.get(damS.getSelectedItemPosition()).getName());
+//                dam.setEarTagNumber(validDams.get(damS.getSelectedItemPosition()).getEarTagNumber());
+
+                for(int i = 0; i < validDams.size(); i++ ){
+                    if(damACTV.getText().toString().equals(validDams.get(i).getEarTagNumber()+" ("+validDams.get(i).getName()+")")){
+                        dam.setEarTagNumber(validDams.get(i).getEarTagNumber());
+                        dam.setName(validDams.get(i).getName());
+                    }
+                }
+                if(dam.getEarTagNumber().trim().equals("")){//if not yet set then assume the dam is not part of the herd
+                    dam.setEarTagNumber(damACTV.getText().toString());
+                }
+                thisCow.setDam(dam);
+            }
+            else if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Artificial Insemination")) {
+                thisCow.setServiceType(Cow.SERVICE_TYPE_AI);
+
+                Sire sire = new Sire();
+                sire.setStrawNumber(strawNumberET.getText().toString());
+                thisCow.setSire(sire);
+
+                Dam dam =new Dam();
+//                dam.setName(validDams.get(damS.getSelectedItemPosition()).getName());
+//                dam.setEarTagNumber(validDams.get(damS.getSelectedItemPosition()).getEarTagNumber());
+
+                for(int i = 0; i < validDams.size(); i++ ){
+                    if(damACTV.getText().toString().equals(validDams.get(i).getEarTagNumber()+" ("+validDams.get(i).getName()+")")){
+                        dam.setEarTagNumber(validDams.get(i).getEarTagNumber());
+                        dam.setName(validDams.get(i).getName());
+                    }
+                }
+                if(dam.getEmbryoNumber().trim().equals("")){
+                    dam.setEarTagNumber(damACTV.getText().toString());
+                }
+                thisCow.setDam(dam);
+            }
+            else if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Embryo Transfer")) {
+                thisCow.setServiceType(Cow.SERVICE_TYPE_ET);
+
+                Dam dam =new Dam();
+//                dam.setName(validDams.get(damS.getSelectedItemPosition()).getName());
+//                dam.setEarTagNumber(validDams.get(damS.getSelectedItemPosition()).getEarTagNumber());
+
+                for(int i = 0; i < validDams.size(); i++ ){
+                    if(damACTV.getText().toString().equals(validDams.get(i).getEarTagNumber()+" ("+validDams.get(i).getName()+")")){
+                        dam.setEarTagNumber(validDams.get(i).getEarTagNumber());
+                        dam.setName(validDams.get(i).getName());
+                    }
+                }
+                if(dam.getEmbryoNumber().trim().equals("")){
+                    dam.setEarTagNumber(damACTV.getText().toString());
+                }
+                thisCow.setDam(dam);
+            }
+        //}
+        farmer.setCow(thisCow,index);
+    }
+
+    private class EditCowThread extends AsyncTask<String, Integer, String>{
+
+        private ProgressDialog progressDialog;
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(EditCowActivity.this, "", Locale.getStringInLocale("loading_please_wait", EditCowActivity.this), true);
+        }
+
+        @Override
+        protected String doInBackground(String... params) {
+            return DataHandler.sendDataToServer(EditCowActivity.this, params[0], DataHandler.ADMIN_EDIT_COW_URL, true);
+        }
+
+        @Override
+        protected void onPostExecute(String result) {
+            super.onPostExecute(result);
+
+            progressDialog.dismiss();
+
+            if(result==null){
+                String httpError = DataHandler.getSharedPreference(EditCowActivity.this, "http_error", "No Error thrown to application. Something must be really wrong");
+                Toast.makeText(EditCowActivity.this, httpError, Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
+                Toast.makeText(EditCowActivity.this, Locale.getStringInLocale("generic_sms_error", EditCowActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
+                Toast.makeText(EditCowActivity.this, Locale.getStringInLocale("no_service", EditCowActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
+                Toast.makeText(EditCowActivity.this, Locale.getStringInLocale("radio_off", EditCowActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
+                Toast.makeText(EditCowActivity.this, Locale.getStringInLocale("server_not_receive_sms", EditCowActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.ACKNOWLEDGE_OK)){
+                try{
+                    Intent intent = new Intent(EditCowActivity.this, CowSelectionActivity.class);
+                    intent.putExtra(CowSelectionActivity.KEY_ADMIN_DATA, adminData);//since this activity
+                    startActivity(intent);
+                }
+                catch (Exception e){
+                    e.printStackTrace();
+                }
+            }
+            else{
+                Toast.makeText(EditCowActivity.this, Locale.getStringInLocale("problem_connecting_to_server", EditCowActivity.this), Toast.LENGTH_LONG).show();
+            }
+        }
+    }
 }
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/DataHandler.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/DataHandler.java
index d468fd6..be939d3 100644
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/DataHandler.java
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/DataHandler.java
@@ -89,7 +89,8 @@ public class DataHandler
 
     public static final String ADMIN_AUTHENTICATION_URL="/php/admin/authentication.php";
     public static final String ADMIN_EDIT_FARMER_URL="/php/admin/edit_farmer.php";
-    public static final String ADMIN_GET_COWS_URL="/php/admin/get_cows.php";
+    public static final String ADMIN_GET_COWS_URL="/php/admin/fetch_cows.php";
+    public static final String ADMIN_EDIT_COW_URL="/php/admin/edit_cow.php";
 
     public static final String SP_KEY_LOCALE = "locale";
     public static final String SP_KEY_MILK_QUANTITY_TYPE = "milkQuantityTYpe";
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/Locale.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/Locale.java
index e62f8c5..e02b252 100644
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/Locale.java
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/Locale.java
@@ -98,16 +98,16 @@ public class Locale {
 
     public static String[] translateArrayToEnglish(Context context, String arrayName, String[] arrayInLocale){
         if(arrayInLocale != null){
-            Log.d(TAG, "Trying to translate array to english");
+            //Log.d(TAG, "Trying to translate array to english");
             String[] allStringsInEN = Locale.getArrayInLocale(arrayName, context, Locale.LOCALE_ENGLISH);
             String[] allStringsInLocale = Locale.getArrayInLocale(arrayName, context);
 
             String[] translatedArray = new String[arrayInLocale.length];
             for(int i = 0; i < arrayInLocale.length; i++){
                 for(int j = 0; j < allStringsInLocale.length; j++){
-                    Log.d(TAG, "Current actual string = "+arrayInLocale[i]);
-                    Log.d(TAG, "Current string in english =  "+allStringsInEN[j]);
-                    Log.d(TAG, "Current string in locale = "+allStringsInLocale[j]);
+                    //Log.d(TAG, "Current actual string = "+arrayInLocale[i]);
+                    //Log.d(TAG, "Current string in english =  "+allStringsInEN[j]);
+                    //Log.d(TAG, "Current string in locale = "+allStringsInLocale[j]);
                     if(arrayInLocale[i].equals(allStringsInLocale[j])){
                         translatedArray[i] = allStringsInEN[j];
                     }
@@ -121,16 +121,16 @@ public class Locale {
 
     public static String[] translateArrayToLocale(Context context, String arrayName, String[] arrayInEN){
         if(arrayInEN != null){
-            Log.d(TAG, "Trying to translate array to current locale");
+            //Log.d(TAG, "Trying to translate array to current locale");
             String[] allStringsInEN = Locale.getArrayInLocale(arrayName, context, Locale.LOCALE_ENGLISH);
             String[] allStringsInLocale = Locale.getArrayInLocale(arrayName, context);
 
             String[] translatedArray = new String[arrayInEN.length];
             for(int i = 0; i < arrayInEN.length; i++){
                 for(int j = 0; j < allStringsInEN.length; j++){
-                    Log.d(TAG, "Current actual string = "+arrayInEN[i]);
-                    Log.d(TAG, "Current string in english =  "+allStringsInEN[j]);
-                    Log.d(TAG, "Current string in locale = "+allStringsInLocale[j]);
+                    //Log.d(TAG, "Current actual string = "+arrayInEN[i]);
+                    //Log.d(TAG, "Current string in english =  "+allStringsInEN[j]);
+                    //Log.d(TAG, "Current string in locale = "+allStringsInLocale[j]);
                     if(arrayInEN[i].equals(allStringsInEN[j])){
                         translatedArray[i] = allStringsInLocale[j];
                     }
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Cow.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Cow.java
index 25648dc..f6d0683 100644
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Cow.java
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Cow.java
@@ -178,7 +178,7 @@ public class Cow implements Parcelable, Serializable {
             dam = new Dam();
 
             mode = "";
-            countryOfOrigin = "";//only set this if is sire
+            countryOfOrigin = jsonObject.getString("country");
             serviceType = (DataHandler.isNull(jsonObject.getString("service_type"))) ? "" : jsonObject.getString("service_type");
             otherBreed = "";
             piggyBack = "";
@@ -296,7 +296,7 @@ public class Cow implements Parcelable, Serializable {
         this.ageType = ageType;
     }
 
-    public void setBreeds(String[] breeds, Context context) {
+    public void setBreeds(String[] breeds, Context context, boolean commonBreeds) {
         if(breeds.length == 1){//might mean that there were no breeds
             if(breeds[0].length() == 0){
                 Log.w(TAG, "Appears like the user did not specify any breed, Setting size of breed array to 0");
@@ -306,7 +306,13 @@ public class Cow implements Parcelable, Serializable {
 
         Log.d(TAG, "***** size of breeds = "+String.valueOf(breeds.length));
         //translate breeds to english
-        String[] translatedBreeds =  Locale.translateArrayToEnglish(context, "c_breeds_array", breeds);//assuming that the breeds array is a member of c_breeds_array
+        String[] translatedBreeds  = null;
+        if(commonBreeds){
+            translatedBreeds =  Locale.translateArrayToEnglish(context, "c_breeds_array", breeds);//assuming that the breeds array is a member of c_breeds_array
+        }
+        else{
+            translatedBreeds =  Locale.translateArrayToEnglish(context, "breeds_array", breeds);//assuming that the breeds array is a member of c_breeds_array
+        }
 
         this.breeds = new ArrayList<String>();
         for (int i = 0; i < translatedBreeds.length; i++) {
-- 
2.7.1

