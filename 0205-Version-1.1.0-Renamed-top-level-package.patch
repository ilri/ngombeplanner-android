From 13bf422f63bd95819411bbb7ee42e12ced52383f Mon Sep 17 00:00:00 2001
From: Jason Rogena <j.rogena@cgiar.org>
Date: Thu, 26 Jun 2014 13:09:57 +0300
Subject: [PATCH 205/213] Version 1.1.0: Renamed top level package

Renamed the top level package name from org.cgiar.ilri.mistro to
org.cgiar.ilri.np
---
 MistroFarmer/src/main/AndroidManifest.xml          |   36 +-
 .../cgiar/ilri/mistro/farmer/AddEventActivity.java | 1113 --------------
 .../mistro/farmer/AddMilkProductionActivity.java   |  619 --------
 .../mistro/farmer/CowRegistrationActivity.java     | 1535 --------------------
 .../ilri/mistro/farmer/CowSelectionActivity.java   |  383 -----
 .../cgiar/ilri/mistro/farmer/EditCowActivity.java  | 1294 -----------------
 .../ilri/mistro/farmer/EditFarmerActivity.java     |  612 --------
 .../cgiar/ilri/mistro/farmer/EventsActivity.java   |  137 --
 .../ilri/mistro/farmer/EventsHistoryActivity.java  |  364 -----
 .../mistro/farmer/FarmerRegistrationActivity.java  |  610 --------
 .../mistro/farmer/FarmerSelectionActivity.java     |  310 ----
 .../ilri/mistro/farmer/FertilityActivity.java      |  125 --
 .../cgiar/ilri/mistro/farmer/LandingActivity.java  |  459 ------
 .../org/cgiar/ilri/mistro/farmer/MainMenu.java     |  345 -----
 .../farmer/MilkProcutionHistoryActivity.java       |  590 --------
 .../ilri/mistro/farmer/MilkProductionActivity.java |  533 -------
 .../cgiar/ilri/mistro/farmer/MistroActivity.java   |   49 -
 .../java/org/cgiar/ilri/mistro/farmer/Utils.java   |  121 --
 .../ilri/mistro/farmer/backend/DataHandler.java    | 1086 --------------
 .../cgiar/ilri/mistro/farmer/backend/Locale.java   |  222 ---
 .../farmer/backend/database/DatabaseHelper.java    |  214 ---
 .../org/cgiar/ilri/mistro/farmer/carrier/Cow.java  |  711 ---------
 .../org/cgiar/ilri/mistro/farmer/carrier/Dam.java  |   84 --
 .../cgiar/ilri/mistro/farmer/carrier/Event.java    |  151 --
 .../mistro/farmer/carrier/EventConstraint.java     |   90 --
 .../cgiar/ilri/mistro/farmer/carrier/Farmer.java   |  351 -----
 .../ilri/mistro/farmer/carrier/MilkProduction.java |   95 --
 .../org/cgiar/ilri/mistro/farmer/carrier/Sire.java |  109 --
 .../org/cgiar/ilri/np/farmer/AddEventActivity.java | 1110 ++++++++++++++
 .../ilri/np/farmer/AddMilkProductionActivity.java  |  616 ++++++++
 .../ilri/np/farmer/CowRegistrationActivity.java    | 1534 +++++++++++++++++++
 .../cgiar/ilri/np/farmer/CowSelectionActivity.java |  383 +++++
 .../org/cgiar/ilri/np/farmer/EditCowActivity.java  | 1293 +++++++++++++++++
 .../cgiar/ilri/np/farmer/EditFarmerActivity.java   |  612 ++++++++
 .../org/cgiar/ilri/np/farmer/EventsActivity.java   |  137 ++
 .../ilri/np/farmer/EventsHistoryActivity.java      |  364 +++++
 .../ilri/np/farmer/FarmerRegistrationActivity.java |  609 ++++++++
 .../ilri/np/farmer/FarmerSelectionActivity.java    |  310 ++++
 .../cgiar/ilri/np/farmer/FertilityActivity.java    |  124 ++
 .../org/cgiar/ilri/np/farmer/LandingActivity.java  |  459 ++++++
 .../java/org/cgiar/ilri/np/farmer/MainMenu.java    |  345 +++++
 .../np/farmer/MilkProcutionHistoryActivity.java    |  589 ++++++++
 .../ilri/np/farmer/MilkProductionActivity.java     |  532 +++++++
 .../java/org/cgiar/ilri/np/farmer/NPActivity.java  |   49 +
 .../main/java/org/cgiar/ilri/np/farmer/Utils.java  |  118 ++
 .../cgiar/ilri/np/farmer/backend/DataHandler.java  | 1086 ++++++++++++++
 .../org/cgiar/ilri/np/farmer/backend/Locale.java   |  221 +++
 .../np/farmer/backend/database/DatabaseHelper.java |  213 +++
 .../java/org/cgiar/ilri/np/farmer/carrier/Cow.java |  710 +++++++++
 .../java/org/cgiar/ilri/np/farmer/carrier/Dam.java |   84 ++
 .../org/cgiar/ilri/np/farmer/carrier/Event.java    |  151 ++
 .../ilri/np/farmer/carrier/EventConstraint.java    |   88 ++
 .../org/cgiar/ilri/np/farmer/carrier/Farmer.java   |  351 +++++
 .../ilri/np/farmer/carrier/MilkProduction.java     |   95 ++
 .../org/cgiar/ilri/np/farmer/carrier/Sire.java     |  109 ++
 55 files changed, 12310 insertions(+), 12330 deletions(-)
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddEventActivity.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddMilkProductionActivity.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/CowRegistrationActivity.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/CowSelectionActivity.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/EditCowActivity.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/EditFarmerActivity.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/EventsActivity.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/EventsHistoryActivity.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/FarmerRegistrationActivity.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/FarmerSelectionActivity.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/FertilityActivity.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/LandingActivity.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MainMenu.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MilkProcutionHistoryActivity.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MilkProductionActivity.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MistroActivity.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/Utils.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/DataHandler.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/Locale.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/database/DatabaseHelper.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Cow.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Dam.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Event.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/EventConstraint.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Farmer.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/MilkProduction.java
 delete mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Sire.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/AddEventActivity.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/AddMilkProductionActivity.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/CowRegistrationActivity.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/CowSelectionActivity.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/EditCowActivity.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/EditFarmerActivity.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/EventsActivity.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/EventsHistoryActivity.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/FarmerRegistrationActivity.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/FarmerSelectionActivity.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/FertilityActivity.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/LandingActivity.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/MainMenu.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/MilkProcutionHistoryActivity.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/MilkProductionActivity.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/NPActivity.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/Utils.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/backend/DataHandler.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/backend/Locale.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/backend/database/DatabaseHelper.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/Cow.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/Dam.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/Event.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/EventConstraint.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/Farmer.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/MilkProduction.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/Sire.java

diff --git a/MistroFarmer/src/main/AndroidManifest.xml b/MistroFarmer/src/main/AndroidManifest.xml
index 78af944..bb32dc6 100644
--- a/MistroFarmer/src/main/AndroidManifest.xml
+++ b/MistroFarmer/src/main/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="org.cgiar.ilri.mistro.farmer"
-    android:versionCode="20"
-    android:versionName="1.0.5" >
+    package="org.cgiar.ilri.np.farmer"
+    android:versionCode="21"
+    android:versionName="1.1.0" >
 
     <uses-sdk
         android:minSdkVersion="7"
@@ -31,7 +31,7 @@
         </receiver>
         -->
         <activity
-            android:name="org.cgiar.ilri.mistro.farmer.LandingActivity"
+            android:name="org.cgiar.ilri.np.farmer.LandingActivity"
             android:label="@string/app_name"
             android:screenOrientation="portrait" >
             <intent-filter>
@@ -41,60 +41,60 @@
             </intent-filter>
         </activity>
         <activity
-            android:name="org.cgiar.ilri.mistro.farmer.FarmerRegistrationActivity"
+            android:name="org.cgiar.ilri.np.farmer.FarmerRegistrationActivity"
             android:screenOrientation="portrait" >
         </activity>
         <activity
-            android:name="org.cgiar.ilri.mistro.farmer.CowRegistrationActivity"
+            android:name="org.cgiar.ilri.np.farmer.CowRegistrationActivity"
             android:screenOrientation="portrait" >
         </activity>
         <activity
-            android:name="org.cgiar.ilri.mistro.farmer.MainMenu"
+            android:name="org.cgiar.ilri.np.farmer.MainMenu"
             android:screenOrientation="portrait" >
         </activity>
         <activity
-            android:name="org.cgiar.ilri.mistro.farmer.MilkProductionActivity"
+            android:name="org.cgiar.ilri.np.farmer.MilkProductionActivity"
             android:screenOrientation="portrait" >
         </activity>
-        <activity android:name="org.cgiar.ilri.mistro.farmer.MilkProcutionHistoryActivity" >
+        <activity android:name="org.cgiar.ilri.np.farmer.MilkProcutionHistoryActivity" >
         </activity>
         <activity
-            android:name="org.cgiar.ilri.mistro.farmer.EventsActivity"
+            android:name="org.cgiar.ilri.np.farmer.EventsActivity"
             android:screenOrientation="portrait" >
         </activity>
         <activity
-            android:name="org.cgiar.ilri.mistro.farmer.AddEventActivity"
+            android:name="org.cgiar.ilri.np.farmer.AddEventActivity"
             android:screenOrientation="portrait"
             android:windowSoftInputMode="stateHidden" >
         </activity>
-        <activity android:name="org.cgiar.ilri.mistro.farmer.EventsHistoryActivity" >
+        <activity android:name="org.cgiar.ilri.np.farmer.EventsHistoryActivity" >
         </activity>
         <activity
-            android:name="org.cgiar.ilri.mistro.farmer.FertilityActivity"
+            android:name="org.cgiar.ilri.np.farmer.FertilityActivity"
             android:screenOrientation="portrait" >
         </activity>
         <activity
-            android:name="org.cgiar.ilri.mistro.farmer.AddMilkProductionActivity"
+            android:name="org.cgiar.ilri.np.farmer.AddMilkProductionActivity"
             android:screenOrientation="portrait"
             android:windowSoftInputMode="stateHidden" >
         </activity>
         <activity
-            android:name="org.cgiar.ilri.mistro.farmer.EditFarmerActivity"
+            android:name="org.cgiar.ilri.np.farmer.EditFarmerActivity"
             android:screenOrientation="portrait"
             android:windowSoftInputMode="stateHidden" >
         </activity>
         <activity
-            android:name="org.cgiar.ilri.mistro.farmer.FarmerSelectionActivity"
+            android:name="org.cgiar.ilri.np.farmer.FarmerSelectionActivity"
             android:screenOrientation="portrait"
             android:windowSoftInputMode="stateHidden" >
         </activity>
         <activity
-            android:name="org.cgiar.ilri.mistro.farmer.EditCowActivity"
+            android:name="org.cgiar.ilri.np.farmer.EditCowActivity"
             android:screenOrientation="portrait"
             android:windowSoftInputMode="stateHidden" >
         </activity>
         <activity
-            android:name="org.cgiar.ilri.mistro.farmer.CowSelectionActivity"
+            android:name="org.cgiar.ilri.np.farmer.CowSelectionActivity"
             android:screenOrientation="portrait"
             android:windowSoftInputMode="stateHidden" >
         </activity>
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddEventActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddEventActivity.java
deleted file mode 100644
index d879a70..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddEventActivity.java
+++ /dev/null
@@ -1,1113 +0,0 @@
-package org.cgiar.ilri.mistro.farmer;
-
-import android.app.AlertDialog;
-import android.app.DatePickerDialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.os.AsyncTask;
-import android.os.Bundle;
-import android.provider.Settings;
-import android.telephony.TelephonyManager;
-import android.util.Log;
-import android.view.View;
-import android.widget.AdapterView;
-import android.widget.ArrayAdapter;
-import android.widget.AutoCompleteTextView;
-import android.widget.Button;
-import android.widget.DatePicker;
-import android.widget.EditText;
-import android.widget.Spinner;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import com.actionbarsherlock.app.SherlockActivity;
-import com.actionbarsherlock.view.Menu;
-import com.actionbarsherlock.view.MenuInflater;
-import com.actionbarsherlock.view.MenuItem;
-
-import org.cgiar.ilri.mistro.farmer.backend.DataHandler;
-import org.cgiar.ilri.mistro.farmer.backend.Locale;
-import org.cgiar.ilri.mistro.farmer.carrier.Cow;
-import org.cgiar.ilri.mistro.farmer.carrier.Dam;
-import org.cgiar.ilri.mistro.farmer.carrier.Event;
-import org.cgiar.ilri.mistro.farmer.carrier.EventConstraint;
-import org.cgiar.ilri.mistro.farmer.carrier.Farmer;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.GregorianCalendar;
-import java.util.List;
-
-public class AddEventActivity extends SherlockActivity implements MistroActivity, View.OnClickListener,View.OnFocusChangeListener,DatePickerDialog.OnDateSetListener, Spinner.OnItemSelectedListener
-{
-    private Boolean cacheData;
-
-    public  final String TAG="AddEventActivity";
-    private final String dateFormat="dd/MM/yyyy";
-
-    public static final String KEY_MODE="mode";
-    public static final String MODE_SERVICING="Servicing";
-    public static final String MODE_CALVING="Birth";
-    public static final String KEY_SERVICING_TYPE="servicingType";
-
-    private EditText phantomET;
-    private Menu menu;
-    private TextView cowIdentifierTV;
-    private Spinner cowIdentifierS;
-    private TextView dateTV;
-    private EditText dateET;
-    private TextView eventTypeTV;
-    private Spinner eventTypeS;
-    private TextView eventSubtypeTV;
-    private Spinner eventSubtypeS;
-    private TextView remarksTV;
-    private EditText remarksET;
-    private Button okayB;
-    private Button cancelB;
-    private DatePickerDialog datePickerDialog;
-    private TextView strawNumberTV;
-    private EditText strawNumberET;
-    private TextView vetUsedTV;
-    private EditText vetUsedET;
-    private TextView bullNameTV;
-    private AutoCompleteTextView bullNameACTV;
-    private TextView bullOwnerTV;
-    private Spinner bullOwnerS;
-    private TextView specBullOwnerTV;
-    private EditText specBullOwnerET;
-
-    /*private TextView bullETNTV;
-    private AutoCompleteTextView bullETNACTV;*/
-    private TextView noOfServicingDaysTV;
-    private EditText noOfServicingDaysET;
-    private TextView servicingTV;
-    private Spinner servicingS;
-    private TextView causeOfDeathTV;
-    private Spinner causeOfDeathS;
-    /*private TextView liveBirthsTV;
-    private EditText liveBirthsET;*/
-
-    private String[] cowNameArray;
-    private String[] cowEarTagNumberArray;
-    private String[] cowSexArray;
-    private String enterDate;
-    private String dateInFuture;
-    private String eventRecorded;
-    private String sendUnsuccessfulWarning;
-    private String loadingPleaseWait;
-    private List<Integer> servicingIDs;
-    private List<String> servicingTypes;
-    private List<EventConstraint> eventConstraints;
-    private Farmer farmer;
-
-    private String presetMode;
-    private String presetServicingType;
-    @Override
-    protected void onCreate(Bundle savedInstanceState)
-    {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_add_event);
-        //DataHandler.requestPermissionToUseSMS(this);
-
-        cacheData = true;
-
-        phantomET = (EditText) this.findViewById(R.id.phantom_et);
-        phantomET.requestFocus();
-        cowIdentifierTV=(TextView)findViewById(R.id.cow_identifier_tv);
-        cowIdentifierS=(Spinner)findViewById(R.id.cow_identifier_s);
-        dateTV=(TextView)findViewById(R.id.date_tv);
-        dateET=(EditText)findViewById(R.id.date_et);
-        dateET.setOnFocusChangeListener(this);
-        dateET.setOnClickListener(this);
-        eventTypeTV=(TextView)findViewById(R.id.event_type_tv);
-        eventTypeS=(Spinner)findViewById(R.id.event_type_s);
-        eventTypeS.setOnItemSelectedListener(this);
-        eventSubtypeTV=(TextView)findViewById(R.id.event_subtype_tv);
-        eventSubtypeS=(Spinner)findViewById(R.id.event_subtype_s);
-        servicingTV = (TextView)findViewById(R.id.servicing_tv);
-        servicingS = (Spinner)findViewById(R.id.servicing_s);
-        strawNumberTV = (TextView)findViewById(R.id.straw_number_tv);
-        strawNumberET = (EditText)findViewById(R.id.straw_number_et);
-        vetUsedTV = (TextView)findViewById(R.id.vet_used_tv);
-        vetUsedET = (EditText)findViewById(R.id.vet_used_et);
-        causeOfDeathTV = (TextView)findViewById(R.id.cause_of_death_tv);
-        causeOfDeathS = (Spinner)findViewById(R.id.cause_of_death_s);
-        bullNameTV = (TextView)findViewById(R.id.bull_name_tv);
-        bullNameACTV = (AutoCompleteTextView)findViewById(R.id.bull_name_actv);
-        bullOwnerTV = (TextView)findViewById(R.id.bull_owner_tv);
-        bullOwnerS = (Spinner)findViewById(R.id.bull_owner_s);
-        bullOwnerS.setOnItemSelectedListener(this);
-        specBullOwnerTV = (TextView)findViewById(R.id.spec_bull_owner_tv);
-        specBullOwnerET = (EditText)findViewById(R.id.spec_bull_owner_et);
-        /*bullETNTV = (TextView)findViewById(R.id.bull_etn_tv);
-        bullETNACTV = (AutoCompleteTextView)findViewById(R.id.bull_etn_actv);*/
-        noOfServicingDaysTV = (TextView)findViewById(R.id.no_of_servicing_days_tv);
-        noOfServicingDaysET = (EditText)findViewById(R.id.no_of_servicing_days_et);
-        remarksTV=(TextView)findViewById(R.id.remarks_tv);
-        remarksET=(EditText)findViewById(R.id.remarks_et);
-        /*liveBirthsTV = (TextView)findViewById(R.id.live_births_tv);
-        liveBirthsET = (EditText)findViewById(R.id.live_births_et);*/
-        okayB=(Button)findViewById(R.id.okay_b);
-        okayB.setOnClickListener(this);
-        cancelB = (Button)findViewById(R.id.cancel_b);
-        cancelB.setOnClickListener(this);
-
-        initTextInViews();
-        fetchCowIdentifiers();
-        fetchServicingEvents();
-
-        Bundle bundle = this.getIntent().getExtras();
-        if(bundle!=null) {
-            presetMode = bundle.getString(KEY_MODE);
-            if(presetMode.equals(MODE_SERVICING)){
-                presetServicingType = bundle.getString(KEY_SERVICING_TYPE);
-            }
-            modeSet();
-        }
-    }
-
-    private void cacheEditTextData(){
-        if(cacheData) {
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_DATE, dateET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_REMARKS, remarksET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_STRAW_NUMBER, strawNumberET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_VET_USED, vetUsedET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_BULL_NAME, bullNameACTV.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_BULL_OWNER, specBullOwnerET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_NO_SERVICING_DAYS, noOfServicingDaysET.getText().toString());
-        }
-    }
-
-    private void restoreEditTextData(){
-        dateET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_AEA_DATE, ""));
-        remarksET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_AEA_REMARKS, ""));
-        strawNumberET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_AEA_STRAW_NUMBER, ""));
-        vetUsedET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_AEA_VET_USED, ""));
-        bullNameACTV.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_AEA_BULL_NAME, ""));
-        specBullOwnerET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_AEA_BULL_OWNER, ""));
-        noOfServicingDaysET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_AEA_NO_SERVICING_DAYS, ""));
-    }
-
-    private void clearEditTextDataCache(){
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_DATE, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_REMARKS, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_STRAW_NUMBER, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_VET_USED, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_BULL_NAME, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_BULL_OWNER, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_NO_SERVICING_DAYS, "");
-
-        cacheData = false;
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-
-        cacheEditTextData();
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-
-        restoreEditTextData();
-    }
-
-    public boolean onCreateOptionsMenu(Menu menu) {
-        MenuInflater inflater = getSupportMenuInflater();
-        inflater.inflate(R.menu.add_event, menu);
-        this.menu = menu;
-        initMenuText();
-        return true;
-    }
-
-    public boolean onOptionsItemSelected(MenuItem item) {
-        // Handle item selection
-        if(Language.processLanguageMenuItemSelected(this, this, item)){
-            return true;
-        }
-        else if(item.getItemId() == R.id.action_back_main_menu) {
-            DialogInterface.OnClickListener onClickListener = new DialogInterface.OnClickListener() {
-                @Override
-                public void onClick(DialogInterface dialog, int which) {
-                    if(which==DialogInterface.BUTTON_POSITIVE){
-                        dialog.dismiss();
-
-                        clearEditTextDataCache();
-
-                        Intent intent = new Intent(AddEventActivity.this, MainMenu.class);
-                        intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_FARMER);
-                        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-                        startActivity(intent);
-                    }
-                    else{
-                        dialog.cancel();
-                    }
-                }
-            };
-            AlertDialog mainMenuDialog = Utils.createMainMenuDialog(this, onClickListener);
-            mainMenuDialog.show();
-        }
-        return false;
-    }
-
-    private void modeSet(){
-        if(presetMode.equals(MODE_CALVING)){
-            String[] eventTypesInEN = Locale.getArrayInLocale("cow_event_types",this);
-            for(int i = 0; i < eventTypesInEN.length; i++){
-                if(eventTypesInEN[i].equals("Birth")){
-                    eventTypeS.setSelection(i);
-                    break;
-                }
-            }
-
-            eventTypeSelected();
-
-            this.setTitle(Locale.getStringInLocale("calving",this));
-            eventTypeTV.setVisibility(TextView.GONE);
-            eventTypeS.setVisibility(Spinner.GONE);
-            servicingTV.setVisibility(TextView.GONE);
-            servicingS.setVisibility(Spinner.GONE);
-        }
-        else if(presetMode.equals(MODE_SERVICING)){
-            if(presetServicingType.equals(Cow.SERVICE_TYPE_BULL)){
-                String[] eventTypesInEN = Locale.getArrayInLocale("cow_event_types",this);
-                for(int i = 0; i < eventTypesInEN.length; i++){
-                    if(eventTypesInEN[i].equals("Bull Servicing")){
-                        eventTypeS.setSelection(i);
-                        break;
-                    }
-                }
-
-                eventTypeSelected();
-
-                this.setTitle(Locale.getStringInLocale("bull_servicing",this));
-                dateTV.setText(Locale.getStringInLocale("date_served", this));
-                eventTypeTV.setVisibility(TextView.GONE);
-                eventTypeS.setVisibility(Spinner.GONE);
-                noOfServicingDaysTV.setVisibility(TextView.GONE);
-                noOfServicingDaysET.setVisibility(EditText.GONE);
-                bullNameTV.setVisibility(TextView.VISIBLE);
-                bullNameACTV.setVisibility(AutoCompleteTextView.VISIBLE);
-                bullOwnerTV.setVisibility(TextView.VISIBLE);
-                bullOwnerS.setVisibility(Spinner.VISIBLE);
-                //specBullOwnerTV.setVisibility(TextView.VISIBLE);
-                //specBullOwnerET.setVisibility(EditText.VISIBLE);
-                /*bullETNTV.setVisibility(TextView.VISIBLE);
-                bullETNACTV.setVisibility(AutoCompleteTextView.VISIBLE);*/
-                remarksTV.setVisibility(TextView.GONE);
-                remarksET.setVisibility(EditText.GONE);
-            }
-            else if(presetServicingType.equals(Cow.SERVICE_TYPE_AI)){
-                String[] eventTypesInEN = Locale.getArrayInLocale("cow_event_types",this);
-                for(int i = 0; i < eventTypesInEN.length; i++){
-                    if(eventTypesInEN[i].equals("Artificial Insemination")){
-                        eventTypeS.setSelection(i);
-                        break;
-                    }
-                }
-
-                eventTypeSelected();
-
-                this.setTitle(Locale.getStringInLocale("artificial_inseminamtion",this));
-                dateTV.setText(Locale.getStringInLocale("date_of_insemination", this));
-                eventTypeTV.setVisibility(TextView.GONE);
-                eventTypeS.setVisibility(Spinner.GONE);
-                bullNameTV.setVisibility(TextView.GONE);
-                bullNameACTV.setVisibility(AutoCompleteTextView.GONE);
-                bullOwnerTV.setVisibility(TextView.GONE);
-                bullOwnerS.setVisibility(Spinner.GONE);
-                specBullOwnerTV.setVisibility(TextView.GONE);
-                specBullOwnerET.setVisibility(EditText.GONE);
-                /*bullETNTV.setVisibility(TextView.GONE);
-                bullETNACTV.setVisibility(AutoCompleteTextView.GONE);*/
-                remarksTV.setVisibility(TextView.GONE);
-                remarksET.setVisibility(EditText.GONE);
-            }
-        }
-    }
-
-    @Override
-    public void initTextInViews() {
-        setTitle(Locale.getStringInLocale("add_an_event",this));
-        cowIdentifierTV.setText(Locale.getStringInLocale("cow",this));
-        dateTV.setText(Locale.getStringInLocale("date",this));
-        eventTypeTV.setText(Locale.getStringInLocale("event",this));
-
-        int eventTypeArrayID = Locale.getArrayIDInLocale("cow_event_types",this);
-        if(eventTypeArrayID !=0) {
-            ArrayAdapter<CharSequence> eventTypeArrayAdapter=ArrayAdapter.createFromResource(this, eventTypeArrayID, android.R.layout.simple_spinner_item);
-            eventTypeArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-            eventTypeS.setAdapter(eventTypeArrayAdapter);
-        }
-        strawNumberTV.setText(Locale.getStringInLocale("straw_number",this));
-        vetUsedTV.setText(Locale.getStringInLocale("vet_used",this));
-        causeOfDeathTV.setText(Locale.getStringInLocale("cause_of_death",this));
-        int causesOfDeathID = Locale.getArrayIDInLocale("causes_of_death",this);
-        if(causesOfDeathID != 0) {
-            ArrayAdapter<CharSequence> causesOfDeathArrayAdapter=ArrayAdapter.createFromResource(this, causesOfDeathID, android.R.layout.simple_spinner_item);
-            causesOfDeathArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-            causeOfDeathS.setAdapter(causesOfDeathArrayAdapter);
-        }
-        bullNameTV.setText(Locale.getStringInLocale("servicing_bull_name",this));
-        bullNameACTV.setHint(Locale.getStringInLocale("servicing_bull_identifier_hint", this));
-        bullOwnerTV.setText(Locale.getStringInLocale("bull_owner", this));
-
-        int bullOwnersID = Locale.getArrayIDInLocale("bull_owners", this);
-        if(bullOwnersID != 0){
-            ArrayAdapter<CharSequence> bullOwnerArrayAdapter = ArrayAdapter.createFromResource(this, bullOwnersID, android.R.layout.simple_spinner_item);
-            bullOwnerArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-            bullOwnerS.setAdapter(bullOwnerArrayAdapter);
-        }
-
-        specBullOwnerTV.setText(Locale.getStringInLocale("name_bull_owner", this));
-        specBullOwnerET.setHint(Locale.getStringInLocale("name_of_other_farmer_or_group", this));
-
-        //bullETNTV.setText(Locale.getStringInLocale("servicing_bull_ear_tag_number",this));
-        noOfServicingDaysTV.setText(Locale.getStringInLocale("no_of_days_in_servicing",this));
-        remarksTV.setText(Locale.getStringInLocale("remarks",this));
-        okayB.setText(Locale.getStringInLocale("okay",this));
-        enterDate=Locale.getStringInLocale("enter_date",this);
-        dateInFuture=Locale.getStringInLocale("date_in_future",this);
-        eventRecorded=Locale.getStringInLocale("event_successfully_recorded",this);
-        sendUnsuccessfulWarning=Locale.getStringInLocale("something_went_wrong_try_again",this);
-        loadingPleaseWait = Locale.getStringInLocale("loading_please_wait",this);
-        servicingTV.setText(Locale.getStringInLocale("associated_servicing",this));
-        //liveBirthsTV.setText(Locale.getStringInLocale("previous_live_births",this));
-
-        cancelB.setText(Locale.getStringInLocale("cancel", this));
-
-        initMenuText();
-    }
-
-    private void initMenuText(){
-        if(this.menu != null){
-            MenuItem mainMenuMI = menu.findItem(R.id.action_back_main_menu);
-            mainMenuMI.setTitle(Locale.getStringInLocale("back_to_main_menu", this));
-        }
-    }
-
-    private void fetchCowIdentifiers()
-    {
-        CowIdentifierThread cowIdentifierThread=new CowIdentifierThread();
-        TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
-        cowIdentifierThread.execute(telephonyManager.getSimSerialNumber());
-    }
-
-    private void setCowIdentifiers(String[] cowIdentifiers)
-    {
-        if(cowIdentifierS!=null)
-        {
-            ArrayAdapter<String> cowsArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_dropdown_item,cowIdentifiers);
-            cowsArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-            cowIdentifierS.setAdapter(cowsArrayAdapter);
-        }
-    }
-
-    @Override
-    public void onClick(View view)
-    {
-        if(view==okayB)
-        {
-            sendEvent();
-        }
-        else if(view==dateET)
-        {
-            dateETClicked();
-        }
-        else if(view == cancelB){
-            Intent intent;
-
-            clearEditTextDataCache();
-
-            if(presetMode != null && (presetMode.equals(MODE_CALVING) || presetMode.equals(MODE_SERVICING))){
-                intent = new Intent(this, FertilityActivity.class);
-            }
-            else{
-                intent = new Intent(this, EventsActivity.class);
-            }
-            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-            startActivity(intent);
-        }
-    }
-
-    private void eventTypeSelected(){
-        okayB.setText(Locale.getStringInLocale("okay",this));
-        dateTV.setText(Locale.getStringInLocale("date",this));
-        eventSubtypeTV.setVisibility(TextView.GONE);
-        eventSubtypeS.setVisibility(Spinner.GONE);
-        strawNumberTV.setVisibility(TextView.GONE);
-        strawNumberET.setVisibility(EditText.GONE);
-        vetUsedTV.setVisibility(TextView.GONE);
-        vetUsedET.setVisibility(EditText.GONE);
-        bullNameTV.setVisibility(TextView.GONE);
-        bullNameACTV.setVisibility(AutoCompleteTextView.GONE);
-        bullOwnerTV.setVisibility(TextView.GONE);
-        bullOwnerS.setVisibility(Spinner.GONE);
-        specBullOwnerTV.setVisibility(TextView.GONE);
-        specBullOwnerET.setVisibility(EditText.GONE);
-        /*bullETNTV.setVisibility(TextView.GONE);
-        bullETNACTV.setVisibility(AutoCompleteTextView.GONE);*/
-        remarksTV.setVisibility(TextView.GONE);
-        remarksET.setVisibility(EditText.GONE);
-        cowIdentifierS.setVisibility(Spinner.GONE);
-        cowIdentifierTV.setVisibility(TextView.GONE);
-        noOfServicingDaysTV.setVisibility(TextView.GONE);
-        noOfServicingDaysET.setVisibility(EditText.GONE);
-        servicingTV.setVisibility(TextView.GONE);
-        servicingS.setVisibility(Spinner.GONE);
-        causeOfDeathTV.setVisibility(TextView.GONE);
-        causeOfDeathS.setVisibility(Spinner.GONE);
-        /*liveBirthsTV.setVisibility(TextView.GONE);
-        liveBirthsET.setVisibility(EditText.GONE);*/
-        String[] eventTypesEN = Locale.getArrayInLocale("cow_event_types", this, Locale.LOCALE_ENGLISH);
-        if(eventTypesEN[eventTypeS.getSelectedItemPosition()].equals("Birth")) {
-            birthEventSelected();
-            eventSubtypeTV.setVisibility(TextView.VISIBLE);
-            eventSubtypeS.setVisibility(Spinner.VISIBLE);
-            servicingTV.setVisibility(TextView.VISIBLE);
-            servicingS.setVisibility(Spinner.VISIBLE);
-            cowIdentifierS.setVisibility(Spinner.VISIBLE);
-            cowIdentifierTV.setVisibility(TextView.VISIBLE);
-            okayB.setText(Locale.getStringInLocale("next",this));
-            /*liveBirthsTV.setVisibility(TextView.VISIBLE);
-            liveBirthsET.setVisibility(EditText.VISIBLE);*/
-        }
-        else if(eventTypesEN[eventTypeS.getSelectedItemPosition()].equals("Abortion")) {
-            servicingTV.setVisibility(TextView.VISIBLE);
-            servicingS.setVisibility(Spinner.VISIBLE);
-            remarksTV.setVisibility(TextView.VISIBLE);
-            remarksET.setVisibility(EditText.VISIBLE);
-            cowIdentifierS.setVisibility(Spinner.VISIBLE);
-            cowIdentifierTV.setVisibility(TextView.VISIBLE);
-        }
-        else if(eventTypesEN[eventTypeS.getSelectedItemPosition()].equals("Acquisition")) {
-            okayB.setText(Locale.getStringInLocale("next",this));
-        }
-        else if(eventTypesEN[eventTypeS.getSelectedItemPosition()].equals("Artificial Insemination")) {
-            dateTV.setText(Locale.getStringInLocale("date_of_insemination", this));
-            strawNumberTV.setVisibility(TextView.VISIBLE);
-            strawNumberET.setVisibility(EditText.VISIBLE);
-            vetUsedTV.setVisibility(TextView.VISIBLE);
-            vetUsedET.setVisibility(EditText.VISIBLE);
-            remarksTV.setVisibility(TextView.VISIBLE);
-            remarksET.setVisibility(EditText.VISIBLE);
-            cowIdentifierS.setVisibility(Spinner.VISIBLE);
-            cowIdentifierTV.setVisibility(TextView.VISIBLE);
-        }
-        else if(eventTypesEN[eventTypeS.getSelectedItemPosition()].equals("Bull Servicing")) {
-            dateTV.setText(Locale.getStringInLocale("date_served", this));
-            bullNameTV.setVisibility(TextView.VISIBLE);
-            bullNameACTV.setVisibility(AutoCompleteTextView.VISIBLE);
-            bullOwnerTV.setVisibility(TextView.VISIBLE);
-            bullOwnerS.setVisibility(Spinner.VISIBLE);
-            specBullOwnerTV.setVisibility(TextView.VISIBLE);
-            specBullOwnerET.setVisibility(EditText.VISIBLE);
-            /*bullETNTV.setVisibility(TextView.VISIBLE);
-            bullETNACTV.setVisibility(AutoCompleteTextView.VISIBLE);*/
-            remarksTV.setVisibility(TextView.VISIBLE);
-            remarksET.setVisibility(EditText.VISIBLE);
-            cowIdentifierS.setVisibility(Spinner.VISIBLE);
-            cowIdentifierTV.setVisibility(TextView.VISIBLE);
-            noOfServicingDaysTV.setVisibility(TextView.VISIBLE);
-            noOfServicingDaysET.setVisibility(EditText.VISIBLE);
-            dateTV.setText(Locale.getStringInLocale("start_date", this));
-        }
-        else if(eventTypesEN[eventTypeS.getSelectedItemPosition()].equals("Death")) {
-            causeOfDeathTV.setVisibility(TextView.VISIBLE);
-            causeOfDeathS.setVisibility(Spinner.VISIBLE);
-            remarksTV.setVisibility(TextView.VISIBLE);
-            remarksET.setVisibility(EditText.VISIBLE);
-            cowIdentifierS.setVisibility(Spinner.VISIBLE);
-            cowIdentifierTV.setVisibility(TextView.VISIBLE);
-        }
-        else {
-            remarksTV.setVisibility(TextView.VISIBLE);
-            remarksET.setVisibility(EditText.VISIBLE);
-            cowIdentifierS.setVisibility(Spinner.VISIBLE);
-            cowIdentifierTV.setVisibility(TextView.VISIBLE);
-        }
-    }
-
-    @Override
-    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
-        if(parent == eventTypeS) {
-            eventTypeSelected();
-        }
-        else if(parent == bullOwnerS){
-            String[] bullOwnersInEN = Locale.getArrayInLocale("bull_owners", this, Locale.LOCALE_ENGLISH);
-            if(bullOwnersInEN[bullOwnerS.getSelectedItemPosition()].equals("Own bull")){
-                specBullOwnerET.setVisibility(EditText.GONE);
-                specBullOwnerTV.setVisibility(TextView.GONE);
-            }
-            else{
-                specBullOwnerET.setVisibility(EditText.VISIBLE);
-                specBullOwnerTV.setVisibility(TextView.VISIBLE);
-            }
-        }
-    }
-
-    private void birthEventSelected() {
-        eventSubtypeTV.setText(Locale.getStringInLocale("type_of_birth",this));
-        int eventSubtypeArrayID = Locale.getArrayIDInLocale("birth_types",this);
-        if(eventSubtypeArrayID != 0) {
-            ArrayAdapter<CharSequence> eventSubtypeArrayAdapter=ArrayAdapter.createFromResource(this, eventSubtypeArrayID, android.R.layout.simple_spinner_item);
-            eventSubtypeArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-            eventSubtypeS.setAdapter(eventSubtypeArrayAdapter);
-        }
-    }
-
-    @Override
-    public void onNothingSelected(AdapterView<?> parent) {
-
-    }
-
-    private boolean validateInput()
-    {
-
-        String[] eventTypesInEN = Locale.getArrayInLocale("cow_event_types",this, Locale.LOCALE_ENGLISH);
-        String selectedEvent = eventTypesInEN[eventTypeS.getSelectedItemPosition()];
-        if(dateET.getText().toString()==null||dateET.getText().toString().length()==0) {
-            Toast.makeText(this,enterDate,Toast.LENGTH_LONG).show();
-            return false;
-        }
-        else {
-            if(!validateDate()){
-                return false;
-            }
-        }
-        if(selectedEvent.length() == 0){
-            Toast.makeText(this,Locale.getStringInLocale("select_an_event",this),Toast.LENGTH_LONG).show();
-            return false;
-        }
-        if(selectedEvent.equals("Abortion") || selectedEvent.equals("Birth") || selectedEvent.equals("Start of Lactation") || selectedEvent.equals("Dry Off") || selectedEvent.equals("Artificial Insemination") || selectedEvent.equals("Bull Servicing")) {
-            if(cowSexArray != null && cowSexArray[cowIdentifierS.getSelectedItemPosition()].equals(Cow.SEX_MALE)) {
-                Toast.makeText(this,Locale.getStringInLocale("event_only_for_female_cattle",this),Toast.LENGTH_LONG).show();
-                return false;
-            }
-        }
-        if(selectedEvent.equals("Birth")){
-            /*if(liveBirthsET.getText().toString()==null || liveBirthsET.getText().toString().trim().length()==0){
-                Toast.makeText(this,Locale.getStringInLocale("enter_previous_live_births",this),Toast.LENGTH_LONG).show();
-                return false;
-            }*/
-        }
-
-        Cow selectedCow = farmer.getCows().get(cowIdentifierS.getSelectedItemPosition());
-        if(selectedCow != null){
-            if(selectedEvent.equals("Birth")){
-                for(int i = 0; i < eventConstraints.size(); i++){
-                    EventConstraint currConstraint = eventConstraints.get(i);
-                    if(currConstraint.getEvent().equals(EventConstraint.CONSTRAINT_CALVING)){
-                        if(selectedCow.getAgeMilliseconds()<currConstraint.getTimeMilliseconds()){
-                            Toast.makeText(this,Locale.getStringInLocale("cow_too_young", this),Toast.LENGTH_LONG).show();
-                            return false;
-                        }
-                    }
-                }
-            }
-            else if(selectedEvent.equals("Start of Lactation")){
-                for(int i = 0; i < eventConstraints.size(); i++){
-                    EventConstraint currConstraint = eventConstraints.get(i);
-                    if(currConstraint.getEvent().equals(EventConstraint.CONSTRAINT_MILKING)){
-                        if(selectedCow.getAgeMilliseconds()<currConstraint.getTimeMilliseconds()){
-                            Toast.makeText(this,Locale.getStringInLocale("cow_too_young", this),Toast.LENGTH_LONG).show();
-                            return false;
-                        }
-                    }
-                }
-            }
-            else if(selectedEvent.equals("Artificial Insemination") || selectedEvent.equals("Bull Servicing") || selectedEvent.equals("Signs of Heat")){
-                for(int i = 0; i < eventConstraints.size(); i++){
-                    EventConstraint currConstraint = eventConstraints.get(i);
-                    if(currConstraint.getEvent().equals(EventConstraint.CONSTRAINT_MATURITY)){
-                        if(selectedCow.getAgeMilliseconds()<currConstraint.getTimeMilliseconds()){
-                            Toast.makeText(this,Locale.getStringInLocale("cow_too_young", this),Toast.LENGTH_LONG).show();
-                            return false;
-                        }
-                    }
-                }
-            }
-
-        }
-
-        return true;
-    }
-
-    private boolean validateDate() {
-        try
-        {
-            Date dateEntered=new SimpleDateFormat(dateFormat, java.util.Locale.ENGLISH).parse(dateET.getText().toString());
-            Date today=new Date();
-            long milisecondDifference = today.getTime() - dateEntered.getTime();
-            long days = milisecondDifference / 86400000;
-            if((today.getTime()-dateEntered.getTime())<0)
-            {
-                Toast.makeText(this,dateInFuture,Toast.LENGTH_LONG).show();
-                return false;
-            }
-            else if(days > 15) {//more than 15 days
-                Toast.makeText(this,Locale.getStringInLocale("event_too_old",this),Toast.LENGTH_LONG).show();
-                return false;
-            }
-            else {
-                return true;
-            }
-        }
-        catch (ParseException e)
-        {
-            e.printStackTrace();
-            return false;
-        }
-    }
-
-    private void sendEvent()
-    {
-        if(validateInput()){
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_DATE, "");
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_REMARKS, "");
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_STRAW_NUMBER, "");
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_VET_USED, "");
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_BULL_NAME, "");
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_BULL_OWNER, "");
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_NO_SERVICING_DAYS, "");
-
-            String[] eventTypes = Locale.getArrayInLocale("cow_event_types",this,Locale.LOCALE_ENGLISH);
-            String selectedEvent = eventTypes[eventTypeS.getSelectedItemPosition()];
-            String[] eventSubtypes = Locale.getArrayInLocale("birth_types",this,Locale.LOCALE_ENGLISH);
-            if(selectedEvent.equals("Birth") && (eventSubtypes[eventSubtypeS.getSelectedItemPosition()].equals("Normal") || eventSubtypes[eventSubtypeS.getSelectedItemPosition()].equals("Premature"))) {
-                AlertDialog cowRegistrationAlertDialog = constructCalfRegistrationDialog();
-                cowRegistrationAlertDialog.show();
-            }
-            else if(selectedEvent.equals("Acquisition")) {
-                AlertDialog cowRegistrationAlertDialog = constructCowRegistrationDialog();
-                cowRegistrationAlertDialog.show();
-            }
-            else {
-                String selectedCowETN = cowEarTagNumberArray[cowIdentifierS.getSelectedItemPosition()];
-                String selectedCowName = cowNameArray[cowIdentifierS.getSelectedItemPosition()];
-                TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
-                String serialNumber = telephonyManager.getSimSerialNumber();
-                JSONObject jsonObject = new JSONObject();
-                try
-                {
-                    String[] causesOfDeathInEN = Locale.getArrayInLocale("causes_of_death",AddEventActivity.this,Locale.LOCALE_ENGLISH);
-                    jsonObject.put("simCardSN", serialNumber);
-                    jsonObject.put("cowEarTagNumber", selectedCowETN);
-                    jsonObject.put("cowName", selectedCowName);
-                    jsonObject.put("date", dateET.getText().toString());
-                    jsonObject.put("eventType", selectedEvent);
-                    jsonObject.put("remarks", remarksET.getText().toString());
-                    jsonObject.put("strawNumber", strawNumberET.getText().toString());
-                    jsonObject.put("vetUsed", vetUsedET.getText().toString());
-                    //jsonObject.put("bullName", bullNameACTV.getText().toString());
-
-                    //check if hint put as value of bullNameACTV
-                    String bullEarTagNo = bullNameACTV.getText().toString();
-                    if(bullEarTagNo.equals(Locale.getStringInLocale("servicing_bull_identifier_hint", AddEventActivity.this)))
-                        bullEarTagNo = "";
-                    jsonObject.put("bullEarTagNo", bullEarTagNo);
-
-                    if(selectedEvent.equals("Bull Servicing")){
-                        String[] bullOwnersInEN = Locale.getArrayInLocale("bull_owners", AddEventActivity.this, Locale.LOCALE_ENGLISH);
-                        jsonObject.put("bullOwner", bullOwnersInEN[bullOwnerS.getSelectedItemPosition()]);
-
-                        //check if hint put as value of EditText
-                        String bullOwnerName = specBullOwnerET.getText().toString();
-                        if(bullOwnerName.equals(Locale.getStringInLocale("name_of_other_farmer_or_group", AddEventActivity.this)))
-                            bullOwnerName = "";
-                        jsonObject.put("bullOwnerName", bullOwnerName);
-                    }
-                    //jsonObject.put("bullEarTagNo", bullETNACTV.getText().toString());
-                    jsonObject.put("noOfServicingDays", noOfServicingDaysET.getText().toString());
-                    if(servicingIDs != null && servicingS.getSelectedItemPosition() != -1) {
-                        jsonObject.put("parentEvent", servicingIDs.get(servicingS.getSelectedItemPosition()));
-                    }
-                    if(selectedEvent.equals("Birth")){
-                        String[] birthTypesInEN = Locale.getArrayInLocale("birth_types", AddEventActivity.this, Locale.LOCALE_ENGLISH);
-                        jsonObject.put("birthType", birthTypesInEN[eventSubtypeS.getSelectedItemPosition()]);
-                        //jsonObject.put("liveBirths", liveBirthsET.getText().toString());
-                    }
-                    jsonObject.put("causeOfDeath", causesOfDeathInEN[causeOfDeathS.getSelectedItemPosition()]);
-                    CowEventAdditionThread cowEventAdditionThread=new CowEventAdditionThread();
-                    cowEventAdditionThread.execute(jsonObject);
-                }
-                catch (JSONException e)
-                {
-                    e.printStackTrace();
-                }
-            }
-        }
-    }
-
-    private AlertDialog constructCalfRegistrationDialog() {
-        AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(this);
-        alertDialogBuilder.setTitle(Locale.getStringInLocale("calf_registration", this));
-        alertDialogBuilder
-                .setMessage(Locale.getStringInLocale("next_screen_is_calf_registration",AddEventActivity.this))
-                .setCancelable(false)
-                .setPositiveButton(Locale.getStringInLocale("next", AddEventActivity.this), new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialog, int which) {
-                        int numberOfCows = 1;
-                        Farmer farmer = new Farmer();
-                        farmer.setCowNumber(numberOfCows);
-                        farmer.setMode(Farmer.MODE_NEW_COW_REGISTRATION);
-                        TelephonyManager telephonyManager = (TelephonyManager) AddEventActivity.this.getSystemService(Context.TELEPHONY_SERVICE);
-                        farmer.setSimCardSN(telephonyManager.getSimSerialNumber());
-                        Cow thisCalf = new Cow(true);
-                        Dam calfDam = new Dam();
-                        calfDam.setEarTagNumber(cowEarTagNumberArray[cowIdentifierS.getSelectedItemPosition()]);
-                        calfDam.setName(cowNameArray[cowIdentifierS.getSelectedItemPosition()]);
-                        thisCalf.setDam(calfDam);
-                        JSONObject jsonObject = new JSONObject();
-                        String[] birthTypesInEN = Locale.getArrayInLocale("birth_types", AddEventActivity.this, Locale.LOCALE_ENGLISH);
-                        try {
-                            String selectedCowETN = cowEarTagNumberArray[cowIdentifierS.getSelectedItemPosition()];
-                            String selectedCowName = cowNameArray[cowIdentifierS.getSelectedItemPosition()];
-
-                            jsonObject.put("motherETN", selectedCowETN);
-                            jsonObject.put("motherName", selectedCowName);
-                            jsonObject.put("birthType", birthTypesInEN[eventSubtypeS.getSelectedItemPosition()]);
-                            if(servicingIDs != null && servicingS.getSelectedItemPosition() != -1) {
-                                jsonObject.put("parentEvent", servicingIDs.get(servicingS.getSelectedItemPosition()));
-                            }
-                            //jsonObject.put("liveBirths", liveBirthsET.getText().toString());
-
-                            thisCalf.setPiggyBack(jsonObject.toString());
-                        } catch (JSONException e) {
-                            e.printStackTrace();
-                        }
-                        if(servicingTypes != null && servicingS.getSelectedItemPosition() != -1) {
-                            if (servicingTypes.get(servicingS.getSelectedItemPosition()).equals("Artificial Insemination")) {
-                                thisCalf.setServiceType(Cow.SERVICE_TYPE_AI);
-                            } else if (servicingTypes.get(servicingS.getSelectedItemPosition()).equals("Bull Servicing")) {
-                                thisCalf.setServiceType(Cow.SERVICE_TYPE_BULL);
-                            }
-                        }
-                        thisCalf.setDateOfBirth(dateET.getText().toString());
-                        thisCalf.setMode(Cow.MODE_BORN_CALF_REGISTRATION);
-
-                        farmer.setCow(thisCalf, 0);
-
-                        clearEditTextDataCache();
-
-                        Intent intent = new Intent(AddEventActivity.this, CowRegistrationActivity.class);
-                        //intent.putExtra(CowRegistrationActivity.KEY_MODE,CowRegistrationActivity.MODE_COW);
-                        intent.putExtra(CowRegistrationActivity.KEY_INDEX, 0);
-                        intent.putExtra(CowRegistrationActivity.KEY_NUMBER_OF_COWS, numberOfCows);
-                        Bundle bundle = new Bundle();
-                        bundle.putParcelable(Farmer.PARCELABLE_KEY, farmer);
-                        intent.putExtras(bundle);
-                        startActivity(intent);
-                    }
-                })
-                .setNegativeButton(Locale.getStringInLocale("cancel", AddEventActivity.this), new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialog, int which) {
-                        dialog.cancel();
-                    }
-                });
-        AlertDialog alertDialog=alertDialogBuilder.create();
-        return alertDialog;
-    }
-
-    private AlertDialog constructCowRegistrationDialog() {
-        AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(this);
-        alertDialogBuilder.setTitle(Locale.getStringInLocale("cow_registration_proper", this));
-        alertDialogBuilder
-                .setMessage(Locale.getStringInLocale("next_screen_is_cow_registration",AddEventActivity.this))
-                .setCancelable(false)
-                .setPositiveButton(Locale.getStringInLocale("next", AddEventActivity.this), new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialog, int which) {
-                        int numberOfCows = 1;
-                        Farmer farmer = new Farmer();
-                        farmer.setCowNumber(numberOfCows);
-                        farmer.setMode(Farmer.MODE_NEW_COW_REGISTRATION);
-                        TelephonyManager telephonyManager = (TelephonyManager) AddEventActivity.this.getSystemService(Context.TELEPHONY_SERVICE);
-                        farmer.setSimCardSN(telephonyManager.getSimSerialNumber());
-                        Cow thisCow = new Cow(true);
-                        JSONObject jsonObject = new JSONObject();
-                        try {
-                            jsonObject.put("remarks", remarksET.getText().toString());
-                            thisCow.setPiggyBack(jsonObject.toString());
-                        } catch (JSONException e) {
-                            e.printStackTrace();
-                        }
-                        thisCow.setMode(Cow.MODE_ADULT_COW_REGISTRATION);
-                        farmer.setCow(thisCow, 0);
-
-                        clearEditTextDataCache();
-
-                        Intent intent = new Intent(AddEventActivity.this, CowRegistrationActivity.class);
-                        //intent.putExtra(CowRegistrationActivity.KEY_MODE,CowRegistrationActivity.MODE_COW);
-                        intent.putExtra(CowRegistrationActivity.KEY_INDEX, 0);
-                        intent.putExtra(CowRegistrationActivity.KEY_NUMBER_OF_COWS, numberOfCows);
-                        Bundle bundle = new Bundle();
-                        bundle.putParcelable(Farmer.PARCELABLE_KEY, farmer);
-                        intent.putExtras(bundle);
-                        startActivity(intent);
-                    }
-                })
-                .setNegativeButton(Locale.getStringInLocale("cancel", AddEventActivity.this), new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialog, int which) {
-                        dialog.cancel();
-                    }
-                });
-        AlertDialog alertDialog=alertDialogBuilder.create();
-        return alertDialog;
-    }
-
-    private class CowEventAdditionThread extends AsyncTask<JSONObject, Integer, Boolean>
-    {
-        private ProgressDialog progressDialog;
-
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-            progressDialog = ProgressDialog.show(AddEventActivity.this, "",loadingPleaseWait, true);
-        }
-
-        @Override
-        protected Boolean doInBackground(JSONObject... params) {
-            //public static final void cacheRequest(Context context, String jsonString, String appendedURL){
-            boolean response = DataHandler.cacheRequest(AddEventActivity.this, params[0].toString(), DataHandler.FARMER_ADD_COW_EVENT_URL);
-            return response;
-        }
-
-        @Override
-        protected void onPostExecute(Boolean result)
-        {
-            super.onPostExecute(result);
-            progressDialog.dismiss();
-            if(result == null || result == false){
-                Toast.makeText(AddEventActivity.this, sendUnsuccessfulWarning, Toast.LENGTH_LONG).show();
-            }
-            else if(result == true) {
-                Toast.makeText(AddEventActivity.this, eventRecorded, Toast.LENGTH_LONG).show();
-                Intent intent;
-
-                clearEditTextDataCache();
-
-                if(presetMode != null && (presetMode.equals(MODE_SERVICING) || presetMode.equals(MODE_CALVING))){
-                    intent = new Intent(AddEventActivity.this, FertilityActivity.class);
-                    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-                }
-                else{
-                    intent = new Intent(AddEventActivity.this, EventsActivity.class);
-                    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-                }
-                startActivity(intent);
-            }
-        }
-    }
-
-    @Override
-    public void onFocusChange(View view, boolean hasFocus)
-    {
-        if(view==dateET && hasFocus)
-        {
-            dateETClicked();
-        }
-    }
-
-    private void dateETClicked()
-    {
-        Date date=null;
-
-        if(dateET.getText().toString().length()>0)
-        {
-            try
-            {
-                date=new SimpleDateFormat(dateFormat, java.util.Locale.ENGLISH).parse(dateET.getText().toString());
-            }
-            catch (ParseException e)
-            {
-                e.printStackTrace();
-            }
-        }
-        if(date==null)
-        {
-            date=new Date();
-        }
-
-        Calendar calendar=new GregorianCalendar();
-        calendar.setTime(date);
-        datePickerDialog=new DatePickerDialog(this,this,calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH));
-        //datePickerDialog=createDialogWithoutDateField(this,calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH));
-        datePickerDialog.show();
-    }
-
-    @Override
-    public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth)
-    {
-        String dateString=String.valueOf(dayOfMonth)+"/"+String.valueOf(monthOfYear+1)+"/"+String.valueOf(year);
-        dateET.setText(dateString);
-        if(!validateDate()){
-            dateET.setText("");
-        }
-    }
-
-    private class CowIdentifierThread extends AsyncTask<String,Integer,Farmer> {
-
-        private ProgressDialog progressDialog;
-
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-            progressDialog = ProgressDialog.show(AddEventActivity.this, "",loadingPleaseWait, true);
-        }
-
-        @Override
-        protected Farmer doInBackground(String... params) {
-            Farmer farmer = DataHandler.getFarmerData(AddEventActivity.this);
-            eventConstraints = DataHandler.getEventConstraints(AddEventActivity.this);
-            return farmer;
-        }
-
-        @Override
-        protected void onPostExecute(Farmer farmer) {
-            super.onPostExecute(farmer);
-            progressDialog.dismiss();
-
-            if(farmer == null){
-                Toast.makeText(AddEventActivity.this, Locale.getStringInLocale("unable_to_fetch_cached_data", AddEventActivity.this),Toast.LENGTH_LONG).show();
-            }
-            else{
-                AddEventActivity.this.farmer = farmer;
-                List<Cow> cows = farmer.getCows();
-                String[] cowArray=new String[cows.size()];
-                String[] earTagArray=new String[cows.size()];
-                String[] sexArray=new String[cows.size()];
-
-                for(int i=0;i<cows.size();i++) {
-                    cowArray[i]=cows.get(i).getName();
-                    earTagArray[i]=cows.get(i).getEarTagNumber();
-                    sexArray[i]=cows.get(i).getSex();
-                }
-
-                if(cowArray.length==0) {
-                    Toast.makeText(AddEventActivity.this, Locale.getStringInLocale("you_do_not_have_cows", AddEventActivity.this),Toast.LENGTH_LONG).show();
-                }
-                AddEventActivity.this.cowNameArray =cowArray;
-                AddEventActivity.this.cowEarTagNumberArray=earTagArray;
-                AddEventActivity.this.cowSexArray = sexArray;
-                String[] identifierArray=new String[cowArray.length];
-                for (int i=0;i<cowArray.length;i++)
-                {
-                    if(cowArray[i]!=null&&!cowArray[i].equals(""))
-                    {
-                        identifierArray[i]=cowArray[i];
-                    }
-                    else
-                    {
-                        identifierArray[i]=earTagArray[i];
-                    }
-                }
-                setCowIdentifiers(identifierArray);
-            }
-        }
-    }
-
-    private void fetchServicingEvents() {
-        TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
-        CowEventHistoryThread cowEventHistoryThread =new CowEventHistoryThread();
-        cowEventHistoryThread.execute(telephonyManager.getSimSerialNumber());
-    }
-
-    private class CowEventHistoryThread extends AsyncTask<String, Integer, Farmer> {
-
-        ProgressDialog progressDialog;
-
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-            progressDialog = ProgressDialog.show(AddEventActivity.this, "",Locale.getStringInLocale("loading_please_wait",AddEventActivity.this), true);
-        }
-
-        @Override
-        protected Farmer doInBackground(String... params) {
-            /*String result = null;
-            JSONObject jsonObject = new JSONObject();
-            try {
-                jsonObject.put("simCardSN",params[0]);
-                result = DataHandler.sendDataToServer(AddEventActivity.this, jsonObject.toString(),DataHandler.FARMER_FETCH_COW_SERVICING_EVENTS_URL, true);
-            }
-            catch (JSONException e) {
-                e.printStackTrace();
-            }*/
-
-            Farmer farmer = DataHandler.getFarmerData(AddEventActivity.this);
-            return farmer;
-        }
-
-        @Override
-        protected void onPostExecute(Farmer farmer) {
-            super.onPostExecute(farmer);
-            progressDialog.dismiss();
-            if(farmer == null) {
-                Toast.makeText(AddEventActivity.this, Locale.getStringInLocale("unable_to_fetch_cached_data",AddEventActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else {
-                /*try {
-                    JSONObject jsonObject = new JSONObject(result);
-                    JSONArray historyArray = jsonObject.getJSONArray("history");
-                    List<String> servicingNames = new ArrayList<String>();
-                    servicingIDs = new ArrayList<Integer>();
-                    servicingTypes = new ArrayList<String>();
-                    for(int i = 0; i < historyArray.length(); i++) {
-                        JSONObject currentServicing = historyArray.getJSONObject(i);
-                        servicingIDs.add(currentServicing.getInt("id"));
-                        servicingNames.add(currentServicing.getString("event_date")+" ("+currentServicing.getString("ear_tag_number")+")");
-                        servicingTypes.add(currentServicing.getString("event_name"));
-                    }
-                    ArrayAdapter<String> servicingsArrayAdapter=new ArrayAdapter<String>(AddEventActivity.this,android.R.layout.simple_spinner_dropdown_item,servicingNames);
-                    servicingsArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-                    servicingS.setAdapter(servicingsArrayAdapter);
-
-                }
-                catch (JSONException e) {
-                    e.printStackTrace();
-                }*/
-
-                List<Cow> allCows = farmer.getCows();
-                List<String> servicingNames = new ArrayList<String>();
-                servicingIDs = new ArrayList<Integer>();
-                servicingTypes = new ArrayList<String>();
-                for(int cowIndex = 0; cowIndex < allCows.size(); cowIndex++){
-                    //get all the events associated with this cow
-                    Cow currentCow = allCows.get(cowIndex);
-                    List<Event> cowEvents = currentCow.getEvents();
-                    for(int eventIndex = 0; eventIndex < cowEvents.size(); eventIndex++){
-                        Event currentEvent = cowEvents.get(eventIndex);
-                        if(currentEvent.isServicingEvent()){
-                            servicingIDs.add(currentEvent.getId());
-                            servicingTypes.add(currentEvent.getType());
-                            String name = currentCow.getEarTagNumber();
-                            if(name == null || name.length() == 0){
-                                name = currentCow.getName();
-                            }
-                            servicingNames.add(currentEvent.getEventDate()+" (" + name + ")");
-                        }
-                    }
-                }
-
-                ArrayAdapter<String> servicingsArrayAdapter=new ArrayAdapter<String>(AddEventActivity.this,android.R.layout.simple_spinner_dropdown_item,servicingNames);
-                servicingsArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-                servicingS.setAdapter(servicingsArrayAdapter);
-            }
-        }
-    }
-    
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddMilkProductionActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddMilkProductionActivity.java
deleted file mode 100644
index ac102f7..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddMilkProductionActivity.java
+++ /dev/null
@@ -1,619 +0,0 @@
-package org.cgiar.ilri.mistro.farmer;
-
-import android.app.AlertDialog;
-import android.app.DatePickerDialog;
-import android.app.Dialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.os.AsyncTask;
-import android.os.Bundle;
-import android.app.Activity;
-import android.telephony.TelephonyManager;
-import android.util.Log;
-import com.actionbarsherlock.view.Menu;
-import android.view.View;
-import android.view.inputmethod.InputMethodManager;
-import android.widget.ArrayAdapter;
-import android.widget.Button;
-import android.widget.DatePicker;
-import android.widget.EditText;
-import android.widget.Spinner;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import com.actionbarsherlock.app.SherlockActivity;
-import com.actionbarsherlock.view.MenuInflater;
-import com.actionbarsherlock.view.MenuItem;
-
-import org.cgiar.ilri.mistro.farmer.backend.DataHandler;
-import org.cgiar.ilri.mistro.farmer.backend.Locale;
-import org.cgiar.ilri.mistro.farmer.carrier.Cow;
-import org.cgiar.ilri.mistro.farmer.carrier.EventConstraint;
-import org.cgiar.ilri.mistro.farmer.carrier.Farmer;
-import org.cgiar.ilri.mistro.farmer.carrier.MilkProduction;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.GregorianCalendar;
-import java.util.List;
-
-public class AddMilkProductionActivity extends SherlockActivity implements MistroActivity , View.OnClickListener, DatePickerDialog.OnDateSetListener {
-
-    private final String dateFormat="dd/MM/yyyy";
-    private static final String TAG="AddMilkProductionActivity";
-
-    private boolean cacheData;
-
-    private TextView cowTV;
-    private Spinner cowS;
-    private TextView dateTV;
-    private EditText dateET;
-    private TextView timeTV;
-    private Spinner timeS;
-    private TextView quantityTV;
-    private EditText quantityET;
-    private TextView quantityTypeTV;
-    private Spinner quantityTypeS;
-    private Button addMilkProductionAddB;
-    private Button cancelB;
-    /*private TextView noMilkingTV;
-    private EditText noMilkingET;
-    private TextView calfSucklingTV;
-    private Spinner calfSucklingS;*/
-    private DatePickerDialog datePickerDialog;
-    private Menu menu;
-
-    private Farmer farmer;
-    private String[] cowNameArray;
-    private String[] cowEarTagNumberArray;
-    private String[] quantityTypes;
-    private String[] calfSucklingTypes;
-    private List<EventConstraint> eventConstraints;
-    private boolean milkQuantityFine;
-    private boolean milkFluctuation;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_add_milk_production);
-        //DataHandler.requestPermissionToUseSMS(this);
-
-        cacheData = true;
-        milkQuantityFine = false;
-        milkFluctuation = false;
-
-        cowTV=(TextView)this.findViewById(R.id.cow_tv);
-        cowS=(Spinner)this.findViewById(R.id.cow_s);
-        dateTV=(TextView)this.findViewById(R.id.date_tv);
-        dateET=(EditText)this.findViewById(R.id.date_et);
-
-        InputMethodManager inputMethodManager = (InputMethodManager) this.getSystemService(Context.INPUT_METHOD_SERVICE);
-        inputMethodManager.hideSoftInputFromWindow(dateET.getWindowToken(), 0);
-
-        dateET.setOnClickListener(this);
-        timeTV=(TextView)this.findViewById(R.id.time_tv);
-        timeS=(Spinner)this.findViewById(R.id.time_s);
-        quantityTV=(TextView)this.findViewById(R.id.quantity_tv);
-        quantityET=(EditText)this.findViewById(R.id.quantity_et);
-        quantityTypeTV=(TextView)this.findViewById(R.id.quantity_type_tv);
-        quantityTypeS=(Spinner)this.findViewById(R.id.quantity_type_s);
-        addMilkProductionAddB=(Button)this.findViewById(R.id.dialog_add_milk_add_b);
-        /*noMilkingTV = (TextView)this.findViewById(R.id.no_milking_tv);
-        noMilkingET = (EditText)this.findViewById(R.id.no_milking_et);
-        calfSucklingTV = (TextView)this.findViewById(R.id.calf_suckling_tv);
-        calfSucklingS = (Spinner)this.findViewById(R.id.calf_suckling_s);*/
-        addMilkProductionAddB.setOnClickListener(this);
-        cancelB = (Button)this.findViewById(R.id.cancel_b);
-        cancelB.setOnClickListener(this);
-
-        initTextInViews();
-        fetchCowIdentifiers();
-    }
-
-    private void cacheEditTextData(){
-        if(cacheData){
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AMPA_DATE, dateET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AMPA_QUANTITY, quantityET.getText().toString());
-        }
-    }
-
-    private void restoreEditTextData(){
-        dateET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_AMPA_DATE, ""));
-        quantityET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_AMPA_QUANTITY, ""));
-    }
-
-    private void clearEditTextDataCache(){
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AMPA_DATE, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AMPA_QUANTITY, "");
-
-        cacheData = false;
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-
-        cacheEditTextData();
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-
-        restoreEditTextData();
-    }
-
-    public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu) {
-        MenuInflater inflater = getSupportMenuInflater();
-        inflater.inflate(R.menu.milk_production, menu);
-        this.menu = menu;
-        initMenuText();
-        return true;
-    }
-
-    public boolean onOptionsItemSelected(MenuItem item) {
-        // Handle item selection
-        if(Language.processLanguageMenuItemSelected(this, this, item)){
-            return true;
-        }
-        else if(item.getItemId() == R.id.action_back_main_menu) {
-            DialogInterface.OnClickListener onClickListener = new DialogInterface.OnClickListener() {
-                @Override
-                public void onClick(DialogInterface dialog, int which) {
-                    if(which==DialogInterface.BUTTON_POSITIVE){
-                        dialog.dismiss();
-
-                        clearEditTextDataCache();
-
-                        Intent intent = new Intent(AddMilkProductionActivity.this, MainMenu.class);
-                        intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_FARMER);
-                        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-                        startActivity(intent);
-                    }
-                    else{
-                        dialog.cancel();
-                    }
-                }
-            };
-            AlertDialog mainMenuDialog = Utils.createMainMenuDialog(this, onClickListener);
-            mainMenuDialog.show();
-        }
-        return false;
-    }
-
-    @Override
-    public void initTextInViews() {
-        this.setTitle(Locale.getStringInLocale("add_production",this));
-
-        cowTV.setText(Locale.getStringInLocale("cow",this));
-        dateTV.setText(Locale.getStringInLocale("date",this));
-        timeTV.setText(Locale.getStringInLocale("time",this));
-        quantityTV.setText(Locale.getStringInLocale("quantity",this));
-        addMilkProductionAddB.setText(Locale.getStringInLocale("add",this));
-        int milkingTimesArrayID = Locale.getArrayIDInLocale("milking_times",this);
-        if(milkingTimesArrayID != 0) {
-            ArrayAdapter<CharSequence> milkingTimesArrayAdapter=ArrayAdapter.createFromResource(this, milkingTimesArrayID, android.R.layout.simple_spinner_item);
-            milkingTimesArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-            timeS.setAdapter(milkingTimesArrayAdapter);
-        }
-
-        quantityTypeTV.setText(Locale.getStringInLocale("measurement_type",this));
-
-        quantityTypes = Locale.getArrayInLocale("quantity_types",this);
-        int defaultQuantityTypeIndex = 0;
-        if(quantityTypes == null ) {
-            quantityTypes = new String[1];
-            quantityTypes[0] = "";
-        }
-        else {
-            defaultQuantityTypeIndex = Integer.parseInt(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_MILK_QUANTITY_TYPE,"0"));
-        }
-        ArrayAdapter<String> quantityTypesArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,quantityTypes);
-        quantityTypesArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        quantityTypeS.setAdapter(quantityTypesArrayAdapter);
-        if(defaultQuantityTypeIndex < quantityTypes.length)
-            quantityTypeS.setSelection(defaultQuantityTypeIndex);
-
-        cancelB.setText(Locale.getStringInLocale("cancel", this));
-
-        //noMilkingTV.setText(Locale.getStringInLocale("no_times_milked_in_a_day",this));
-        //calfSucklingTV.setText(Locale.getStringInLocale("calf_suckling",this));
-
-        /*calfSucklingTypes = Locale.getArrayInLocale("calf_suckling_types",this);
-        ArrayAdapter<String> calfSucklingTypesArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,calfSucklingTypes);
-        calfSucklingTypesArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        calfSucklingS.setAdapter(calfSucklingTypesArrayAdapter);*/
-
-        initMenuText();
-    }
-
-    private void initMenuText(){
-        if(this.menu != null){
-            MenuItem mainMenuMI = menu.findItem(R.id.action_back_main_menu);
-            mainMenuMI.setTitle(Locale.getStringInLocale("back_to_main_menu", this));
-        }
-    }
-
-    @Override
-    public void onClick(View view) {
-        if(view==addMilkProductionAddB) {
-            sendMilkProductionData();
-        }
-        else if(view==dateET) {
-            dateETClicked();
-        }
-        else if(view == cancelB){
-
-            clearEditTextDataCache();
-
-            Intent intent = new Intent(this, MilkProductionActivity.class);
-            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-            startActivity(intent);
-        }
-    }
-
-    private void dateETClicked() {
-        Date date=new Date();
-        Calendar calendar=new GregorianCalendar();
-        calendar.setTime(date);
-        datePickerDialog=new DatePickerDialog(this,this,calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH));
-        //datePickerDialog=createDialogWithoutDateField(this,calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH));
-        datePickerDialog.show();
-    }
-
-    @Override
-    public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
-        String dateString=String.valueOf(dayOfMonth)+"/"+String.valueOf(monthOfYear+1)+"/"+String.valueOf(year);
-        dateET.setText(dateString);
-        if(!validateDate()) {
-            dateET.setText("");
-        }
-    }
-
-    private void sendMilkProductionData()
-    {
-        if(validateInput())
-        {
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AMPA_DATE, "");
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AMPA_QUANTITY, "");
-
-            TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
-            MilkProductionDataAdditionThread milkProductionDataAdditionThread=new MilkProductionDataAdditionThread();
-            String[] quantityTypesInEN = Locale.getArrayInLocale("quantity_types",this,Locale.LOCALE_ENGLISH);
-            String[] milkingTimesInEN = Locale.getArrayInLocale("milking_times", this, Locale.LOCALE_ENGLISH);
-            String quantityType = "";
-            if(quantityTypesInEN.length == quantityTypes.length) {
-                DataHandler.setSharedPreference(AddMilkProductionActivity.this, DataHandler.SP_KEY_MILK_QUANTITY_TYPE, String.valueOf(quantityTypeS.getSelectedItemPosition()));
-                quantityType = quantityTypesInEN[quantityTypeS.getSelectedItemPosition()];
-            }
-            String milkingTime = "";
-            if(milkingTimesInEN.length > 0){
-                milkingTime = milkingTimesInEN[timeS.getSelectedItemPosition()];
-            }
-
-            /*String[] calfSucklingTypesInEN = Locale.getArrayInLocale("calf_suckling_types",this,Locale.LOCALE_ENGLISH);
-            String calfSucklingType = calfSucklingTypesInEN[calfSucklingS.getSelectedItemPosition()];*/
-            //milkProductionDataAdditionThread.execute(telephonyManager.getSimSerialNumber(),cowNameArray[cowS.getSelectedItemPosition()],cowEarTagNumberArray[cowS.getSelectedItemPosition()],milkingTime,quantityET.getText().toString(),quantityType,dateET.getText().toString(),noMilkingET.getText().toString(),calfSucklingType);
-            milkProductionDataAdditionThread.execute(telephonyManager.getSimSerialNumber(),cowNameArray[cowS.getSelectedItemPosition()],cowEarTagNumberArray[cowS.getSelectedItemPosition()],milkingTime,quantityET.getText().toString(),quantityType,dateET.getText().toString(), Boolean.toString(milkFluctuation));
-        }
-    }
-
-    private boolean validateInput()
-    {
-        String[] quantityTypesInEN = Locale.getArrayInLocale("quantity_types",this,Locale.LOCALE_ENGLISH);
-        String quantityType = quantityTypesInEN[quantityTypeS.getSelectedItemPosition()];
-        if(cowS.getSelectedItemPosition() == -1 || cowNameArray == null || cowNameArray.length == 0 || cowEarTagNumberArray.length == 0){
-            Toast.makeText(this, Locale.getStringInLocale("you_do_not_have_female_cows", this), Toast.LENGTH_LONG).show();
-            return false;
-        }
-        if(quantityET.getText().toString()==null) {
-            Toast.makeText(this, Locale.getStringInLocale("enter_quantity_of_milk_produced",this), Toast.LENGTH_LONG).show();
-            return false;
-        }
-        else if(quantityET.getText().toString().length()<=0) {
-            Toast.makeText(this, Locale.getStringInLocale("enter_quantity_of_milk_produced",this), Toast.LENGTH_LONG).show();
-            return false;
-        }
-        else if(dateET.getText().toString()==null||dateET.getText().toString().length()==0) {
-            Toast.makeText(this,Locale.getStringInLocale("enter_date",this),Toast.LENGTH_LONG).show();
-            return false;
-        }
-        else if(!validateDate()) {
-            return false;
-        }
-        else if(quantityType.equals("Litres") || quantityType.equals("KGs")) {
-            String[] milkingTimesInEN = Locale.getArrayInLocale("milking_times", this, Locale.LOCALE_ENGLISH);
-            if(milkingTimesInEN[timeS.getSelectedItemPosition()].equals("Combined")){
-                for(int i = 0; i < eventConstraints.size(); i++){
-                    EventConstraint currConstraint = eventConstraints.get(i);
-                    if(currConstraint.getEvent().equals(EventConstraint.CONSTRAINT_MILK_MAX_COMBINED)){
-                        if(Integer.parseInt(quantityET.getText().toString()) > currConstraint.getValue()){
-                            Toast.makeText(this, Locale.getStringInLocale("milk_too_much",this),Toast.LENGTH_LONG).show();
-                            return false;
-                        }
-                    }
-                }
-            }
-            else{
-                for(int i = 0; i < eventConstraints.size(); i++){
-                    EventConstraint currConstraint = eventConstraints.get(i);
-                    if(currConstraint.getEvent().equals(EventConstraint.CONSTRAINT_MILK_MAX_SITTING)){
-                        if(Float.parseFloat(quantityET.getText().toString()) > currConstraint.getValue()){
-                            Toast.makeText(this, Locale.getStringInLocale("milk_too_much",this),Toast.LENGTH_LONG).show();
-                            return false;
-                        }
-                    }
-                }
-            }
-
-            /*if(Integer.parseInt(quantityET.getText().toString()) > 30) {
-                Toast.makeText(this, Locale.getStringInLocale("milk_too_much",this),Toast.LENGTH_LONG).show();
-                return false;
-            }*/
-        }
-        /*else if(quantityType.equals("Cups")) {
-            if(Integer.parseInt(quantityET.getText().toString()) > (30*3.3)) {
-                Toast.makeText(this, Locale.getStringInLocale("milk_too_much",this),Toast.LENGTH_LONG).show();
-                return false;
-            }
-        }*/
-
-        if(cowS.getSelectedItemPosition() != -1){
-            Cow selectedCow = farmer.getCows(Cow.SEX_FEMALE).get(cowS.getSelectedItemPosition());
-            if(selectedCow != null){
-
-                for(int i = 0; i < eventConstraints.size(); i++) {
-                    EventConstraint currConstraint = eventConstraints.get(i);
-                    //enforce age constraint
-                    if (currConstraint.getEvent().equals(EventConstraint.CONSTRAINT_MILKING)) {
-                        if (selectedCow.getAgeMilliseconds() < currConstraint.getTimeMilliseconds()) {
-                            Toast.makeText(this, Locale.getStringInLocale("cow_too_young", this), Toast.LENGTH_LONG).show();
-                            return false;
-                        }
-                    }
-                }
-
-                for(int i = 0; i < eventConstraints.size(); i++){
-                    EventConstraint currConstraint = eventConstraints.get(i);
-                    if(currConstraint.getEvent().equals(EventConstraint.CONSTRAINT_MILK_FLACTUATION) && !milkQuantityFine){
-                        //TODO: convert units to whatever farmer uses to measure milk e.g cups
-                        int threshold = currConstraint.getValue();
-                        String thresholdUnits = currConstraint.getUnits();
-
-                        String[] milkingTimesInEN = Locale.getArrayInLocale("milking_times", this, Locale.LOCALE_ENGLISH);
-                        MilkProduction lastMP = selectedCow.getLastMilking(milkingTimesInEN[timeS.getSelectedItemPosition()]);
-                        if(lastMP.getDate().length()>0){//date set. means this object is not an empty object
-                            try {
-                                long lastMilking = lastMP.getDateMilliseconds();
-                                Date currMilkingDate = new SimpleDateFormat(dateFormat, java.util.Locale.ENGLISH).parse(dateET.getText().toString());
-                                long currMilking = currMilkingDate.getTime();
-
-                                int dayDiff = (int)Math.abs((currMilking - lastMilking)/86400000);
-                                float yieldDiff = Math.abs(Float.parseFloat(quantityET.getText().toString()) - lastMP.getQuantity());
-
-                                if(dayDiff != 0) {
-                                    float diff = yieldDiff / dayDiff;//spread the difference in yield among the days passed
-
-                                    if(diff  > threshold){
-                                        DialogInterface.OnClickListener onClickListener = new DialogInterface.OnClickListener() {
-                                            @Override
-                                            public void onClick(DialogInterface dialog, int which) {
-                                                if(which==DialogInterface.BUTTON_POSITIVE){
-                                                    dialog.dismiss();
-                                                    milkQuantityFine = true;
-                                                    milkFluctuation = true;
-                                                    Toast.makeText(AddMilkProductionActivity.this, Locale.getStringInLocale("press_add_again", AddMilkProductionActivity.this), Toast.LENGTH_LONG).show();
-                                                }
-                                                else{
-                                                    dialog.cancel();
-                                                    milkFluctuation = false;
-                                                    milkQuantityFine = false;
-                                                }
-                                            }
-                                        };
-                                        AlertDialog milkFluctuationDialog = Utils.createMilkFluctuationDialog(this, onClickListener);
-                                        milkFluctuationDialog.show();
-                                        return false;
-                                    }
-                                }
-                            }
-                            catch (Exception e){
-                                e.printStackTrace();
-                            }
-                        }
-                        milkQuantityFine = true;
-                    }
-                    //check for drastic flactuation in milk production
-                }
-            }
-        }
-
-       /* if(noMilkingET.getText().toString()==null || noMilkingET.getText().toString().trim().length()==0) {
-            Toast.makeText(this, Locale.getStringInLocale("enter_number_times_cow_milked",this),Toast.LENGTH_LONG).show();
-            return false;
-        }
-        else if(Integer.parseInt(noMilkingET.getText().toString())>10) {
-            Toast.makeText(this, Locale.getStringInLocale("milking_times_too_much",this), Toast.LENGTH_LONG).show();
-            return false;
-        }*/
-        return true;
-    }
-
-    private boolean validateDate() {
-        try {
-            Date dateEntered=new SimpleDateFormat(dateFormat, java.util.Locale.ENGLISH).parse(dateET.getText().toString());
-            Date today=new Date();
-            long milisecondDifference = today.getTime() - dateEntered.getTime();
-            long days = milisecondDifference / 86400000;
-            if((today.getTime()-dateEntered.getTime())<0) {
-                Toast.makeText(this,Locale.getStringInLocale("date_in_future",this),Toast.LENGTH_LONG).show();
-                return false;
-            }
-            else if(days > 15) {//more than 15 days
-                Toast.makeText(this,Locale.getStringInLocale("milk_data_too_old",this),Toast.LENGTH_LONG).show();
-                return false;
-            }
-            else {
-                return true;
-            }
-        }
-        catch (ParseException e) {
-            e.printStackTrace();
-            return false;
-        }
-    }
-
-    private void fetchCowIdentifiers() {
-        CowIdentifierThread cowIdentifierThread=new CowIdentifierThread();
-        TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
-        cowIdentifierThread.execute(telephonyManager.getSimSerialNumber());
-    }
-
-    private void setCowIdentifiers(String[] cowArray) {
-        if(cowS!=null)
-        {
-            ArrayAdapter<String> cowsArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_dropdown_item,cowArray);
-            cowsArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-            cowS.setAdapter(cowsArrayAdapter);
-        }
-    }
-
-    private class MilkProductionDataAdditionThread extends AsyncTask<String, Integer, Boolean>
-    {
-        private ProgressDialog progressDialog;
-
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-            progressDialog = ProgressDialog.show(AddMilkProductionActivity.this, "",Locale.getStringInLocale("loading_please_wait",AddMilkProductionActivity.this), true);
-        }
-
-        @Override
-        protected Boolean doInBackground(String... params) {
-            Log.d(TAG, "at milkProductionDataAdditionThread");
-            JSONObject jsonObject=new JSONObject();
-            try
-            {
-                jsonObject.put("simCardSN",params[0]);
-                jsonObject.put("cowName",params[1]);
-                jsonObject.put("cowEarTagNumber",params[2]);
-                jsonObject.put("time",params[3]);
-                jsonObject.put("quantity",params[4]);
-                jsonObject.put("quantityType",params[5]);
-                jsonObject.put("date", params[6]);
-                jsonObject.put("fluctuation", params[7]);
-                /*jsonObject.put("noMilkingTimes",params[7]);
-                jsonObject.put("calfSuckling",params[8]);*/
-                //String result=DataHandler.sendDataToServer(AddMilkProductionActivity.this, jsonObject.toString(),DataHandler.FARMER_ADD_MILK_PRODUCTION_URL, true);
-                boolean result=DataHandler.cacheRequest(AddMilkProductionActivity.this, jsonObject.toString(),DataHandler.FARMER_ADD_MILK_PRODUCTION_URL);
-                Log.d(TAG,"data sent to server, result = "+result);
-                return result;
-            }
-            catch (JSONException e)
-            {
-                e.printStackTrace();
-            }
-            return null;
-        }
-
-        @Override
-        protected void onPostExecute(Boolean result)
-        {
-            super.onPostExecute(result);
-            progressDialog.dismiss();
-            if(result==null || result == false) {
-                Toast.makeText(AddMilkProductionActivity.this, Locale.getStringInLocale("something_went_wrong_try_again", AddMilkProductionActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result == true) {
-                Toast.makeText(AddMilkProductionActivity.this,Locale.getStringInLocale("event_successfully_recorded", AddMilkProductionActivity.this), Toast.LENGTH_LONG).show();
-
-                clearEditTextDataCache();
-
-                Intent intent = new Intent(AddMilkProductionActivity.this, MilkProductionActivity.class);
-                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-                startActivity(intent);
-            }
-            /*else if(result.equals(DataHandler.DATA_ERROR)) {
-                Toast.makeText(AddMilkProductionActivity.this, Locale.getStringInLocale("production_for_time_already_exists", AddMilkProductionActivity.this), Toast.LENGTH_LONG).show();
-            }*/
-        }
-    }
-
-    private class CowIdentifierThread extends AsyncTask<String,Integer,Farmer>
-    {
-        private ProgressDialog progressDialog;
-
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-            progressDialog = ProgressDialog.show(AddMilkProductionActivity.this, "",Locale.getStringInLocale("loading_please_wait", AddMilkProductionActivity.this), true);
-        }
-
-        @Override
-        protected Farmer doInBackground(String... params)
-        {
-            Farmer farmer = DataHandler.getFarmerData(AddMilkProductionActivity.this);
-            eventConstraints = DataHandler.getEventConstraints(AddMilkProductionActivity.this);
-            return farmer;
-        }
-
-        @Override
-        protected void onPostExecute(Farmer farmer)
-        {
-            super.onPostExecute(farmer);
-            progressDialog.dismiss();
-            if(farmer == null ){
-                Toast.makeText(AddMilkProductionActivity.this, Locale.getStringInLocale("unable_to_fetch_cached_data", AddMilkProductionActivity.this),Toast.LENGTH_LONG).show();
-            }
-            else{
-                AddMilkProductionActivity.this.farmer = farmer;
-
-                //get cow names and ear tag numbers
-                List<Cow> allCows = farmer.getCows(Cow.SEX_FEMALE);
-                List<Cow> cows = new ArrayList<Cow>();
-                for(int i = 0; i < allCows.size(); i++){
-                    Cow currCow = allCows.get(i);
-                    if(currCow.getMilkingStatusCode().equals(Cow.MILKING_S_ADULT_MILKING)){
-                        cows.add(currCow);
-                    }
-                }
-
-                String[] cowArray=new String[cows.size()];
-                String[] earTagArray=new String[cows.size()];
-                for(int i=0;i<cows.size();i++) {
-                    cowArray[i]=cows.get(i).getName();
-                    earTagArray[i]=cows.get(i).getEarTagNumber();
-                }
-
-                if(cowArray.length==0) {
-                    Toast.makeText(AddMilkProductionActivity.this, Locale.getStringInLocale("you_do_not_have_female_cows", AddMilkProductionActivity.this),Toast.LENGTH_LONG).show();
-                }
-
-                AddMilkProductionActivity.this.cowNameArray =cowArray;
-                AddMilkProductionActivity.this.cowEarTagNumberArray=earTagArray;
-                String[] identifierArray=new String[cowArray.length];
-                for (int i=0;i<cowArray.length;i++)
-                {
-                    if(cowArray[i]!=null&&!cowArray[i].equals(""))
-                    {
-                        identifierArray[i]=cowArray[i];
-                    }
-                    else
-                    {
-                        identifierArray[i]=earTagArray[i];
-                    }
-                }
-                setCowIdentifiers(identifierArray);
-            }
-
-        }
-    }
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/CowRegistrationActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/CowRegistrationActivity.java
deleted file mode 100644
index 9dc89cf..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/CowRegistrationActivity.java
+++ /dev/null
@@ -1,1535 +0,0 @@
-package org.cgiar.ilri.mistro.farmer;
-
-import android.app.DatePickerDialog;
-import android.app.Dialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.Intent;
-import android.location.Criteria;
-import android.location.Location;
-import android.location.LocationListener;
-import android.location.LocationManager;
-import android.nfc.Tag;
-import android.os.AsyncTask;
-import android.os.Bundle;
-import android.telephony.TelephonyManager;
-import android.util.Log;
-import android.util.SparseBooleanArray;
-import android.view.KeyEvent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.ArrayAdapter;
-import android.widget.AutoCompleteTextView;
-import android.widget.Button;
-import android.widget.CheckBox;
-import android.widget.CompoundButton;
-import android.widget.DatePicker;
-import android.widget.EditText;
-import android.widget.ListView;
-import android.widget.ScrollView;
-import android.widget.Spinner;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import com.actionbarsherlock.app.SherlockActivity;
-import com.actionbarsherlock.view.Menu;
-import com.actionbarsherlock.view.MenuInflater;
-import com.actionbarsherlock.view.MenuItem;
-
-import org.cgiar.ilri.mistro.farmer.backend.DataHandler;
-import org.cgiar.ilri.mistro.farmer.backend.Locale;
-import org.cgiar.ilri.mistro.farmer.carrier.Cow;
-import org.cgiar.ilri.mistro.farmer.carrier.Dam;
-import org.cgiar.ilri.mistro.farmer.carrier.Farmer;
-import org.cgiar.ilri.mistro.farmer.carrier.Sire;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.GregorianCalendar;
-import java.util.List;
-
-public class CowRegistrationActivity extends SherlockActivity implements MistroActivity,
-        View.OnClickListener, DatePickerDialog.OnDateSetListener, ListView.OnItemClickListener,
-        Spinner.OnItemSelectedListener, View.OnFocusChangeListener, LocationListener, CheckBox.OnCheckedChangeListener, View.OnLongClickListener
-{
-    private boolean cacheData;
-
-    public static final String TAG="CowRegistrationActivity";
-    public static final String KEY_INDEX="index";
-    public static final String KEY_NUMBER_OF_COWS="numberOfCows";
-    private final String dateFormat="dd/MM/yyyy";
-    private TextView nameETNHintTV;
-    private TextView nameTV;
-    private EditText nameET;
-    private TextView earTagNumberTV;
-    private EditText earTagNumberET;
-    private TextView ageOrDOBHintTV;
-    private TextView ageTV;
-    private Spinner ageS;
-    private EditText ageET;
-    private TextView dateOfBirthTV;
-    private EditText dateOfBirthET;
-    private TextView breedTV;
-    private EditText breedET;
-    private TextView anotherBreedTV;
-    private AutoCompleteTextView breedACTV;
-    private TextView sexTV;
-    private Spinner sexS;
-    private TextView milkingStatusTV;
-    private Spinner milkingStatusS;
-    private TextView inCalfStatusTV;
-    private Spinner inCalfStatusS;
-    private TextView deformityTV;
-    private EditText deformityET;
-    private TextView serviceTypeTV;
-    private Spinner serviceTypeS;
-    private TextView sireTV;
-    private Spinner sireS;
-    private AutoCompleteTextView sireACTV;
-    private TextView sireOwnerTV;
-    private Spinner sireOwnerS;
-    private TextView sireOwnerNameTV;
-    private EditText sireOwnerNameET;
-    private TextView strawNumberTV;
-    private EditText strawNumberET;
-    private TextView damTV;
-    private Spinner damS;
-    private AutoCompleteTextView damACTV;
-    private TextView embryoNumberTV;
-    private EditText embryoNumberET;
-    private TextView countryOfOriginTV;
-    private AutoCompleteTextView countryOfOriginACTV;
-    private TextView commonCountriesTV;
-    private Spinner commonCountriesS;
-    private Button previousButton;
-    private Button nextButton;
-    private DatePickerDialog datePickerDialog;
-    private Dialog breedDialog;
-    private ScrollView breedDialogSV;
-    private ListView breedLV;
-    private Button dialogBreedOkayB;
-    private Dialog deformityDialog;
-    private ScrollView deformitySV;
-    private ListView deformityLV;
-    private CheckBox noDeformityCB;
-    private EditText specifyET;
-    private Button dialogDeformityOkayB;
-
-    private int index;//index of cow in the list of cows
-    private int numberOfCows;
-    private int selectedBreeds;
-    private String[] breeds;
-    private String[] uncommonBreeds;
-    private String[] deformities;
-    private String deformityOSpecifyText;
-    private Cow thisCow;
-    private Farmer farmer;
-    private List<Cow> validSires;
-    private List<Cow> validDams;
-    private LocationManager locationManager;
-    private int selectedSireOwner;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_cow_registration);
-        //DataHandler.requestPermissionToUseSMS(this);
-
-        cacheData = true;
-
-        Bundle bundle = this.getIntent().getExtras();
-        if(bundle!=null) {
-            index=bundle.getInt(KEY_INDEX);
-            numberOfCows=bundle.getInt(KEY_NUMBER_OF_COWS);
-        }
-        selectedBreeds = 0;
-
-        //init views
-        nameETNHintTV = (TextView) this.findViewById(R.id.name_eta_hint_tv);
-        nameTV=(TextView)this.findViewById(R.id.name_tv);
-        nameET=(EditText)this.findViewById(R.id.name_et);
-        earTagNumberTV=(TextView)this.findViewById(R.id.ear_tag_number_tv);
-        earTagNumberET=(EditText)this.findViewById(R.id.ear_tag_number_et);
-        ageOrDOBHintTV = (TextView) this.findViewById(R.id.age_or_dob_hint_tv);
-        ageTV=(TextView)this.findViewById(R.id.age_tv);
-        ageS=(Spinner)this.findViewById(R.id.age_s);
-        ageET=(EditText)this.findViewById(R.id.age_et);
-        dateOfBirthTV=(TextView)this.findViewById(R.id.date_of_birth_tv);
-        //dateOfBirthTV.setVisibility(TextView.GONE); //date of birth appears not to be necessary
-        dateOfBirthET=(EditText)this.findViewById(R.id.date_of_birth_et);
-        dateOfBirthET.setOnFocusChangeListener(this);
-        dateOfBirthET.setOnClickListener(this);
-        dateOfBirthET.setOnLongClickListener(this);
-        //dateOfBirthET.setVisibility(TextView.GONE); //date of birth appears not to be necessary
-        breedTV=(TextView)this.findViewById(R.id.breed_tv);
-        breedET=(EditText)this.findViewById(R.id.breed_et);
-        breedET.setOnFocusChangeListener(this);
-        breedET.setOnClickListener(this);
-        anotherBreedTV = (TextView)this.findViewById(R.id.another_breed_tv);
-        breedACTV = (AutoCompleteTextView)this.findViewById(R.id.breed_actv);
-        sexTV=(TextView)this.findViewById(R.id.sex_tv);
-        sexS=(Spinner)this.findViewById(R.id.sex_s);
-        sexS.setOnItemSelectedListener(this);
-        milkingStatusTV = (TextView)this.findViewById(R.id.milking_status_tv);
-        milkingStatusS = (Spinner)this.findViewById(R.id.milking_status_s);
-        inCalfStatusTV = (TextView)this.findViewById(R.id.in_calf_status_tv);
-        inCalfStatusS = (Spinner)this.findViewById(R.id.in_calf_status_s);
-        deformityTV=(TextView)this.findViewById(R.id.deformity_tv);
-        deformityET=(EditText)this.findViewById(R.id.deformity_et);
-        deformityET.setOnFocusChangeListener(this);
-        deformityET.setOnClickListener(this);
-        serviceTypeTV = (TextView)this.findViewById(R.id.service_type_tv);
-        serviceTypeS = (Spinner)this.findViewById(R.id.service_type_s);
-        serviceTypeS.setOnItemSelectedListener(this);
-        sireTV = (TextView)this.findViewById(R.id.sire_tv);
-        sireS = (Spinner)this.findViewById(R.id.sire_s);
-        sireACTV = (AutoCompleteTextView)this.findViewById(R.id.sire_actv);
-        sireOwnerTV = (TextView)this.findViewById(R.id.sire_owner_tv);
-        sireOwnerS = (Spinner)this.findViewById(R.id.sire_owner_s);
-        sireOwnerS.setOnItemSelectedListener(this);
-        sireOwnerNameTV = (TextView)this.findViewById(R.id.sire_owner_name_tv);
-        sireOwnerNameET = (EditText)this.findViewById(R.id.sire_owner_name_et);
-        strawNumberTV = (TextView)this.findViewById(R.id.straw_number_tv);
-        strawNumberET = (EditText)this.findViewById(R.id.straw_number_et);
-        damTV = (TextView)this.findViewById(R.id.dam_tv);
-        damS = (Spinner)this.findViewById(R.id.dam_s);
-        damACTV = (AutoCompleteTextView)this.findViewById(R.id.dam_actv);
-        embryoNumberTV = (TextView)this.findViewById(R.id.embryo_number_tv);
-        embryoNumberET = (EditText)this.findViewById(R.id.embryo_number_et);
-        countryOfOriginTV = (TextView)this.findViewById(R.id.country_of_origin_tv);
-        countryOfOriginACTV = (AutoCompleteTextView)this.findViewById(R.id.country_of_origin_actv);
-        commonCountriesTV = (TextView)this.findViewById(R.id.common_countries_tv);
-        commonCountriesS = (Spinner)this.findViewById(R.id.common_countries_s);
-        commonCountriesS.setOnItemSelectedListener(this);
-        previousButton = (Button)this.findViewById(R.id.previous_button);
-        previousButton.setOnClickListener(this);
-        nextButton = (Button)this.findViewById(R.id.next_button);
-        nextButton.setOnClickListener(this);
-        breedDialog=new Dialog(this);
-        breedDialog.setContentView(R.layout.dialog_breed);
-        dialogBreedOkayB=(Button)breedDialog.findViewById(R.id.dialog_breed_okay_b);
-        dialogBreedOkayB.setOnClickListener(this);
-        breedDialogSV=(ScrollView)breedDialog.findViewById(R.id.dialog_breed_sv);
-
-        int activityHeight = this.getResources().getDisplayMetrics().heightPixels;
-        breedDialogSV.getLayoutParams().height = (int)(activityHeight * 0.70);
-
-        breedLV=(ListView)breedDialog.findViewById(R.id.breed_lv);
-        breedLV.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
-        breedLV.setOnItemClickListener(this);
-        deformityDialog =new Dialog(this);
-        deformityDialog.setContentView(R.layout.dialog_deformity);
-        deformitySV = (ScrollView)deformityDialog.findViewById(R.id.deformity_sv);
-
-        deformitySV.getLayoutParams().height = (int)(activityHeight * 0.70);
-
-        deformityLV =(ListView) deformityDialog.findViewById(R.id.deformity_lv);
-        deformityLV.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
-        deformityLV.setOnItemClickListener(this);
-        specifyET=(EditText)deformityDialog.findViewById(R.id.specify_et);
-        noDeformityCB = (CheckBox)deformityDialog.findViewById(R.id.no_deformity_cb);
-        noDeformityCB.setOnCheckedChangeListener(this);
-        dialogDeformityOkayB =(Button) deformityDialog.findViewById(R.id.dialog_deformity_okay_b);
-        dialogDeformityOkayB.setOnClickListener(this);
-
-        initTextInViews();
-    }
-
-
-
-    public boolean onCreateOptionsMenu(Menu menu) {
-        MenuInflater inflater = getSupportMenuInflater();
-        inflater.inflate(R.menu.cow_registration, menu);
-        return true;
-    }
-
-    public boolean onOptionsItemSelected(MenuItem item) {
-        // Handle item selection
-        if(Language.processLanguageMenuItemSelected(this, this, item)){
-            return true;
-        }
-        return false;
-    }
-
-    private void cacheEditTextData(){
-        if(cacheData) {
-            Log.i(TAG, "Edit text data cached");
-            //Incase the activity is hidden partially/fully save the data in edittexts
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_NAME, nameET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_EAR_TAG_NUMBER, earTagNumberET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_AGE, ageET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DATE_OF_BIRTH, dateOfBirthET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_BREED, breedET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_BREED_OTHER, breedACTV.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DEFORMITY, deformityET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_STRAW_NUMBER, strawNumberET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DAM, damACTV.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_SIRE, sireACTV.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_EMBRYO_NUMBER, embryoNumberET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_COUNTRY_OF_ORIGIN, countryOfOriginACTV.getText().toString());
-        }
-        else{
-            Log.i(TAG, "Edit text data NOT cached");
-        }
-    }
-
-    private void restoreEditTextData(){
-        Log.i(TAG, "Edit text data restored");
-        //incase the activity was hidden partially for a moment, restore what the user had already entered
-        nameET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_NAME, ""));
-        earTagNumberET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_EAR_TAG_NUMBER, ""));
-        ageET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_AGE, ""));
-        dateOfBirthET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_DATE_OF_BIRTH, ""));
-        breedET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_BREED, ""));
-        breedACTV.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_BREED_OTHER, ""));
-        deformityET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_DEFORMITY, ""));
-        strawNumberET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_STRAW_NUMBER, ""));
-        damACTV.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_DAM, ""));
-        sireACTV.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_SIRE, ""));
-        embryoNumberET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_EMBRYO_NUMBER, ""));
-        countryOfOriginACTV.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_COUNTRY_OF_ORIGIN, ""));
-    }
-
-    private void clearEditTextDataCache(){
-        Log.i(TAG, "Edit text cache cleared");
-
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_NAME, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_EAR_TAG_NUMBER, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_AGE, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DATE_OF_BIRTH, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_BREED, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_BREED_OTHER, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DEFORMITY, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_STRAW_NUMBER, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DAM, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_SIRE, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_EMBRYO_NUMBER, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_COUNTRY_OF_ORIGIN, "");
-
-        cacheData = false;
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-
-        cacheEditTextData();
-
-        if(locationManager!=null) {
-            locationManager.removeUpdates(this);
-        }
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-
-        Bundle bundle=this.getIntent().getExtras();
-        if(bundle != null) {
-            farmer=bundle.getParcelable(Farmer.PARCELABLE_KEY);
-            if(farmer!=null){
-                if(farmer.getMode().equals(Farmer.MODE_NEW_COW_REGISTRATION)) {
-                    previousButton.setVisibility(Button.INVISIBLE);
-                }
-                thisCow = farmer.getCow(index);
-                if(thisCow != null) {
-                    nameET.setText(thisCow.getName());
-                    earTagNumberET.setText(thisCow.getEarTagNumber());
-                    dateOfBirthET.setText(thisCow.getDateOfBirth());
-                    ageET.setText((thisCow.getAge()==-1) ? "":String.valueOf(thisCow.getAge()));
-                    String[] ageTypesInEN = Locale.getArrayInLocale("age_type_array",this,Locale.LOCALE_ENGLISH);
-                    for(int i = 0; i < ageTypesInEN.length; i++) {
-                        if(ageTypesInEN[i].equals("Days") && thisCow.getAgeType().equals(Cow.AGE_TYPE_DAY)) {
-                            ageS.setSelection(i);
-                        }
-                        else if(ageTypesInEN[i].equals("Months") && thisCow.getAgeType().equals(Cow.AGE_TYPE_MONTH)) {
-                            ageS.setSelection(i);
-                        }
-                        else if(ageTypesInEN[i].equals("Years") && thisCow.getAgeType().equals(Cow.AGE_TYPE_YEAR)) {
-                            ageS.setSelection(i);
-                        }
-                    }
-                    List<String> savedBreeds=thisCow.getBreeds(this);//returns breeds in current locale
-                    Log.d(TAG, "Cow breeds are "+savedBreeds);
-                    String breed="";
-                    for (int i=0;i<savedBreeds.size();i++) {
-                        if(i==0) {
-                            breed=savedBreeds.get(i);
-                        }
-                        else {
-                            breed=breed+", "+savedBreeds.get(i);
-                        }
-                        Log.d(TAG, "current breed index =  "+String.valueOf(i));
-                        Log.d(TAG, "saved breeds length =  "+String.valueOf(savedBreeds.size()));
-                        if(savedBreeds.get(i).equals(breeds[breeds.length-1])){
-                            breedACTV.setText(thisCow.getOtherBreed(this));//returns other breed in current locale
-                            anotherBreedTV.setVisibility(TextView.VISIBLE);
-                            breedACTV.setVisibility(AutoCompleteTextView.VISIBLE);
-                        }
-                    }
-                    breedET.setText(breed);
-                    String[] sexInEN = Locale.getArrayInLocale("sex_array", this, Locale.LOCALE_ENGLISH);
-                    for(int i = 0; i < sexInEN.length; i++) {
-                        if(sexInEN[i].equals("Female") && thisCow.getSex().equals(Cow.SEX_FEMALE)) {
-                            sexS.setSelection(i);
-                            toggleFemaleCowViewsVisibility();
-                            String[] milkingStatusInEN = Locale.getArrayInLocale("cow_status_array", this, Locale.LOCALE_ENGLISH);
-                            String[] inCalfArrayInEN = Locale.getArrayInLocale("cow_in_calf_array", this, Locale.LOCALE_ENGLISH);
-                            for(int j = 0; j < milkingStatusInEN.length; j++){
-                                Log.d(TAG, " ********** Saved milking status = "+thisCow.getMilkingStatus());
-                                if(milkingStatusInEN[j].equals(thisCow.getMilkingStatus())){
-                                    milkingStatusS.setSelection(j);
-                                }
-                            }
-                            for(int j = 0; j < inCalfArrayInEN.length; j++){
-                                if(inCalfArrayInEN[j].equals(Cow.COW_IN_CALF) && thisCow.isInCalf()){
-                                    inCalfStatusS.setSelection(j);
-                                }
-                                else if(inCalfArrayInEN[j].equals(Cow.COW_NOT_IN_CALF) && !thisCow.isInCalf()){
-                                    inCalfStatusS.setSelection(j);
-                                }
-                            }
-
-                        }
-                        else if(sexInEN[i].equals("Male") && thisCow.getSex().equals(Cow.SEX_MALE)) {
-                            sexS.setSelection(i);
-                        }
-                    }
-                    List<String> savedDeformities=thisCow.getDeformities(this);//returns deformities in current locale
-                    String deformity="";
-                    for (int i=0;i<savedDeformities.size();i++) {
-                        if(i==0) {
-                            deformity=savedDeformities.get(i);
-                        }
-                        else {
-                            deformity=deformity+", "+savedDeformities.get(i);
-                        }
-                        if(savedDeformities.get(i).equals(deformities[deformities.length-1])) {
-                            deformityOSpecifyText = thisCow.getOtherDeformity();
-                        }
-                    }
-                    deformityET.setText(deformity);
-
-                    if(farmer.getMode().equals(Farmer.MODE_INITIAL_REGISTRATION)) {
-                        if(farmer.isInFarm()){
-                            getGPSCoordinates();
-                        }
-
-                        List<Cow> allCows = farmer.getCows();
-                        validSires = new ArrayList<Cow>();
-                        validSires.add(new Cow(false));
-                        List<String> validSireNames = new ArrayList<String>();
-                        validSireNames.add("");
-                        int sireSelection = 0;
-
-                        validDams = new ArrayList<Cow>();
-                        validDams.add(new Cow(false));
-                        List<String> validDamNames = new ArrayList<String>();
-                        int damSelection = -1;
-                        validDamNames.add("");
-                        for(int i = 0; i < allCows.size(); i++) {
-                            if(i != index) {
-                                if(allCows.get(i).getEarTagNumber() != null && allCows.get(i).getEarTagNumber().length() > 0 && allCows.get(i).getSex().equals(Cow.SEX_MALE)) {
-                                    validSires.add(allCows.get(i));
-                                    validSireNames.add(allCows.get(i).getEarTagNumber()+" ("+allCows.get(i).getName()+")");
-                                    if(thisCow.getServiceType().equals(Cow.SERVICE_TYPE_BULL)) {
-                                        if(thisCow.getSire().getEarTagNumber().equals(allCows.get(i).getEarTagNumber())) {
-                                            sireSelection = validSires.size() - 1;
-                                        }
-                                    }
-                                }
-                                else if(allCows.get(i).getEarTagNumber() != null && allCows.get(i).getEarTagNumber().length() > 0 && allCows.get(i).getSex().equals(Cow.SEX_FEMALE)) {
-                                    validDams.add(allCows.get(i));
-                                    validDamNames.add(allCows.get(i).getEarTagNumber()+" ("+allCows.get(i).getName()+")");
-                                    if(thisCow.getServiceType().equals(Cow.SERVICE_TYPE_BULL) || thisCow.getServiceType().equals(Cow.SERVICE_TYPE_AI)) {
-                                        if(thisCow.getDam().getEarTagNumber().equals(allCows.get(i).getEarTagNumber())) {
-                                            damSelection = validDams.size() - 1;
-                                        }
-                                    }
-                                }
-                            }
-                        }
-
-                        selectedSireOwner = -1;
-                        String[] sireOwners = Locale.getArrayInLocale("bull_owners", this, Locale.LOCALE_ENGLISH);
-                        for(int i = 0; i < sireOwners.length; i++){
-                            if(sireOwners[i].equals(thisCow.getSire().getOwnerType())){
-                                selectedSireOwner = i;
-                            }
-                        }
-                        sireOwnerNameET.setText(thisCow.getSire().getOwner());
-
-                        String[] serviceTypesInEN = Locale.getArrayInLocale("service_types",this,Locale.LOCALE_ENGLISH);
-
-                        ArrayAdapter<String> siresArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,validSireNames);
-                        siresArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-                        sireS.setAdapter(siresArrayAdapter);
-                        sireS.setSelection(sireSelection);
-
-                        ArrayAdapter<String> damsArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,validDamNames);
-                        damsArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-                        damS.setAdapter(damsArrayAdapter);
-                        if(damSelection != -1)
-                            damS.setSelection(damSelection);
-
-                        ArrayAdapter<String> damsACTVAdapter = new ArrayAdapter<String>(this,android.R.layout.select_dialog_item,validDamNames);
-                        damACTV.setAdapter(damsACTVAdapter);
-                        if(damSelection != -1)
-                            damACTV.setText(validDamNames.get(damSelection));
-
-                        ArrayAdapter<String> siresACTVAdapter = new ArrayAdapter<String>(this, android.R.layout.select_dialog_item, validSireNames);
-                        sireACTV.setAdapter(siresACTVAdapter);
-                        if(sireSelection != -1)
-                            sireACTV.setText(validSireNames.get(sireSelection));
-
-                        for(int i = 0; i < serviceTypesInEN.length; i++) {
-                            if(serviceTypesInEN[i].equals("Bull") && thisCow.getServiceType().equals(Cow.SERVICE_TYPE_BULL)) {
-                                serviceTypeS.setSelection(i);
-                            }
-                            else if(serviceTypesInEN[i].equals("Artificial Insemination") && thisCow.getServiceType().equals(Cow.SERVICE_TYPE_AI)) {
-                                serviceTypeS.setSelection(i);
-                                strawNumberET.setText(thisCow.getSire().getStrawNumber());
-                            }
-                            else if(serviceTypesInEN[i].equals("Embryo Transfer") && thisCow.getServiceType().equals(Cow.SERVICE_TYPE_ET)) {
-                                serviceTypeS.setSelection(i);
-                                embryoNumberET.setText(thisCow.getDam().getEmbryoNumber());
-                            }
-                        }
-                    }
-                    else {
-                        serviceTypeTV.setVisibility(TextView.GONE);
-                        serviceTypeS.setVisibility(Spinner.GONE);
-                        sireTV.setVisibility(TextView.GONE);
-//                        sireS.setVisibility(Spinner.GONE);
-                        strawNumberTV.setVisibility(TextView.GONE);
-                        strawNumberET.setVisibility(EditText.GONE);
-                        damTV.setVisibility(TextView.GONE);
-//                        damS.setVisibility(Spinner.GONE);
-                        sireACTV.setVisibility(AutoCompleteTextView.GONE);
-                        sireOwnerTV.setVisibility(TextView.GONE);
-                        sireOwnerS.setVisibility(Spinner.GONE);
-                        sireOwnerNameTV.setVisibility(TextView.GONE);
-                        sireOwnerNameET.setVisibility(EditText.GONE);
-                        damACTV.setVisibility(AutoCompleteTextView.GONE);
-                        embryoNumberTV.setVisibility(TextView.GONE);
-                        embryoNumberET.setVisibility(EditText.GONE);
-                    }
-
-                    countryOfOriginACTV.setText(thisCow.getCountryOfOrigin());
-
-                    if(thisCow.getMode().equals(Cow.MODE_BORN_CALF_REGISTRATION)) {
-                        this.setTitle(Locale.getStringInLocale("calf_registration",this));
-                        setAgeFromDate(thisCow.getDateOfBirth());
-                        thisCow.setAge(Integer.parseInt(ageET.getText().toString()));
-                        if(ageTypesInEN[ageS.getSelectedItemPosition()].equals("Days")) {
-                            thisCow.setAgeType(Cow.AGE_TYPE_DAY);
-                        }
-                        else if(ageTypesInEN[ageS.getSelectedItemPosition()].equals("Months")) {
-                            thisCow.setAgeType(Cow.AGE_TYPE_MONTH);
-                        }
-                        else if(ageTypesInEN[ageS.getSelectedItemPosition()].equals("Years")) {
-                            thisCow.setAgeType(Cow.AGE_TYPE_YEAR);
-                        }
-                    }
-                }
-                else {
-                    Log.d(TAG,"Cow object is null");
-                }
-            }
-            else {
-                Log.d(TAG,"Farmer object is null");
-            }
-
-        }
-
-        if(nameET.getText().toString().trim().length() == 0 && earTagNumberET.getText().toString().trim().length() == 0){
-            //means that when the activity paused the last time it did not save data to the cow object. Try to get data from shared preferences
-            restoreEditTextData();
-        }
-    }
-
-    private void getGPSCoordinates() {
-        locationManager=(LocationManager)getSystemService(LOCATION_SERVICE);
-        if(locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
-            //Toast.makeText(this,"gps started",Toast.LENGTH_LONG).show();
-            Criteria criteria=new Criteria();
-            String provider=locationManager.getBestProvider(criteria,false);
-            Location location=locationManager.getLastKnownLocation(provider);
-            locationManager.requestLocationUpdates(provider, 18000, 1000, this);//If farmer  is moving at 200km/h, will still be able to update!
-            if(location!=null)
-            {
-                onLocationChanged(location);
-            }
-        }
-    }
-
-    @Override
-    public boolean onKeyDown(int keyCode, KeyEvent event) {
-        if(keyCode == KeyEvent.KEYCODE_BACK){
-            if(farmer.getMode().equals(Farmer.MODE_INITIAL_REGISTRATION)){
-                Toast.makeText(this,Locale.getStringInLocale("action_not_allowed",this),Toast.LENGTH_LONG).show();
-                return false;
-            }
-        }
-        return super.onKeyDown(keyCode, event);
-    }
-
-    @Override
-    public void initTextInViews() {
-        String title = Locale.getStringInLocale("cow_registration",this)+" "+String.valueOf(index+1);
-        this.setTitle(title);
-
-        nameETNHintTV.setText(" * " + Locale.getStringInLocale("ear_tag_no_or_name", this));
-        nameTV.setText(Locale.getStringInLocale("name",this));
-        earTagNumberTV.setText(Locale.getStringInLocale("ear_tag_number",this));
-
-        ageOrDOBHintTV.setText(" * " + Locale.getStringInLocale("age_or_dob", this));
-
-        ageTV.setText(Locale.getStringInLocale("age",this));
-        int ageTypeArrayID = Locale.getArrayIDInLocale("age_type_array",this);
-        if(ageTypeArrayID!=0){
-            ArrayAdapter<CharSequence> ageTypeArrayAdapter=ArrayAdapter.createFromResource(this, ageTypeArrayID, android.R.layout.simple_spinner_item);
-            ageTypeArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-            ageS.setAdapter(ageTypeArrayAdapter);
-        }
-        dateOfBirthTV.setText(Locale.getStringInLocale("date_of_birth",this));
-        breedTV.setText(Locale.getStringInLocale("breed",this));
-        anotherBreedTV.setText(Locale.getStringInLocale("extra_breed", this));
-        breedACTV.setHint(Locale.getStringInLocale("specify_breed_here", this));
-        sexTV.setText(" * "+Locale.getStringInLocale("sex",this));
-        int sexArrayID = Locale.getArrayIDInLocale("sex_array",this);
-        if(sexArrayID!=0) {
-            ArrayAdapter<CharSequence> sexArrayAdapter=ArrayAdapter.createFromResource(this, sexArrayID, android.R.layout.simple_spinner_item);
-            sexArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-            sexS.setAdapter(sexArrayAdapter);
-        }
-
-        milkingStatusTV.setText(" * " + Locale.getStringInLocale("cow_status", this));
-        inCalfStatusTV.setText(" * " + Locale.getStringInLocale("cow_in_calf", this));
-        ArrayAdapter<CharSequence> milkingStatusAdapter = ArrayAdapter.createFromResource(this, Locale.getArrayIDInLocale("cow_status_array", this), android.R.layout.simple_spinner_item);
-        milkingStatusAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        milkingStatusS.setAdapter(milkingStatusAdapter);
-
-        ArrayAdapter<CharSequence> inCalfAdapter = ArrayAdapter.createFromResource(this, Locale.getArrayIDInLocale("cow_in_calf_array", this), android.R.layout.simple_spinner_item);
-        inCalfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        inCalfStatusS.setAdapter(inCalfAdapter);
-
-        deformityTV.setText(Locale.getStringInLocale("deformity",this));
-        serviceTypeTV.setText(Locale.getStringInLocale("service_type_used",this));
-        int serviceTypesSireArrayID = Locale.getArrayIDInLocale("service_types",this);
-        if(serviceTypesSireArrayID!=0){
-            ArrayAdapter<CharSequence> serviceTypesAdapter = ArrayAdapter.createFromResource(this,serviceTypesSireArrayID,android.R.layout.simple_spinner_item);
-            serviceTypesAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-            serviceTypeS.setAdapter(serviceTypesAdapter);
-        }
-
-        sireTV.setText(Locale.getStringInLocale("sire",this));
-        sireOwnerTV.setText(Locale.getStringInLocale("sire_owner", this));
-
-        int sireOwnersID = Locale.getArrayIDInLocale("bull_owners", this);
-        if(sireOwnersID != 0){
-            ArrayAdapter<CharSequence> sireOwnersAdapter = ArrayAdapter.createFromResource(this,sireOwnersID,android.R.layout.simple_spinner_item);
-            sireOwnersAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-            sireOwnerS.setAdapter(sireOwnersAdapter);
-
-            if(selectedSireOwner != -1){
-                sireOwnerS.setSelection(selectedSireOwner);
-            }
-        }
-
-        sireOwnerNameTV.setText(Locale.getStringInLocale("name_sire_owner", this));
-        sireOwnerNameET.setHint(Locale.getStringInLocale("name_of_other_farmer_or_group", this));
-        damTV.setText(Locale.getStringInLocale("dam",this));
-        strawNumberTV.setText(Locale.getStringInLocale("straw_number",this));
-        embryoNumberTV.setText(Locale.getStringInLocale("embryo_number",this));
-        countryOfOriginTV.setText(Locale.getStringInLocale("other_countries",this));
-        commonCountriesTV.setText(Locale.getStringInLocale("country_of_origin",this));
-        previousButton.setText(Locale.getStringInLocale("previous",this));
-        if(index == (numberOfCows -1)) {
-            nextButton.setText(Locale.getStringInLocale("finish",this));
-        }
-        else {
-            nextButton.setText(Locale.getStringInLocale("next",this));
-        }
-
-        breedDialog.setTitle(Locale.getStringInLocale("breed",this));
-        breeds=Locale.getArrayInLocale("c_breeds_array",this);
-        uncommonBreeds=Locale.getArrayInLocale("uc_breeds_array",this);
-        if(breeds==null) {
-            breeds = new String[1];
-            breeds[0] = "";
-        }
-        ArrayAdapter<String> breedArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,breeds);
-        breedLV.setAdapter(breedArrayAdapter);
-        dialogBreedOkayB.setText(Locale.getStringInLocale("okay",this));
-        int totalBreedSVHeight = 0;
-        for (int i = 0, len = breedArrayAdapter.getCount(); i < len; i++) {
-            View listItem = breedArrayAdapter.getView(i, null, breedLV);
-            //listItem.measure(0, 0);
-            int list_child_item_height = listItem.getLayoutParams().height + breedLV.getDividerHeight();//item height
-            totalBreedSVHeight += list_child_item_height; //
-        }
-        if(totalBreedSVHeight > 0){
-            breedLV.getLayoutParams().height = totalBreedSVHeight;
-            if(breedDialogSV.getLayoutParams().height > (totalBreedSVHeight + dialogBreedOkayB.getLayoutParams().height)){
-                breedDialogSV.getLayoutParams().height = totalBreedSVHeight + dialogBreedOkayB.getLayoutParams().height;
-            }
-        }
-        ArrayAdapter<String> uncommonBreedsArrayAdapter = new ArrayAdapter<String>(this, android.R.layout.select_dialog_item, uncommonBreeds);
-        breedACTV.setAdapter(uncommonBreedsArrayAdapter);
-
-
-        deformityDialog.setTitle(Locale.getStringInLocale("deformity",this));
-        deformities=Locale.getArrayInLocale("deformities_array",this);
-        if(deformities==null) {
-            deformities = new String[1];
-            deformities[0] = "";
-        }
-        ArrayAdapter<String> deformityArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,deformities);
-        deformityLV.setAdapter(deformityArrayAdapter);
-        specifyET.setHint(Locale.getStringInLocale("specify", this));
-        noDeformityCB.setText(Locale.getStringInLocale("no_deformity", this));
-        dialogDeformityOkayB.setText(Locale.getStringInLocale("okay",this));
-
-        sireACTV.setHint(Locale.getStringInLocale("enter_sire_etn", this));
-        damACTV.setHint(Locale.getStringInLocale("enter_dam_etn",this));
-
-        ArrayAdapter countryArrayAdapter = ArrayAdapter.createFromResource(this,R.array.countries,android.R.layout.select_dialog_item);
-        countryOfOriginACTV.setAdapter(countryArrayAdapter);
-        countryOfOriginACTV.setHint(Locale.getStringInLocale("specify_other_country", this));
-
-        int totalDeformitySVHeight = 0;
-        for (int i = 0, len = deformityArrayAdapter.getCount(); i < len; i++) {
-            View listItem = deformityArrayAdapter.getView(i, null, deformityLV);
-            //listItem.measure(0, 0);
-            int list_child_item_height = listItem.getLayoutParams().height + deformityLV.getDividerHeight();//item height
-            totalDeformitySVHeight += list_child_item_height; //
-        }
-
-        Log.d(TAG, "Height of no deformity checkbox = "+String.valueOf(noDeformityCB.getLayoutParams().height));
-        Log.d(TAG, "Margin top of deformity checkbox = "+String.valueOf(((ViewGroup.MarginLayoutParams)noDeformityCB.getLayoutParams()).topMargin));
-
-        if(totalDeformitySVHeight > 0){
-            deformityLV.getLayoutParams().height = totalDeformitySVHeight;
-            int svChildrenHeight = totalDeformitySVHeight +
-                    specifyET.getLayoutParams().height +
-                    noDeformityCB.getLayoutParams().height +
-                    ((ViewGroup.MarginLayoutParams)noDeformityCB.getLayoutParams()).topMargin +
-                    dialogDeformityOkayB.getLayoutParams().height +
-                    ((ViewGroup.MarginLayoutParams)dialogDeformityOkayB.getLayoutParams()).topMargin;
-
-            if(deformitySV.getLayoutParams().height > svChildrenHeight){
-                deformitySV.getLayoutParams().height= svChildrenHeight;
-            }
-        }
-
-        ArrayAdapter<CharSequence> commonCountriesArrayAdapter = ArrayAdapter.createFromResource(this,R.array.common_countries,android.R.layout.simple_spinner_item);
-        commonCountriesArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        commonCountriesS.setAdapter(commonCountriesArrayAdapter);
-    }
-
-    @Override
-    public void onClick(View view) {
-        if(view==previousButton) {
-            cacheThisCow();
-            clearEditTextDataCache();//we don't want data on this cow entered on a previous or next cow
-
-            if(this.index > 0){
-                Intent intent=new Intent(CowRegistrationActivity.this, CowRegistrationActivity.class);
-                intent.putExtra(KEY_INDEX,index-1);
-                intent.putExtra(KEY_NUMBER_OF_COWS,numberOfCows);
-                Bundle bundle=new Bundle();
-                bundle.putParcelable(Farmer.PARCELABLE_KEY,farmer);
-                intent.putExtras(bundle);
-                startActivity(intent);
-            }
-            else if(this.index == 0){
-                Intent intent = new Intent(CowRegistrationActivity.this, FarmerRegistrationActivity.class);
-                Bundle bundle=new Bundle();
-                bundle.putParcelable(Farmer.PARCELABLE_KEY, farmer);
-                intent.putExtras(bundle);
-                startActivity(intent);
-            }
-            else{
-                Log.e(TAG, "Current cow index is out of range ("+String.valueOf(this.index)+")");
-            }
-        }
-        else if(view==nextButton) {
-            if(validateInput()) {
-                cacheThisCow();
-                Bundle bundle=new Bundle();
-                bundle.putParcelable(Farmer.PARCELABLE_KEY,farmer);
-
-                clearEditTextDataCache();
-
-                if(index == (numberOfCows-1))//last cow
-                {
-                    Log.d(TAG, farmer.getJsonObject().toString());
-                    sendDataToServer(farmer.getJsonObject());
-                }
-                else
-                {
-                    Intent intent=new Intent(CowRegistrationActivity.this, CowRegistrationActivity.class);
-                    intent.putExtra(KEY_INDEX,index+1);
-                    intent.putExtra(KEY_NUMBER_OF_COWS,numberOfCows);
-                    intent.putExtras(bundle);
-                    startActivity(intent);
-                }
-            }
-        }
-        else if(view==dateOfBirthET) {
-            dateOfBirthETClicked();
-        }
-        else if(view==breedET) {
-            breedETClicked();
-        }
-        else if(view==deformityET) {
-            deformityETClicked();
-        }
-        else if(view==dialogBreedOkayB) {
-            String selectedBreeds="";
-            SparseBooleanArray checkedBreeds=breedLV.getCheckedItemPositions();
-            for (int i=0; i<breedLV.getCount();i++)
-            {
-                if(checkedBreeds.get(i))
-                {
-                    if(!selectedBreeds.equals(""))
-                    {
-                        selectedBreeds=selectedBreeds+", "+breeds[i];
-                    }
-                    else
-                    {
-                        selectedBreeds=breeds[i];
-                    }
-                }
-            }
-            breedET.setText(selectedBreeds);
-            breedDialog.dismiss();
-        }
-        else if(view==dialogDeformityOkayB) {
-            String selectedDeformities="";
-            SparseBooleanArray checkedDeformities=deformityLV.getCheckedItemPositions();
-            for (int i=0; i<deformityLV.getCount();i++) {
-                if(checkedDeformities.get(i)) {
-                    if(!selectedDeformities.equals("")) {
-                        selectedDeformities=selectedDeformities+", "+deformities[i];
-                    }
-                    else {
-                        selectedDeformities=deformities[i];
-                    }
-                }
-            }
-            deformityET.setText(selectedDeformities);
-            deformityDialog.dismiss();
-            deformityOSpecifyText=specifyET.getText().toString();
-        }
-    }
-
-    private void dateOfBirthETClicked() {
-        Date date=null;
-        if(dateOfBirthET.getText().toString().length()>0) {
-            try {
-                date=new SimpleDateFormat(dateFormat, java.util.Locale.ENGLISH).parse(dateOfBirthET.getText().toString());
-            }
-            catch (ParseException e) {
-                e.printStackTrace();
-            }
-        }
-        if(date==null) {
-            date=new Date();
-        }
-        Calendar calendar=new GregorianCalendar();
-        calendar.setTime(date);
-        datePickerDialog=new DatePickerDialog(this,this,calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH));
-        //datePickerDialog=createDialogWithoutDateField(this,calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH));
-        datePickerDialog.show();
-    }
-
-    @Override
-    public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
-        String dateString=String.valueOf(dayOfMonth)+"/"+String.valueOf(monthOfYear+1)+"/"+String.valueOf(year);//TODO: this might be a bug
-        dateOfBirthET.setText(dateString);
-        //setAgeFromDate(dateString);
-    }
-
-    private void setAgeFromDate(String dateString) {
-        Log.d(TAG, "date entered : " + dateString);
-        SimpleDateFormat simpleDateFormat=new SimpleDateFormat(dateFormat);
-        Date enteredDate=new Date();
-        try
-        {
-            enteredDate=simpleDateFormat.parse(dateString);
-        }
-        catch (ParseException e)
-        {
-            e.printStackTrace();
-        }
-        Date today=new Date();
-        Log.d(TAG,"today's date : "+today.toString());
-        long millisecondDifference=today.getTime()-enteredDate.getTime();
-        Log.d(TAG,"millisecond difference : "+String.valueOf(millisecondDifference));
-        String[] ageTypesInEN = Locale.getArrayInLocale("age_type_array",this,Locale.LOCALE_ENGLISH);
-        if(millisecondDifference>0&&millisecondDifference<604800000L)//less than one week
-        {
-            int days=(int)(millisecondDifference/86400000L);
-            ageET.setText(String.valueOf(days));
-            for(int i = 0; i < ageTypesInEN.length; i++) {
-                if(ageTypesInEN[i].equals("Day")) {
-                    ageS.setSelection(i);
-                }
-            }
-        }
-        else if(millisecondDifference>=604800000L&&millisecondDifference<2628000000L)//less than a year
-        {
-            int months=(int)(millisecondDifference/2628000000L);
-            ageET.setText(String.valueOf(months));
-            for(int i = 0; i < ageTypesInEN.length; i++) {
-                if(ageTypesInEN[i].equals("Months")) {
-                    ageS.setSelection(i);
-                }
-            }
-        }
-        else if(millisecondDifference>=31557600000L)//a year or greater
-        {
-            int years=(int)(millisecondDifference/31557600000L);
-            ageET.setText(String.valueOf(years));
-            for(int i = 0; i < ageTypesInEN.length; i++) {
-                if(ageTypesInEN[i].equals("Years")) {
-                    ageS.setSelection(i);
-                }
-            }
-        }
-    }
-
-    private void breedETClicked() {
-        //uncheck everything in listview
-        for (int i=0; i<breedLV.getCount();i++) {
-            breedLV.setItemChecked(i,false);
-        }
-
-        String breedETString=breedET.getText().toString();
-        if(!breedETString.equals(null)||!breedETString.equals(""))
-        {
-            String[] selectedBreeds=breedETString.split(", ");
-            //for all of the breeds check if breed is in selected breeds
-            for(int i=0; i<breeds.length;i++)
-            {
-                String currentBreed=breeds[i];
-                for(int j=0; j<selectedBreeds.length;j++) {
-                    if(currentBreed.equals(selectedBreeds[j])) {
-                        breedLV.setItemChecked(i,true);
-                        break;
-                    }
-                }
-            }
-        }
-        breedDialog.show();
-    }
-
-    @Override
-    public void onItemClick(AdapterView<?> parent, View view, int position, long id)
-    {
-        if(parent==breedLV) {
-            if(breedLV.isItemChecked(position)) {
-                selectedBreeds++;
-            }
-            else {
-                selectedBreeds--;
-            }
-            if(selectedBreeds>4) {
-                breedLV.setItemChecked(position,false);
-                selectedBreeds--;
-                Toast.makeText(this,Locale.getStringInLocale("maximum_of_four_breeds",this),Toast.LENGTH_LONG).show();
-            }
-
-            if(position==breeds.length - 1){//the last item should be other breed
-                if(breedLV.isItemChecked(position)){
-                    breedACTV.setVisibility(AutoCompleteTextView.VISIBLE);
-                    anotherBreedTV.setVisibility(TextView.VISIBLE);
-                }
-                else{
-                    breedACTV.setVisibility(AutoCompleteTextView.GONE);
-                    breedACTV.setText("");
-                    anotherBreedTV.setVisibility(TextView.GONE);
-                }
-            }
-        }
-        else if(parent==deformityLV) {
-            if(position==deformities.length-1){ //last deformity. should be other
-                if(deformityLV.isItemChecked(position)) {
-                    specifyET.setVisibility(EditText.VISIBLE);
-                }
-                else {
-                    specifyET.setVisibility(EditText.GONE);
-                    specifyET.setText("");
-                }
-            }
-
-            noDeformityCB.setChecked(false);
-        }
-    }
-
-    private void deformityETClicked() {
-        //uncheck everything in listview
-        for (int i=0;i<deformityLV.getCount();i++) {
-            deformityLV.setItemChecked(i,false);
-        }
-        String deformityETString=deformityET.getText().toString();
-        if(!deformityETString.equals(null)||!deformityETString.equals("")) {
-            String[] selectedDeformities=deformityETString.split(", ");
-            for (int i=0;i<deformities.length;i++)
-            {
-                String currentDeformity=deformities[i];
-                for (int j=0;j<selectedDeformities.length;j++)
-                {
-                    if(currentDeformity.equals(selectedDeformities[j]))
-                    {
-                        deformityLV.setItemChecked(i,true);
-                        if (i==deformities.length-1)
-                        {
-                            specifyET.setVisibility(EditText.VISIBLE);
-                            specifyET.setText(deformityOSpecifyText);
-                        }
-                        break;
-                    }
-                }
-            }
-        }
-        deformityDialog.show();
-    }
-
-    @Override
-    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
-        if(parent == serviceTypeS) {
-            changeServiceType();
-        }
-        else if(parent == commonCountriesS) {
-            toggleCountryOfOriginVisibility();
-        }
-        else if(parent == sireOwnerS){
-            toggleSireOwnerVisibility();
-        }
-        else if(parent == sexS){
-            toggleFemaleCowViewsVisibility();
-        }
-    }
-
-    private void toggleFemaleCowViewsVisibility(){
-        Log.d(TAG, "Toggling female views");
-        String[] sexInEN = Locale.getArrayInLocale("sex_array", this, Locale.LOCALE_ENGLISH);
-        if(sexInEN[sexS.getSelectedItemPosition()].equals(Cow.SEX_FEMALE)){
-            milkingStatusS.setVisibility(Spinner.VISIBLE);
-            milkingStatusTV.setVisibility(TextView.VISIBLE);
-
-            inCalfStatusS.setVisibility(Spinner.VISIBLE);
-            inCalfStatusTV.setVisibility(TextView.VISIBLE);
-        }
-        else{
-            milkingStatusS.setVisibility(Spinner.GONE);
-            milkingStatusTV.setVisibility(TextView.GONE);
-
-            inCalfStatusS.setVisibility(Spinner.GONE);
-            inCalfStatusTV.setVisibility(TextView.GONE);
-        }
-    }
-
-    private void toggleCountryOfOriginVisibility(){
-        String[] commonCountries = getResources().getStringArray(R.array.common_countries);
-        if(commonCountries[commonCountriesS.getSelectedItemPosition()].equals("Other")) {
-            countryOfOriginACTV.setVisibility(AutoCompleteTextView.VISIBLE);
-            countryOfOriginTV.setVisibility(TextView.VISIBLE);
-            countryOfOriginACTV.setText("");
-        }
-        else {
-            countryOfOriginACTV.setVisibility(AutoCompleteTextView.GONE);
-            countryOfOriginTV.setVisibility(TextView.GONE);
-            countryOfOriginACTV.setText(commonCountries[commonCountriesS.getSelectedItemPosition()]);
-        }
-    }
-
-    private void changeServiceType() {
-        String[] serviceTypesInEN = Locale.getArrayInLocale("service_types", this, Locale.LOCALE_ENGLISH);
-        if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Bull")) {
-            sireTV.setVisibility(TextView.VISIBLE);
-            sireOwnerTV.setVisibility(TextView.VISIBLE);
-            sireOwnerS.setVisibility(Spinner.VISIBLE);
-            toggleSireOwnerVisibility();
-//            sireS.setVisibility(Spinner.VISIBLE);
-            strawNumberTV.setVisibility(TextView.GONE);
-            strawNumberET.setVisibility(EditText.GONE);
-            damTV.setVisibility(TextView.VISIBLE);
-//            damS.setVisibility(Spinner.VISIBLE);
-            damS.setVisibility(Spinner.GONE);
-            damACTV.setVisibility(AutoCompleteTextView.VISIBLE);
-            sireACTV.setVisibility(AutoCompleteTextView.VISIBLE);
-            embryoNumberTV.setVisibility(TextView.GONE);
-            embryoNumberET.setVisibility(EditText.GONE);
-            commonCountriesTV.setVisibility(TextView.VISIBLE);
-            commonCountriesS.setVisibility(Spinner.VISIBLE);
-            toggleCountryOfOriginVisibility();
-        }
-        else if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Artificial Insemination")) {
-            sireTV.setVisibility(TextView.GONE);
-            sireOwnerTV.setVisibility(TextView.GONE);
-            sireOwnerS.setVisibility(Spinner.GONE);
-            sireOwnerNameTV.setVisibility(TextView.GONE);
-            sireOwnerNameET.setVisibility(EditText.GONE);
-//            sireS.setVisibility(Spinner.GONE);
-            strawNumberTV.setVisibility(TextView.VISIBLE);
-            strawNumberET.setVisibility(EditText.VISIBLE);
-            damTV.setVisibility(TextView.VISIBLE);
-//            damS.setVisibility(Spinner.VISIBLE);
-            damS.setVisibility(Spinner.GONE);
-            damACTV.setVisibility(AutoCompleteTextView.VISIBLE);
-            sireACTV.setVisibility(AutoCompleteTextView.GONE);
-            embryoNumberTV.setVisibility(TextView.GONE);
-            embryoNumberET.setVisibility(EditText.GONE);
-            commonCountriesTV.setVisibility(TextView.GONE);
-            commonCountriesS.setVisibility(Spinner.GONE);
-            countryOfOriginTV.setVisibility(TextView.GONE);
-            countryOfOriginACTV.setVisibility(AutoCompleteTextView.GONE);
-        }
-        else if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Embryo Transfer")) {
-            sireTV.setVisibility(TextView.GONE);
-            sireOwnerTV.setVisibility(TextView.GONE);
-            sireOwnerS.setVisibility(Spinner.GONE);
-            sireOwnerNameTV.setVisibility(TextView.GONE);
-            sireOwnerNameET.setVisibility(EditText.GONE);
-//            sireS.setVisibility(Spinner.GONE);
-            strawNumberTV.setVisibility(TextView.GONE);
-            strawNumberET.setVisibility(EditText.GONE);
-            damTV.setVisibility(TextView.GONE);
-            damS.setVisibility(Spinner.GONE);
-            damACTV.setVisibility(AutoCompleteTextView.GONE);
-            sireACTV.setVisibility(AutoCompleteTextView.GONE);
-            embryoNumberTV.setVisibility(TextView.VISIBLE);
-            embryoNumberET.setVisibility(EditText.VISIBLE);
-            commonCountriesTV.setVisibility(TextView.GONE);
-            commonCountriesS.setVisibility(Spinner.GONE);
-            countryOfOriginTV.setVisibility(TextView.GONE);
-            countryOfOriginACTV.setVisibility(AutoCompleteTextView.GONE);
-        }
-    }
-
-    @Override
-    public void onNothingSelected(AdapterView<?> parent) {
-    }
-
-    private boolean validateInput() {
-        String earTagNumberText=earTagNumberET.getText().toString();
-        String nameText=nameET.getText().toString();
-        if((earTagNumberText==null||earTagNumberText.equals("")) && (nameText==null||nameText.equals(""))) {
-            Toast.makeText(this,Locale.getStringInLocale("enter_ear_tag_no_or_name",this),Toast.LENGTH_LONG).show();
-            return false;
-        }
-
-        String[] sexInEN = Locale.getArrayInLocale("sex_array", this, Locale.LOCALE_ENGLISH);
-        if(sexInEN[sexS.getSelectedItemPosition()].equals(Cow.SEX_FEMALE)){
-            String[] inCalfArray = Locale.getArrayInLocale("cow_in_calf_array",this);
-            String[] milkingStatusArray = Locale.getArrayInLocale("cow_status_array",this);
-            if(inCalfStatusS.getSelectedItemPosition() == -1 || inCalfArray[inCalfStatusS.getSelectedItemPosition()].length() == 0){
-                Toast.makeText(this, Locale.getStringInLocale("enter_in_calf_status", this), Toast.LENGTH_LONG).show();
-                return false;
-            }
-            if(milkingStatusS.getSelectedItemPosition() == -1 || milkingStatusArray[milkingStatusS.getSelectedItemPosition()].length() == 0){
-                Toast.makeText(this, Locale.getStringInLocale("enter_milk_status_of_cow", this), Toast.LENGTH_LONG).show();
-                return false;
-            }
-        }
-
-        if(dateOfBirthET.getText().toString().trim().equals("") && ageET.getText().toString().trim().equals("")){
-            Toast.makeText(this, Locale.getStringInLocale("enter_age_or_dob", this), Toast.LENGTH_LONG).show();
-            return false;
-        }
-        else if (!dateOfBirthET.getText().toString().trim().equals("") && !ageET.getText().toString().trim().equals("")) {//both dob and age are set
-            String[] ageTypesInEN = Locale.getArrayInLocale("age_type_array", this, Locale.LOCALE_ENGLISH);
-            String ageType = ageTypesInEN[ageS.getSelectedItemPosition()];
-            float unitAge = 0;
-            if (ageType.equals("Years")) {
-                unitAge = 31557600000L;
-            } else if (ageType.equals("Months")) {
-                unitAge = 2628000000L;
-            } else if (ageType.equals("Days")) {
-                unitAge = 86400000L;
-            }
-
-            SimpleDateFormat simpleDateFormat = new SimpleDateFormat(dateFormat);
-
-            try {
-                Date enteredDate = simpleDateFormat.parse(dateOfBirthET.getText().toString());
-                long enteredDateMs = enteredDate.getTime();
-                long ageMs = (long) (new Date().getTime() - (Integer.parseInt(ageET.getText().toString()) * unitAge));
-                long msDiff = Math.abs(ageMs - enteredDateMs);
-                float unitDiff = msDiff / unitAge;
-                if (unitDiff > 1) {
-                    Toast.makeText(this, Locale.getStringInLocale("age_diff_from_dob", this), Toast.LENGTH_LONG).show();
-                    return false;
-                }
-            } catch (ParseException e) {
-                e.printStackTrace();
-            }
-        }
-
-        if(breedACTV.getVisibility() == AutoCompleteTextView.VISIBLE){//user selected other breed in breedET
-            if(breedACTV.getText().toString().trim().length() == 0){//user did not specify other breed
-                Toast.makeText(this, Locale.getStringInLocale("enter_breed", this), Toast.LENGTH_LONG).show();
-                breedACTV.requestFocus();
-                return false;
-            }
-            else{
-                String[] uncommonBreedsInEN = Locale.getArrayInLocale("uc_breeds_array", this, Locale.LOCALE_ENGLISH);
-                String enteredBreed = breedACTV.getText().toString();
-                boolean breedKnown = false;
-                for(int i = 0; i < uncommonBreedsInEN.length; i++){
-                    if(uncommonBreedsInEN[i].equals(enteredBreed)){
-                        breedKnown = true;
-                    }
-                }
-
-                if(!breedKnown){
-                    Toast.makeText(this, Locale.getStringInLocale("breed_unknown", this), Toast.LENGTH_LONG).show();
-                    breedACTV.requestFocus();
-                    return false;
-                }
-            }
-        }
-
-        if(countryOfOriginACTV.getText().toString().length() > 0) {
-            String[] countries = this.getResources().getStringArray(R.array.countries);
-            boolean countryFound = false;
-            for(int i = 0; i < countries.length; i++) {
-                if(countries[i].equals(countryOfOriginACTV.getText().toString())) {
-                    countryFound = true;
-                    break;
-                }
-            }
-            if(!countryFound) {
-                Toast.makeText(this,Locale.getStringInLocale("country_not_found",this),Toast.LENGTH_LONG).show();
-                return false;
-            }
-        }
-
-        return true;
-    }
-
-    private void cacheThisCow() {
-        clearEditTextDataCache();
-
-        if(thisCow==null) {
-            thisCow=new Cow(true);
-        }
-        thisCow.setName(nameET.getText().toString());
-        if(farmer.getMode().equals(Farmer.MODE_INITIAL_REGISTRATION)) {
-            thisCow.setMode(Cow.MODE_ADULT_COW_REGISTRATION);
-        }
-        thisCow.setEarTagNumber(earTagNumberET.getText().toString());
-        thisCow.setDateOfBirth(dateOfBirthET.getText().toString());
-        thisCow.setAge((ageET.getText().toString() == null || ageET.getText().toString().length() == 0) ? -1 : Integer.parseInt(ageET.getText().toString()));
-        String[] ageTypesInEN = Locale.getArrayInLocale("age_type_array",this,Locale.LOCALE_ENGLISH);
-        if(ageTypesInEN[ageS.getSelectedItemPosition()].equals("Days")) {
-            thisCow.setAgeType(Cow.AGE_TYPE_DAY);
-        }
-        else if(ageTypesInEN[ageS.getSelectedItemPosition()].equals("Months")) {
-            thisCow.setAgeType(Cow.AGE_TYPE_MONTH);
-        }
-        else if(ageTypesInEN[ageS.getSelectedItemPosition()].equals("Years")) {
-            thisCow.setAgeType(Cow.AGE_TYPE_YEAR);
-        }
-        thisCow.setDateOfBirth(dateOfBirthET.getText().toString());
-        thisCow.setBreeds(breedET.getText().toString().split(", "), this, true);
-        thisCow.setOtherBreed(this, breedACTV.getText().toString());
-        thisCow.setDeformities(deformityET.getText().toString().split(", "), this);
-        thisCow.setOtherDeformity(specifyET.getText().toString());
-        thisCow.setCountryOfOrigin(countryOfOriginACTV.getText().toString());
-        String[] sexInEN = Locale.getArrayInLocale("sex_array",this,Locale.LOCALE_ENGLISH);
-        if(sexInEN[sexS.getSelectedItemPosition()].equals("Female")) {
-            thisCow.setSex(Cow.SEX_FEMALE);
-
-            String[] milkingStatusInEN = Locale.getArrayInLocale("cow_status_array", this, Locale.LOCALE_ENGLISH);
-            thisCow.setMilkingStatus(milkingStatusInEN[milkingStatusS.getSelectedItemPosition()], this);
-            String[] inCalfArrayInEN = Locale.getArrayInLocale("cow_in_calf_array", this, Locale.LOCALE_ENGLISH);
-            if(inCalfArrayInEN[inCalfStatusS.getSelectedItemPosition()].equals(Cow.COW_IN_CALF)){
-                thisCow.setInCalf(true);
-            }
-            else{
-                thisCow.setInCalf(false);
-            }
-        }
-        else if(sexInEN[sexS.getSelectedItemPosition()].equals("Male")) {
-            thisCow.setSex(Cow.SEX_MALE);
-        }
-        if(farmer.getMode().equals(Farmer.MODE_INITIAL_REGISTRATION)) {
-            String[] serviceTypesInEN = Locale.getArrayInLocale("service_types",this,Locale.LOCALE_ENGLISH);
-            if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Bull")) {
-                thisCow.setServiceType(Cow.SERVICE_TYPE_BULL);
-
-                Sire sire = new Sire();
-//                sire.setName(validSires.get(sireS.getSelectedItemPosition()).getName());
-//                sire.setEarTagNumber(validSires.get(sireS.getSelectedItemPosition()).getEarTagNumber());
-
-                for(int i = 0; i < validSires.size(); i++){
-                    if(sireACTV.getText().toString().equals(validSires.get(i).getEarTagNumber()+" ("+validSires.get(i).getName()+")")){
-                        sire.setEarTagNumber(validSires.get(i).getEarTagNumber());
-                        sire.setName(validSires.get(i).getName());
-                    }
-                }
-                if(sire.getEarTagNumber().trim().equals("")){//if not yet set then assume the sire is not part of the herd
-                    sire.setEarTagNumber(sireACTV.getText().toString());
-                }
-
-                String[] sireOwnersInEN = Locale.getArrayInLocale("bull_owners", this, Locale.LOCALE_ENGLISH);
-                sire.setOwnerType(sireOwnersInEN[sireOwnerS.getSelectedItemPosition()]);
-                sire.setOwner(sireOwnerNameET.getText().toString());
-                thisCow.setSire(sire);
-
-                Dam dam =new Dam();
-//                dam.setName(validDams.get(damS.getSelectedItemPosition()).getName());
-//                dam.setEarTagNumber(validDams.get(damS.getSelectedItemPosition()).getEarTagNumber());
-
-                for(int i = 0; i < validDams.size(); i++ ){
-                    if(damACTV.getText().toString().equals(validDams.get(i).getEarTagNumber()+" ("+validDams.get(i).getName()+")")){
-                        dam.setEarTagNumber(validDams.get(i).getEarTagNumber());
-                        dam.setName(validDams.get(i).getName());
-                    }
-                }
-                if(dam.getEarTagNumber().trim().equals("")){//if not yet set then assume the dam is not part of the herd
-                    dam.setEarTagNumber(damACTV.getText().toString());
-                }
-                thisCow.setDam(dam);
-            }
-            else if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Artificial Insemination")) {
-                thisCow.setServiceType(Cow.SERVICE_TYPE_AI);
-
-                Sire sire = new Sire();
-                sire.setStrawNumber(strawNumberET.getText().toString());
-                thisCow.setSire(sire);
-
-                Dam dam =new Dam();
-//                dam.setName(validDams.get(damS.getSelectedItemPosition()).getName());
-//                dam.setEarTagNumber(validDams.get(damS.getSelectedItemPosition()).getEarTagNumber());
-
-                for(int i = 0; i < validDams.size(); i++ ){
-                    if(damACTV.getText().toString().equals(validDams.get(i).getEarTagNumber()+" ("+validDams.get(i).getName()+")")){
-                        dam.setEarTagNumber(validDams.get(i).getEarTagNumber());
-                        dam.setName(validDams.get(i).getName());
-                    }
-                }
-                if(dam.getEmbryoNumber().trim().equals("")){
-                    dam.setEarTagNumber(damACTV.getText().toString());
-                }
-                thisCow.setDam(dam);
-            }
-            else if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Embryo Transfer")) {
-                thisCow.setServiceType(Cow.SERVICE_TYPE_ET);
-
-                Dam dam =new Dam();
-//                dam.setName(validDams.get(damS.getSelectedItemPosition()).getName());
-//                dam.setEarTagNumber(validDams.get(damS.getSelectedItemPosition()).getEarTagNumber());
-
-                for(int i = 0; i < validDams.size(); i++ ){
-                    if(damACTV.getText().toString().equals(validDams.get(i).getEarTagNumber()+" ("+validDams.get(i).getName()+")")){
-                        dam.setEarTagNumber(validDams.get(i).getEarTagNumber());
-                        dam.setName(validDams.get(i).getName());
-                    }
-                }
-                if(dam.getEmbryoNumber().trim().equals("")){
-                    dam.setEarTagNumber(damACTV.getText().toString());
-                }
-                thisCow.setDam(dam);
-            }
-        }
-        farmer.setCow(thisCow,index);
-    }
-
-    private void sendDataToServer(JSONObject jsonObject)
-    {
-        ServerRegistrationThread serverRegistrationThread=new ServerRegistrationThread();
-        serverRegistrationThread.execute(jsonObject);
-    }
-
-    @Override
-    public void onFocusChange(View view, boolean hasFocus) {
-        if(view == dateOfBirthET && hasFocus){
-            if(dateOfBirthET.getText().toString().length() ==0 ){
-                dateOfBirthETClicked();
-            }
-        }
-        else if(view == breedET && hasFocus){
-            if(breedET.getText().toString().length() == 0){
-                breedETClicked();
-            }
-        }
-        else if(view == deformityET && hasFocus){
-            if(deformityET.getText().toString().length() == 0){
-                deformityETClicked();
-            }
-        }
-    }
-
-    private void toggleSireOwnerVisibility(){
-        String[] sireOwnersInEN = Locale.getArrayInLocale("bull_owners", this, Locale.LOCALE_ENGLISH);
-        if(sireOwnersInEN[sireOwnerS.getSelectedItemPosition()].equals("Own bull")){
-            sireOwnerNameTV.setVisibility(TextView.GONE);
-            sireOwnerNameET.setVisibility(EditText.GONE);
-        }
-        else{
-            sireOwnerNameTV.setVisibility(TextView.VISIBLE);
-            sireOwnerNameET.setVisibility(EditText.VISIBLE);
-        }
-    }
-
-    @Override
-    public void onLocationChanged(Location location) {
-        String latitude=String.valueOf(location.getLatitude());
-        String longitude=String.valueOf(location.getLongitude());
-        Log.d(TAG,"latitude : "+latitude);
-        Log.d(TAG,"longitude : "+longitude);
-
-        if(this.farmer.isInFarm() && (this.farmer.getLatitude() == null || this.farmer.getLatitude().length() == 0)){
-            this.farmer.setLatitude(latitude);
-        }
-
-        if(this.farmer.isInFarm() && (this.farmer.getLongitude() == null || this.farmer.getLongitude().length() == 0)){
-            this.farmer.setLongitude(longitude);
-        }
-    }
-
-    @Override
-    public void onStatusChanged(String provider, int status, Bundle extras) {
-
-    }
-
-    @Override
-    public void onProviderEnabled(String provider) {
-
-    }
-
-    @Override
-    public void onProviderDisabled(String provider) {
-
-    }
-
-    @Override
-    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
-        if(buttonView.equals(noDeformityCB)){
-            if(isChecked){
-                deformityLV.clearChoices();
-                ArrayAdapter<String> deformityArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,deformities);
-                deformityLV.setAdapter(deformityArrayAdapter);
-                specifyET.setVisibility(EditText.GONE);
-                specifyET.setText("");
-
-                deformityET.setHint(Locale.getStringInLocale("no_deformity", this));
-            }
-            else{
-                deformityET.setHint("");
-            }
-        }
-    }
-
-    @Override
-    public boolean onLongClick(View v) {
-        if(v.equals(dateOfBirthET)){
-            Log.w(TAG, "About to delete date in dateOfBirthET");
-            dateOfBirthET.setText("");
-        }
-        return false;
-    }
-
-    private class ServerRegistrationThread extends AsyncTask<JSONObject,Integer,String> {
-        private ProgressDialog progressDialog;
-
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-            progressDialog = ProgressDialog.show(CowRegistrationActivity.this, "",Locale.getStringInLocale("loading_please_wait",CowRegistrationActivity.this), true);
-        }
-
-        @Override
-        protected String doInBackground(JSONObject... params) {
-            Log.d(TAG,"sending registration data to server");
-            String responseString=DataHandler.sendDataToServer(CowRegistrationActivity.this, params[0].toString(), DataHandler.FARMER_REGISTRATION_URL, true);
-
-            return responseString;
-        }
-
-        @Override
-        protected void onPostExecute(String result) {
-            super.onPostExecute(result);
-            progressDialog.dismiss();
-
-            if(result == null) {
-                String httpError = DataHandler.getSharedPreference(CowRegistrationActivity.this, "http_error", "No Error thrown to application. Something must be really wrong");
-                Toast.makeText(CowRegistrationActivity.this,httpError,Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
-                Toast.makeText(CowRegistrationActivity.this, Locale.getStringInLocale("generic_sms_error", CowRegistrationActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
-                Toast.makeText(CowRegistrationActivity.this, Locale.getStringInLocale("no_service", CowRegistrationActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
-                Toast.makeText(CowRegistrationActivity.this, Locale.getStringInLocale("radio_off", CowRegistrationActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
-                Toast.makeText(CowRegistrationActivity.this, Locale.getStringInLocale("server_not_receive_sms", CowRegistrationActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.CODE_NUMBER_IN_USE)){
-                Toast.makeText(CowRegistrationActivity.this, Locale.getStringInLocale("number_in_use", CowRegistrationActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.ACKNOWLEDGE_OK)) {
-
-                clearEditTextDataCache();
-
-                Log.d(TAG,"data successfully sent to server");
-                if(farmer.getMode().equals(Farmer.MODE_INITIAL_REGISTRATION)) {
-                    Utils.showSuccessfullRegistration(CowRegistrationActivity.this,null);
-                }
-                else {
-                    //get updated farmer data
-                    DataUpdateThread dataUpdateThread = new DataUpdateThread();
-                    dataUpdateThread.execute(1);
-
-                    Toast.makeText(CowRegistrationActivity.this, Locale.getStringInLocale("event_successfully_recorded",CowRegistrationActivity.this), Toast.LENGTH_LONG).show();
-                    Intent intent = new Intent(CowRegistrationActivity.this, EventsActivity.class);
-                    startActivity(intent);
-                }
-            }
-        }
-    }
-
-    private class DataUpdateThread extends AsyncTask<Integer, Integer, Integer>{
-
-        @Override
-        protected Integer doInBackground(Integer... params)
-        {
-            JSONObject jsonObject=new JSONObject();
-            try
-            {
-                TelephonyManager telephonyManager=(TelephonyManager)CowRegistrationActivity.this.getSystemService(Context.TELEPHONY_SERVICE);
-                String simcardSN  = telephonyManager.getSimSerialNumber();
-                if(simcardSN != null){
-                    jsonObject.put("simCardSN",params[0]);
-                    //jsonObject.put("mobileNumber",params[1]);
-                    String result = DataHandler.sendDataToServer(CowRegistrationActivity.this, jsonObject.toString(),DataHandler.FARMER_AUTHENTICATION_URL, true);
-                    JSONObject farmerData = new JSONObject(result);
-                    DataHandler.saveFarmerData(CowRegistrationActivity.this, farmerData);
-                    return 1;
-
-                }
-            }
-            catch (JSONException e)
-            {
-                e.printStackTrace();
-            }
-            return null;
-        }
-    }
-}
\ No newline at end of file
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/CowSelectionActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/CowSelectionActivity.java
deleted file mode 100644
index 5ff8d5c..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/CowSelectionActivity.java
+++ /dev/null
@@ -1,383 +0,0 @@
-package org.cgiar.ilri.mistro.farmer;
-
-
-import android.app.ProgressDialog;
-import android.content.Intent;
-import android.os.AsyncTask;
-import android.os.Bundle;
-import android.util.Log;
-import android.view.View;
-import android.widget.AdapterView;
-import android.widget.ArrayAdapter;
-import android.widget.Button;
-import android.widget.Spinner;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import com.actionbarsherlock.app.SherlockActivity;
-import com.actionbarsherlock.view.Menu;
-import com.actionbarsherlock.view.MenuInflater;
-import com.actionbarsherlock.view.MenuItem;
-
-import org.cgiar.ilri.mistro.farmer.backend.DataHandler;
-import org.cgiar.ilri.mistro.farmer.backend.Locale;
-import org.cgiar.ilri.mistro.farmer.carrier.Cow;
-import org.cgiar.ilri.mistro.farmer.carrier.Farmer;
-import org.json.JSONArray;
-import org.json.JSONObject;
-
-import java.util.ArrayList;
-import java.util.List;
-
-
-public class CowSelectionActivity extends SherlockActivity implements MistroActivity, AdapterView.OnItemSelectedListener, View.OnClickListener {
-    private static final String TAG = "CowSelectionActivity";
-    public static final String KEY_ADMIN_DATA = "adminData";
-
-    private Menu menu;
-
-    private TextView filterFarmersTV;
-    private Spinner filterFarmersS;
-    private TextView selectFarmerTV;
-    private Spinner selectFarmerS;
-    private TextView selectCowTV;
-    private Spinner selectCowS;
-    private Button selectB;
-    private Button backB;
-
-    private JSONObject adminData;
-    private List<Farmer> allFarmers;
-    private List<Farmer> filteredFarmers;
-    private List<String> filters;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_cow_selection);
-
-        filterFarmersTV = (TextView)findViewById(R.id.filter_farmers_tv);
-        filterFarmersS = (Spinner)findViewById(R.id.filter_farmers_s);
-        filterFarmersS.setOnItemSelectedListener(this);
-        selectFarmerTV = (TextView)findViewById(R.id.select_farmer_tv);
-        selectFarmerS = (Spinner)findViewById(R.id.select_farmer_s);
-        selectFarmerS.setOnItemSelectedListener(this);
-        selectCowTV = (TextView)findViewById(R.id.select_cow_tv);
-        selectCowS = (Spinner)findViewById(R.id.select_cow_s);
-        selectB = (Button)findViewById(R.id.select_b);
-        selectB.setOnClickListener(this);
-        backB = (Button)findViewById(R.id.back_b);
-        backB.setOnClickListener(this);
-
-        initTextInViews();
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-
-        Bundle bundle=this.getIntent().getExtras();
-        if(bundle != null){
-            String adminJSONString = bundle.getString(KEY_ADMIN_DATA);
-            loadAdminData(adminJSONString);
-        }
-    }
-
-    public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu) {
-        MenuInflater inflater = getSupportMenuInflater();
-        inflater.inflate(R.menu.farmer_selection, menu);
-        this.menu = menu;
-        initMenuText();
-        return true;
-    }
-
-    public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem item) {
-        // Handle item selection
-        if(MistroActivity.Language.processLanguageMenuItemSelected(this, this, item)){
-            return true;
-        }
-        else if(item.getItemId() == R.id.action_back_main_menu) {
-            Intent intent = new Intent(this, MainMenu.class);
-            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_ADMIN);
-            intent.putExtra(MainMenu.KEY_ADMIN_DATA, adminData.toString());
-            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-            startActivity(intent);
-        }
-        return false;
-    }
-
-    private void initMenuText(){
-        if(this.menu != null){
-            MenuItem mainMenuMI = menu.findItem(R.id.action_back_main_menu);
-            mainMenuMI.setTitle(Locale.getStringInLocale("back_to_main_menu", this));
-        }
-    }
-
-    @Override
-    public void initTextInViews() {
-        this.setTitle(Locale.getStringInLocale("select_cow", this));
-
-        filterFarmersTV.setText(Locale.getStringInLocale("filter_farmers", this));
-        selectFarmerTV.setText(Locale.getStringInLocale("select_farmer", this));
-        selectCowTV.setText(Locale.getStringInLocale("select_cow", this));
-
-        selectB.setText(Locale.getStringInLocale("select", this));
-        backB.setText(Locale.getStringInLocale("back", this));
-    }
-
-    private void loadAdminData(String adminJSONString){
-        try {
-            adminData = new JSONObject(adminJSONString);
-
-            filters = new ArrayList<String>();
-            filters.add(Locale.getStringInLocale("all_farmers", this));
-            filters.add(Locale.getStringInLocale("farmers_no_epersonnel", this));
-            if(adminData.getInt("is_super") == 1){//admin is super
-                JSONArray allEPersonnel = adminData.getJSONArray("extension_personnel");
-                for(int i = 0; i < allEPersonnel.length(); i++){
-                    JSONObject currEPersonnel = allEPersonnel.getJSONObject(i);
-                    filters.add(Locale.getStringInLocale("farmers_tied_to", this) + " " + currEPersonnel.getString("name"));
-                }
-            }
-            else{
-                filters.add(Locale.getStringInLocale("farmers_tied_to", this) +" "+ adminData.getString("name"));
-            }
-            ArrayAdapter<String> filterArrayAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, filters);
-            filterArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-            filterFarmersS.setAdapter(filterArrayAdapter);
-
-            JSONArray farmerData = adminData.getJSONArray("farmers");
-
-            allFarmers = new ArrayList<Farmer>(farmerData.length());
-            filteredFarmers = new ArrayList<Farmer>(farmerData.length());
-            for (int i = 0; i < farmerData.length(); i++) {
-                Farmer currFarmer = new Farmer(farmerData.getJSONObject(i));
-                allFarmers.add(currFarmer);
-                filteredFarmers.add(currFarmer);
-            }
-
-            List<String> farmerNames = new ArrayList<String>(filteredFarmers.size());
-            for (int i = 0; i < filteredFarmers.size(); i++) {
-                Farmer currFarmer = filteredFarmers.get(i);
-                farmerNames.add(currFarmer.getFullName());
-            }
-
-            ArrayAdapter<String> farmerArrayAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, farmerNames);
-            farmerArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-            selectFarmerS.setAdapter(farmerArrayAdapter);
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
-    @Override
-    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
-        if(parent == selectFarmerS){
-
-            List<String> blankList = new ArrayList<String>();
-            ArrayAdapter<String> cowArrayAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, blankList);
-            cowArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-            selectCowS.setAdapter(cowArrayAdapter);
-
-            if(selectFarmerS.getSelectedItemPosition() != -1){
-                Farmer selectedFarmer = filteredFarmers.get(selectFarmerS.getSelectedItemPosition());
-                List<Cow> cows = selectedFarmer.getCows();
-                if(cows == null){
-                    GetCowDataThread getCowDataThread = new GetCowDataThread(selectFarmerS.getSelectedItemPosition());
-                    getCowDataThread.execute(selectedFarmer.getId());
-                }
-                else{
-                    loadCowData(cows);
-                }
-            }
-        }
-
-        if(parent == filterFarmersS){
-            if(filterFarmersS.getSelectedItemPosition() == 0){//all farmers
-                List<Farmer> newlyFilteredFarmers = this.allFarmers;
-                setFilteredFarmerList(newlyFilteredFarmers);
-            }
-            else if(filterFarmersS.getSelectedItemPosition() == 1){//farmers without extension personnel
-                List<Farmer> newlyFilteredFarmers = new ArrayList<Farmer>();
-                for(int i =0; i<allFarmers.size(); i++){
-                    Farmer currFarmer = allFarmers.get(i);
-                    if(DataHandler.isNull(currFarmer.getExtensionPersonnel()) || currFarmer.getExtensionPersonnel().length() == 0){
-                        newlyFilteredFarmers.add(currFarmer);
-                    }
-                    else{
-                        //Log.d(TAG, currFarmer.getExtensionPersonnel()+" does not qualify to be null");
-                    }
-                }
-
-                setFilteredFarmerList(newlyFilteredFarmers);
-            }
-            else if(filterFarmersS.getSelectedItemPosition() != -1){
-                String selection = filters.get(filterFarmersS.getSelectedItemPosition());
-
-                List<Farmer> newlyFilteredFarmers = new ArrayList<Farmer>();
-                for(int i = 0; i < allFarmers.size(); i++){
-                    Farmer currFarmer = allFarmers.get(i);
-                    if(currFarmer.getExtensionPersonnel() != null && currFarmer.getExtensionPersonnel().length() > 0 &&
-                            selection.contains(currFarmer.getExtensionPersonnel())){
-                        newlyFilteredFarmers.add(currFarmer);
-                    }
-                    else{
-                        //Log.d(TAG, currFarmer.getExtensionPersonnel()+" does not match "+selection);
-                    }
-                }
-
-                setFilteredFarmerList(newlyFilteredFarmers);
-            }
-        }
-    }
-
-    private void setFilteredFarmerList(List<Farmer> filteredFarmers){
-        List<String> farmerNames = new ArrayList<String>(filteredFarmers.size());
-        for (int i = 0; i < filteredFarmers.size(); i++) {
-            Farmer currFarmer = filteredFarmers.get(i);
-            farmerNames.add(currFarmer.getFullName());
-        }
-
-        ArrayAdapter<String> farmerArrayAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, farmerNames);
-        farmerArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        selectFarmerS.setAdapter(farmerArrayAdapter);
-
-        if(this.filteredFarmers != filteredFarmers) {
-            this.filteredFarmers = filteredFarmers;
-        }
-    }
-
-    private void loadCowData(List<Cow> cows){
-        List<String> cowNames = new ArrayList<String>();
-        for(int i = 0; i < cows.size(); i++){
-            String name = cows.get(i).getName();
-            String etn = cows.get(i).getEarTagNumber();
-
-            String dispName = "";
-            if(DataHandler.isNull(name) || name.length() == 0){
-                dispName = etn;
-            }
-            else if(DataHandler.isNull(etn) || etn.length() == 0){
-                dispName = name;
-            }
-            else{
-                dispName = name + " (" + etn + ")";
-            }
-            cowNames.add(dispName);
-        }
-
-        ArrayAdapter<String> cowArrayAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, cowNames);
-        cowArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        selectCowS.setAdapter(cowArrayAdapter);
-    }
-
-    @Override
-    public void onNothingSelected(AdapterView<?> parent) {
-
-    }
-
-    @Override
-    public void onClick(View v) {
-        if(v == selectB){
-            if(selectFarmerS.getSelectedItemPosition() != -1){
-                Farmer selectedFarmer = filteredFarmers.get(selectFarmerS.getSelectedItemPosition());
-                if(selectedFarmer != null){
-                    if(selectCowS.getSelectedItemPosition() != -1){
-                        List<Cow> cows = selectedFarmer.getCows();
-                        if(cows != null){
-                            Cow selectedCow = cows.get(selectCowS.getSelectedItemPosition());
-                            if(selectedCow != null){
-                                Log.d(TAG, "Cow index = "+selectCowS.getSelectedItemPosition());
-                                Log.d(TAG, "Number of cows = "+cows.size());
-                                Intent intent=new Intent(this, EditCowActivity.class);
-                                intent.putExtra(MainMenu.KEY_ADMIN_DATA, adminData.toString());
-                                intent.putExtra(EditCowActivity.KEY_INDEX, selectCowS.getSelectedItemPosition());
-                                intent.putExtra(EditCowActivity.KEY_NUMBER_OF_COWS, cows.size());
-                                Bundle bundle=new Bundle();
-                                bundle.putParcelable(Farmer.PARCELABLE_KEY, selectedFarmer);
-                                intent.putExtras(bundle);
-                                startActivity(intent);
-                            }
-                        }
-                    }
-                }
-            }
-        }
-        else if(v == backB){
-            Intent intent = new Intent(this, MainMenu.class);
-            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_ADMIN);
-            intent.putExtra(MainMenu.KEY_ADMIN_DATA, adminData.toString());
-            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-            startActivity(intent);
-        }
-    }
-
-    private class GetCowDataThread extends AsyncTask<Integer, Integer, String>{
-
-        private int farmerIndex;
-        private ProgressDialog progressDialog;
-
-        public GetCowDataThread(int farmerIndex){
-            this.farmerIndex = farmerIndex;
-        }
-
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-            progressDialog = ProgressDialog.show(CowSelectionActivity.this, "", Locale.getStringInLocale("loading_please_wait", CowSelectionActivity.this), true);
-        }
-
-        @Override
-        protected String doInBackground(Integer... params) {
-            try {
-                JSONObject jsonObject = new JSONObject();
-                jsonObject.put("id", params[0]);
-                return DataHandler.sendDataToServer(CowSelectionActivity.this, jsonObject.toString(), DataHandler.ADMIN_GET_COWS_URL,true);
-            }
-            catch (Exception e){
-                e.printStackTrace();
-            }
-            return null;
-        }
-
-        @Override
-        protected void onPostExecute(String result) {
-            super.onPostExecute(result);
-            progressDialog.dismiss();
-
-            if(result==null){
-                String httpError = DataHandler.getSharedPreference(CowSelectionActivity.this, "http_error", "No Error thrown to application. Something must be really wrong");
-                Toast.makeText(CowSelectionActivity.this, httpError, Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
-                Toast.makeText(CowSelectionActivity.this, Locale.getStringInLocale("generic_sms_error", CowSelectionActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
-                Toast.makeText(CowSelectionActivity.this, Locale.getStringInLocale("no_service", CowSelectionActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
-                Toast.makeText(CowSelectionActivity.this, Locale.getStringInLocale("radio_off", CowSelectionActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
-                Toast.makeText(CowSelectionActivity.this, Locale.getStringInLocale("server_not_receive_sms", CowSelectionActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else{
-                try{
-                    Log.d(TAG, "fetched cows  = "+result);
-                    JSONArray cowJsonArray = new JSONArray(result);
-                    filteredFarmers.get(farmerIndex).setCows(cowJsonArray);
-                    loadCowData(filteredFarmers.get(farmerIndex).getCows());
-
-                    //add the cow list to the copy of the farmer object in the allFarmers list
-                    for(int i = 0; i < allFarmers.size(); i++){
-                        if(allFarmers.get(i).getId() == filteredFarmers.get(farmerIndex).getId()){
-                            allFarmers.get(i).setCows(cowJsonArray);
-                        }
-                    }
-                }
-                catch (Exception e){
-                    e.printStackTrace();
-                }
-            }
-        }
-    }
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/EditCowActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/EditCowActivity.java
deleted file mode 100644
index 03dfc58..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/EditCowActivity.java
+++ /dev/null
@@ -1,1294 +0,0 @@
-package org.cgiar.ilri.mistro.farmer;
-
-import android.app.AlertDialog;
-import android.app.DatePickerDialog;
-import android.app.Dialog;
-import android.app.ProgressDialog;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.os.AsyncTask;
-import android.os.Bundle;
-import android.util.Log;
-import android.util.SparseBooleanArray;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.ArrayAdapter;
-import android.widget.AutoCompleteTextView;
-import android.widget.Button;
-import android.widget.CheckBox;
-import android.widget.CompoundButton;
-import android.widget.DatePicker;
-import android.widget.EditText;
-import android.widget.ListView;
-import android.widget.ScrollView;
-import android.widget.Spinner;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import com.actionbarsherlock.app.SherlockActivity;
-import com.actionbarsherlock.view.Menu;
-import com.actionbarsherlock.view.MenuInflater;
-import com.actionbarsherlock.view.MenuItem;
-
-import org.cgiar.ilri.mistro.farmer.backend.DataHandler;
-import org.cgiar.ilri.mistro.farmer.backend.Locale;
-import org.cgiar.ilri.mistro.farmer.carrier.Cow;
-import org.cgiar.ilri.mistro.farmer.carrier.Dam;
-import org.cgiar.ilri.mistro.farmer.carrier.Farmer;
-import org.cgiar.ilri.mistro.farmer.carrier.Sire;
-import org.json.JSONArray;
-import org.json.JSONObject;
-
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.GregorianCalendar;
-import java.util.List;
-
-
-public class EditCowActivity extends SherlockActivity implements MistroActivity,
-        View.OnClickListener, DatePickerDialog.OnDateSetListener, ListView.OnItemClickListener,
-        Spinner.OnItemSelectedListener, View.OnFocusChangeListener, CheckBox.OnCheckedChangeListener, View.OnLongClickListener{
-
-    private static final String TAG = "EditCowActivity";
-    public static final String KEY_INDEX = "cowIndex";
-    public static final String KEY_NUMBER_OF_COWS = "numberOfCows";
-
-    private Menu menu;
-
-    private final String dateFormat="dd/MM/yyyy";
-    private TextView nameETNHintTV;
-    private TextView nameTV;
-    private EditText nameET;
-    private TextView earTagNumberTV;
-    private EditText earTagNumberET;
-    private TextView ageOrDOBHintTV;
-    private TextView ageTV;
-    private Spinner ageS;
-    private EditText ageET;
-    private TextView dateOfBirthTV;
-    private EditText dateOfBirthET;
-    private TextView breedTV;
-    private EditText breedET;
-    private TextView sexTV;
-    private Spinner sexS;
-    private TextView milkingStatusTV;
-    private Spinner milkingStatusS;
-    private TextView inCalfStatusTV;
-    private Spinner inCalfStatusS;
-    private TextView deformityTV;
-    private EditText deformityET;
-    private TextView serviceTypeTV;
-    private Spinner serviceTypeS;
-    private TextView sireTV;
-    private Spinner sireS;
-    private AutoCompleteTextView sireACTV;
-    private TextView sireOwnerTV;
-    private Spinner sireOwnerS;
-    private TextView sireOwnerNameTV;
-    private EditText sireOwnerNameET;
-    private TextView strawNumberTV;
-    private EditText strawNumberET;
-    private TextView damTV;
-    private Spinner damS;
-    private AutoCompleteTextView damACTV;
-    private TextView embryoNumberTV;
-    private EditText embryoNumberET;
-    private TextView countryOfOriginTV;
-    private AutoCompleteTextView countryOfOriginACTV;
-    private TextView commonCountriesTV;
-    private Spinner commonCountriesS;
-    private Button cancelB;
-    private Button editB;
-    private DatePickerDialog datePickerDialog;
-    private Dialog breedDialog;
-    private ScrollView breedDialogSV;
-    private ListView breedLV;
-    private Button dialogBreedOkayB;
-    private Dialog deformityDialog;
-    private ScrollView deformitySV;
-    private ListView deformityLV;
-    private CheckBox noDeformityCB;
-    private EditText specifyET;
-    private Button dialogDeformityOkayB;
-
-    private boolean cacheData;
-    private String[] breeds;
-    private String[] deformities;
-    private String deformityOSpecifyText;
-    private int selectedBreeds;
-    private Farmer farmer;
-    private Cow thisCow;
-    private int index;
-    private int numberOfCows;
-    private List<Cow> validSires;
-    private List<Cow> validDams;
-    private int selectedSireOwner;
-    private String adminData;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_edit_cow);
-
-        cacheData = true;
-        selectedBreeds = 0;
-        Bundle bundle = this.getIntent().getExtras();
-        if(bundle!=null) {
-            index=bundle.getInt(KEY_INDEX);
-            numberOfCows=bundle.getInt(KEY_NUMBER_OF_COWS);
-        }
-
-        nameETNHintTV = (TextView) this.findViewById(R.id.name_eta_hint_tv);
-        nameTV=(TextView)this.findViewById(R.id.name_tv);
-        nameET=(EditText)this.findViewById(R.id.name_et);
-        earTagNumberTV=(TextView)this.findViewById(R.id.ear_tag_number_tv);
-        earTagNumberET=(EditText)this.findViewById(R.id.ear_tag_number_et);
-        ageOrDOBHintTV = (TextView) this.findViewById(R.id.age_or_dob_hint_tv);
-        ageTV=(TextView)this.findViewById(R.id.age_tv);
-        ageS=(Spinner)this.findViewById(R.id.age_s);
-        ageET=(EditText)this.findViewById(R.id.age_et);
-        dateOfBirthTV=(TextView)this.findViewById(R.id.date_of_birth_tv);
-        //dateOfBirthTV.setVisibility(TextView.GONE); //date of birth appears not to be necessary
-        dateOfBirthET=(EditText)this.findViewById(R.id.date_of_birth_et);
-        dateOfBirthET.setOnFocusChangeListener(this);
-        dateOfBirthET.setOnClickListener(this);
-        dateOfBirthET.setOnLongClickListener(this);
-        //dateOfBirthET.setVisibility(TextView.GONE); //date of birth appears not to be necessary
-        breedTV=(TextView)this.findViewById(R.id.breed_tv);
-        breedET=(EditText)this.findViewById(R.id.breed_et);
-        breedET.setOnFocusChangeListener(this);
-        breedET.setOnClickListener(this);
-        sexTV=(TextView)this.findViewById(R.id.sex_tv);
-        sexS=(Spinner)this.findViewById(R.id.sex_s);
-        sexS.setOnItemSelectedListener(this);
-        milkingStatusTV = (TextView)this.findViewById(R.id.milking_status_tv);
-        milkingStatusS = (Spinner)this.findViewById(R.id.milking_status_s);
-        inCalfStatusTV = (TextView)this.findViewById(R.id.in_calf_status_tv);
-        inCalfStatusS = (Spinner)this.findViewById(R.id.in_calf_status_s);
-        deformityTV=(TextView)this.findViewById(R.id.deformity_tv);
-        deformityET=(EditText)this.findViewById(R.id.deformity_et);
-        deformityET.setOnFocusChangeListener(this);
-        deformityET.setOnClickListener(this);
-        serviceTypeTV = (TextView)this.findViewById(R.id.service_type_tv);
-        serviceTypeS = (Spinner)this.findViewById(R.id.service_type_s);
-        serviceTypeS.setOnItemSelectedListener(this);
-        sireTV = (TextView)this.findViewById(R.id.sire_tv);
-        sireS = (Spinner)this.findViewById(R.id.sire_s);
-        sireACTV = (AutoCompleteTextView)this.findViewById(R.id.sire_actv);
-        sireOwnerTV = (TextView)this.findViewById(R.id.sire_owner_tv);
-        sireOwnerS = (Spinner)this.findViewById(R.id.sire_owner_s);
-        sireOwnerS.setOnItemSelectedListener(this);
-        sireOwnerNameTV = (TextView)this.findViewById(R.id.sire_owner_name_tv);
-        sireOwnerNameET = (EditText)this.findViewById(R.id.sire_owner_name_et);
-        strawNumberTV = (TextView)this.findViewById(R.id.straw_number_tv);
-        strawNumberET = (EditText)this.findViewById(R.id.straw_number_et);
-        damTV = (TextView)this.findViewById(R.id.dam_tv);
-        damS = (Spinner)this.findViewById(R.id.dam_s);
-        damACTV = (AutoCompleteTextView)this.findViewById(R.id.dam_actv);
-        embryoNumberTV = (TextView)this.findViewById(R.id.embryo_number_tv);
-        embryoNumberET = (EditText)this.findViewById(R.id.embryo_number_et);
-        countryOfOriginTV = (TextView)this.findViewById(R.id.country_of_origin_tv);
-        countryOfOriginACTV = (AutoCompleteTextView)this.findViewById(R.id.country_of_origin_actv);
-        commonCountriesTV = (TextView)this.findViewById(R.id.common_countries_tv);
-        commonCountriesS = (Spinner)this.findViewById(R.id.common_countries_s);
-        commonCountriesS.setOnItemSelectedListener(this);
-        cancelB = (Button)this.findViewById(R.id.cancel_b);
-        cancelB.setOnClickListener(this);
-        editB = (Button)this.findViewById(R.id.edit_b);
-        editB.setOnClickListener(this);
-        breedDialog=new Dialog(this);
-        breedDialog.setContentView(R.layout.dialog_breed);
-        dialogBreedOkayB=(Button)breedDialog.findViewById(R.id.dialog_breed_okay_b);
-        dialogBreedOkayB.setOnClickListener(this);
-        breedDialogSV=(ScrollView)breedDialog.findViewById(R.id.dialog_breed_sv);
-
-        int activityHeight = this.getResources().getDisplayMetrics().heightPixels;
-        breedDialogSV.getLayoutParams().height = (int)(activityHeight * 0.70);
-
-        breedLV=(ListView)breedDialog.findViewById(R.id.breed_lv);
-        breedLV.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
-        breedLV.setOnItemClickListener(this);
-        deformityDialog =new Dialog(this);
-        deformityDialog.setContentView(R.layout.dialog_deformity);
-        deformitySV = (ScrollView)deformityDialog.findViewById(R.id.deformity_sv);
-
-        deformitySV.getLayoutParams().height = (int)(activityHeight * 0.70);
-
-        deformityLV =(ListView) deformityDialog.findViewById(R.id.deformity_lv);
-        deformityLV.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
-        deformityLV.setOnItemClickListener(this);
-        specifyET=(EditText)deformityDialog.findViewById(R.id.specify_et);
-        noDeformityCB = (CheckBox)deformityDialog.findViewById(R.id.no_deformity_cb);
-        noDeformityCB.setOnCheckedChangeListener(this);
-        dialogDeformityOkayB =(Button) deformityDialog.findViewById(R.id.dialog_deformity_okay_b);
-        dialogDeformityOkayB.setOnClickListener(this);
-
-        initTextInViews();
-    }
-
-    public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu) {
-        MenuInflater inflater = getSupportMenuInflater();
-        inflater.inflate(R.menu.edit_cow, menu);
-        this.menu = menu;
-        initMenuText();
-        return true;
-    }
-
-    public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem item) {
-        // Handle item selection
-        if(MistroActivity.Language.processLanguageMenuItemSelected(this, this, item)){
-            return true;
-        }
-        else if(item.getItemId() == R.id.action_back_main_menu) {
-            DialogInterface.OnClickListener onClickListener = new DialogInterface.OnClickListener() {
-                @Override
-                public void onClick(DialogInterface dialog, int which) {
-                    if(which==DialogInterface.BUTTON_POSITIVE){
-                        dialog.dismiss();
-
-                        clearEditTextDataCache();
-
-                        Intent intent = new Intent(EditCowActivity.this, MainMenu.class);
-                        intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_ADMIN);
-                        intent.putExtra(MainMenu.KEY_ADMIN_DATA, adminData);
-                        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-                        startActivity(intent);
-                    }
-                    else{
-                        dialog.cancel();
-                    }
-                }
-            };
-            AlertDialog mainMenuDialog = Utils.createMainMenuDialog(this, onClickListener);
-            mainMenuDialog.show();
-        }
-        return false;
-    }
-
-    private void cacheEditTextData(){
-        if(cacheData) {
-            Log.i(TAG, "Edit text data cached");
-            //Incase the activity is hidden partially/fully save the data in edittexts
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_NAME, nameET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_EAR_TAG_NUMBER, earTagNumberET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_AGE, ageET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DATE_OF_BIRTH, dateOfBirthET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_BREED, breedET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DEFORMITY, deformityET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_STRAW_NUMBER, strawNumberET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DAM, damACTV.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_SIRE, sireACTV.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_EMBRYO_NUMBER, embryoNumberET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_COUNTRY_OF_ORIGIN, countryOfOriginACTV.getText().toString());
-        }
-        else{
-            Log.i(TAG, "Edit text data NOT cached");
-        }
-    }
-
-    private void restoreEditTextData(){
-        Log.i(TAG, "Edit text data restored");
-        //incase the activity was hidden partially for a moment, restore what the user had already entered
-        nameET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_NAME, ""));
-        earTagNumberET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_EAR_TAG_NUMBER, ""));
-        ageET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_AGE, ""));
-        dateOfBirthET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_DATE_OF_BIRTH, ""));
-        breedET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_BREED, ""));
-        deformityET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_DEFORMITY, ""));
-        strawNumberET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_STRAW_NUMBER, ""));
-        damACTV.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_DAM, ""));
-        sireACTV.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_SIRE, ""));
-        embryoNumberET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_EMBRYO_NUMBER, ""));
-        countryOfOriginACTV.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_COUNTRY_OF_ORIGIN, ""));
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-
-        Bundle bundle=this.getIntent().getExtras();
-        if(bundle != null) {
-            adminData=bundle.getString(MainMenu.KEY_ADMIN_DATA);
-            farmer=bundle.getParcelable(Farmer.PARCELABLE_KEY);
-            if(farmer!=null){
-                thisCow = farmer.getCow(index);
-                if(thisCow != null) {
-                    Log.d(TAG, "ID for current cow is "+String.valueOf(thisCow.getId()));
-                    Log.d(TAG, "Index from bundle = "+String.valueOf(index));
-                    Log.d(TAG, "Number of animals from bundle = "+String.valueOf(numberOfCows));
-                    nameET.setText(thisCow.getName());
-                    earTagNumberET.setText(thisCow.getEarTagNumber());
-                    dateOfBirthET.setText(thisCow.getDateOfBirth());
-                    ageET.setText((thisCow.getAge()==-1) ? "":String.valueOf(thisCow.getAge()));
-                    String[] ageTypesInEN = Locale.getArrayInLocale("age_type_array",this,Locale.LOCALE_ENGLISH);
-                    for(int i = 0; i < ageTypesInEN.length; i++) {
-                        if(ageTypesInEN[i].equals("Days") && thisCow.getAgeType().equals(Cow.AGE_TYPE_DAY)) {
-                            ageS.setSelection(i);
-                        }
-                        else if(ageTypesInEN[i].equals("Months") && thisCow.getAgeType().equals(Cow.AGE_TYPE_MONTH)) {
-                            ageS.setSelection(i);
-                        }
-                        else if(ageTypesInEN[i].equals("Years") && thisCow.getAgeType().equals(Cow.AGE_TYPE_YEAR)) {
-                            ageS.setSelection(i);
-                        }
-                    }
-                    List<String> savedBreeds=thisCow.getBreeds(this);//returns breeds in current locale
-                    Log.d(TAG, "Cow breeds are "+savedBreeds);
-                    String breed="";
-                    for (int i=0;i<savedBreeds.size();i++) {
-                        if(i==0) {
-                            breed=savedBreeds.get(i);
-                        }
-                        else {
-                            breed=breed+", "+savedBreeds.get(i);
-                        }
-                        Log.d(TAG, "current breed index =  "+String.valueOf(i));
-                        Log.d(TAG, "saved breeds length =  "+String.valueOf(savedBreeds.size()));
-                    }
-                    breedET.setText(breed);
-                    String[] sexInEN = Locale.getArrayInLocale("sex_array", this, Locale.LOCALE_ENGLISH);
-                    for(int i = 0; i < sexInEN.length; i++) {
-                        if(sexInEN[i].equals("Female") && thisCow.getSex().equals(Cow.SEX_FEMALE)) {
-                            sexS.setSelection(i);
-                            toggleFemaleCowViewsVisibility();
-                            String[] milkingStatusInEN = Locale.getArrayInLocale("cow_status_array", this, Locale.LOCALE_ENGLISH);
-                            String[] inCalfArrayInEN = Locale.getArrayInLocale("cow_in_calf_array", this, Locale.LOCALE_ENGLISH);
-                            for(int j = 0; j < milkingStatusInEN.length; j++){
-                                Log.d(TAG, " ********** Saved milking status = "+thisCow.getMilkingStatus());
-                                if(milkingStatusInEN[j].equals(thisCow.getMilkingStatus())){
-                                    milkingStatusS.setSelection(j);
-                                }
-                            }
-                            for(int j = 0; j < inCalfArrayInEN.length; j++){
-                                if(inCalfArrayInEN[j].equals(Cow.COW_IN_CALF) && thisCow.isInCalf()){
-                                    inCalfStatusS.setSelection(j);
-                                }
-                                else if(inCalfArrayInEN[j].equals(Cow.COW_NOT_IN_CALF) && !thisCow.isInCalf()){
-                                    inCalfStatusS.setSelection(j);
-                                }
-                            }
-
-                        }
-                        else if(sexInEN[i].equals("Male") && thisCow.getSex().equals(Cow.SEX_MALE)) {
-                            sexS.setSelection(i);
-                        }
-                    }
-                    List<String> savedDeformities=thisCow.getDeformities(this);//returns deformities in current locale
-                    String deformity="";
-                    for (int i=0;i<savedDeformities.size();i++) {
-                        if(i==0) {
-                            deformity=savedDeformities.get(i);
-                        }
-                        else {
-                            deformity=deformity+", "+savedDeformities.get(i);
-                        }
-                        if(savedDeformities.get(i).equals(deformities[deformities.length-1])) {
-                            deformityOSpecifyText = thisCow.getOtherDeformity();
-                        }
-                    }
-                    deformityET.setText(deformity);
-
-                    //if(farmer.getMode().equals(Farmer.MODE_INITIAL_REGISTRATION)) {
-
-                        List<Cow> allCows = farmer.getCows();
-                        validSires = new ArrayList<Cow>();
-                        validSires.add(new Cow(false));
-                        List<String> validSireNames = new ArrayList<String>();
-                        validSireNames.add("");
-                        int sireSelection = 0;
-
-                        validDams = new ArrayList<Cow>();
-                        validDams.add(new Cow(false));
-                        List<String> validDamNames = new ArrayList<String>();
-                        int damSelection = -1;
-                        validDamNames.add("");
-                        for(int i = 0; i < allCows.size(); i++) {
-                            if(i != index) {
-                                if(allCows.get(i).getEarTagNumber() != null && allCows.get(i).getEarTagNumber().length() > 0 && allCows.get(i).getSex().equals(Cow.SEX_MALE)) {
-                                    validSires.add(allCows.get(i));
-                                    validSireNames.add(allCows.get(i).getEarTagNumber()+" ("+allCows.get(i).getName()+")");
-                                    if(thisCow.getServiceType().equals(Cow.SERVICE_TYPE_BULL)) {
-                                        if(thisCow.getSire().getEarTagNumber().equals(allCows.get(i).getEarTagNumber())) {
-                                            sireSelection = validSires.size() - 1;
-                                        }
-                                    }
-                                }
-                                else if(allCows.get(i).getEarTagNumber() != null && allCows.get(i).getEarTagNumber().length() > 0 && allCows.get(i).getSex().equals(Cow.SEX_FEMALE)) {
-                                    validDams.add(allCows.get(i));
-                                    validDamNames.add(allCows.get(i).getEarTagNumber()+" ("+allCows.get(i).getName()+")");
-                                    if(thisCow.getServiceType().equals(Cow.SERVICE_TYPE_BULL) || thisCow.getServiceType().equals(Cow.SERVICE_TYPE_AI)) {
-                                        if(thisCow.getDam().getEarTagNumber().equals(allCows.get(i).getEarTagNumber())) {
-                                            damSelection = validDams.size() - 1;
-                                        }
-                                    }
-                                }
-                            }
-                        }
-
-                        selectedSireOwner = -1;
-                        String[] sireOwners = Locale.getArrayInLocale("bull_owners", this, Locale.LOCALE_ENGLISH);
-                        for(int i = 0; i < sireOwners.length; i++){
-                            if(sireOwners[i].equals(thisCow.getSire().getOwnerType())){
-                                selectedSireOwner = i;
-                            }
-                        }
-                        sireOwnerNameET.setText(thisCow.getSire().getOwner());
-
-                        String[] serviceTypesInEN = Locale.getArrayInLocale("service_types",this,Locale.LOCALE_ENGLISH);
-
-                        ArrayAdapter<String> siresArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,validSireNames);
-                        siresArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-                        sireS.setAdapter(siresArrayAdapter);
-                        sireS.setSelection(sireSelection);
-
-                        ArrayAdapter<String> damsArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,validDamNames);
-                        damsArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-                        damS.setAdapter(damsArrayAdapter);
-                        if(damSelection != -1)
-                            damS.setSelection(damSelection);
-
-                        ArrayAdapter<String> damsACTVAdapter = new ArrayAdapter<String>(this,android.R.layout.select_dialog_item,validDamNames);
-                        damACTV.setAdapter(damsACTVAdapter);
-                        if(damSelection != -1)
-                            damACTV.setText(validDamNames.get(damSelection));
-
-                        ArrayAdapter<String> siresACTVAdapter = new ArrayAdapter<String>(this, android.R.layout.select_dialog_item, validSireNames);
-                        sireACTV.setAdapter(siresACTVAdapter);
-                        if(sireSelection != -1)
-                            sireACTV.setText(validSireNames.get(sireSelection));
-
-                        for(int i = 0; i < serviceTypesInEN.length; i++) {
-                            if(serviceTypesInEN[i].equals("Bull") && thisCow.getServiceType().equals(Cow.SERVICE_TYPE_BULL)) {
-                                serviceTypeS.setSelection(i);
-                            }
-                            else if(serviceTypesInEN[i].equals("Artificial Insemination") && thisCow.getServiceType().equals(Cow.SERVICE_TYPE_AI)) {
-                                serviceTypeS.setSelection(i);
-                                strawNumberET.setText(thisCow.getSire().getStrawNumber());
-                            }
-                            else if(serviceTypesInEN[i].equals("Embryo Transfer") && thisCow.getServiceType().equals(Cow.SERVICE_TYPE_ET)) {
-                                serviceTypeS.setSelection(i);
-                                embryoNumberET.setText(thisCow.getDam().getEmbryoNumber());
-                            }
-                        }
-                    /*}
-                    else {
-                        serviceTypeTV.setVisibility(TextView.GONE);
-                        serviceTypeS.setVisibility(Spinner.GONE);
-                        sireTV.setVisibility(TextView.GONE);
-//                        sireS.setVisibility(Spinner.GONE);
-                        strawNumberTV.setVisibility(TextView.GONE);
-                        strawNumberET.setVisibility(EditText.GONE);
-                        damTV.setVisibility(TextView.GONE);
-//                        damS.setVisibility(Spinner.GONE);
-                        sireACTV.setVisibility(AutoCompleteTextView.GONE);
-                        sireOwnerTV.setVisibility(TextView.GONE);
-                        sireOwnerS.setVisibility(Spinner.GONE);
-                        sireOwnerNameTV.setVisibility(TextView.GONE);
-                        sireOwnerNameET.setVisibility(EditText.GONE);
-                        damACTV.setVisibility(AutoCompleteTextView.GONE);
-                        embryoNumberTV.setVisibility(TextView.GONE);
-                        embryoNumberET.setVisibility(EditText.GONE);
-                    }*/
-
-                    countryOfOriginACTV.setText(thisCow.getCountryOfOrigin());
-                }
-                else {
-                    Log.d(TAG,"Cow object is null");
-                }
-            }
-            else {
-                Log.d(TAG,"Farmer object is null");
-            }
-
-        }
-
-        if(nameET.getText().toString().trim().length() == 0 && earTagNumberET.getText().toString().trim().length() == 0){
-            //means that when the activity paused the last time it did not save data to the cow object. Try to get data from shared preferences
-            restoreEditTextData();
-        }
-    }
-
-    private void clearEditTextDataCache(){
-        Log.i(TAG, "Edit text cache cleared");
-
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_NAME, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_EAR_TAG_NUMBER, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_AGE, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DATE_OF_BIRTH, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_BREED, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DEFORMITY, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_STRAW_NUMBER, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DAM, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_SIRE, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_EMBRYO_NUMBER, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_COUNTRY_OF_ORIGIN, "");
-
-        cacheData = false;
-    }
-
-    @Override
-    public void initTextInViews() {
-        String title = Locale.getStringInLocale("edit_cow",this);
-        this.setTitle(title);
-
-        nameETNHintTV.setText(" * " + Locale.getStringInLocale("ear_tag_no_or_name", this));
-        nameTV.setText(Locale.getStringInLocale("name",this));
-        earTagNumberTV.setText(Locale.getStringInLocale("ear_tag_number",this));
-
-        ageOrDOBHintTV.setText(" * " + Locale.getStringInLocale("age_or_dob", this));
-
-        ageTV.setText(Locale.getStringInLocale("age",this));
-        int ageTypeArrayID = Locale.getArrayIDInLocale("age_type_array",this);
-        if(ageTypeArrayID!=0){
-            ArrayAdapter<CharSequence> ageTypeArrayAdapter=ArrayAdapter.createFromResource(this, ageTypeArrayID, android.R.layout.simple_spinner_item);
-            ageTypeArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-            ageS.setAdapter(ageTypeArrayAdapter);
-        }
-        dateOfBirthTV.setText(Locale.getStringInLocale("date_of_birth",this));
-        breedTV.setText(Locale.getStringInLocale("breed",this));
-        sexTV.setText(" * "+Locale.getStringInLocale("sex",this));
-        int sexArrayID = Locale.getArrayIDInLocale("sex_array",this);
-        if(sexArrayID!=0) {
-            ArrayAdapter<CharSequence> sexArrayAdapter=ArrayAdapter.createFromResource(this, sexArrayID, android.R.layout.simple_spinner_item);
-            sexArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-            sexS.setAdapter(sexArrayAdapter);
-        }
-
-        milkingStatusTV.setText(" * " + Locale.getStringInLocale("cow_status", this));
-        inCalfStatusTV.setText(" * " + Locale.getStringInLocale("cow_in_calf", this));
-        ArrayAdapter<CharSequence> milkingStatusAdapter = ArrayAdapter.createFromResource(this, Locale.getArrayIDInLocale("cow_status_array", this), android.R.layout.simple_spinner_item);
-        milkingStatusAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        milkingStatusS.setAdapter(milkingStatusAdapter);
-
-        ArrayAdapter<CharSequence> inCalfAdapter = ArrayAdapter.createFromResource(this, Locale.getArrayIDInLocale("cow_in_calf_array", this), android.R.layout.simple_spinner_item);
-        inCalfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        inCalfStatusS.setAdapter(inCalfAdapter);
-
-        deformityTV.setText(Locale.getStringInLocale("deformity",this));
-        serviceTypeTV.setText(Locale.getStringInLocale("service_type_used",this));
-        int serviceTypesSireArrayID = Locale.getArrayIDInLocale("service_types",this);
-        if(serviceTypesSireArrayID!=0){
-            ArrayAdapter<CharSequence> serviceTypesAdapter = ArrayAdapter.createFromResource(this,serviceTypesSireArrayID,android.R.layout.simple_spinner_item);
-            serviceTypesAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-            serviceTypeS.setAdapter(serviceTypesAdapter);
-        }
-
-        sireTV.setText(Locale.getStringInLocale("sire",this));
-        sireOwnerTV.setText(Locale.getStringInLocale("sire_owner", this));
-
-        int sireOwnersID = Locale.getArrayIDInLocale("bull_owners", this);
-        if(sireOwnersID != 0){
-            ArrayAdapter<CharSequence> sireOwnersAdapter = ArrayAdapter.createFromResource(this,sireOwnersID,android.R.layout.simple_spinner_item);
-            sireOwnersAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-            sireOwnerS.setAdapter(sireOwnersAdapter);
-
-            if(selectedSireOwner != -1){
-                sireOwnerS.setSelection(selectedSireOwner);
-            }
-        }
-
-        sireOwnerNameTV.setText(Locale.getStringInLocale("name_sire_owner", this));
-        sireOwnerNameET.setHint(Locale.getStringInLocale("name_of_other_farmer_or_group", this));
-        damTV.setText(Locale.getStringInLocale("dam",this));
-        strawNumberTV.setText(Locale.getStringInLocale("straw_number",this));
-        embryoNumberTV.setText(Locale.getStringInLocale("embryo_number",this));
-        countryOfOriginTV.setText(Locale.getStringInLocale("other_countries",this));
-        commonCountriesTV.setText(Locale.getStringInLocale("country_of_origin",this));
-        cancelB.setText(Locale.getStringInLocale("cancel",this));
-        editB.setText(Locale.getStringInLocale("save", this));
-
-        breedDialog.setTitle(Locale.getStringInLocale("breed",this));
-        breeds=Locale.getArrayInLocale("breeds_array",this);
-        if(breeds==null) {
-            breeds = new String[1];
-            breeds[0] = "";
-        }
-        ArrayAdapter<String> breedArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,breeds);
-        breedLV.setAdapter(breedArrayAdapter);
-        dialogBreedOkayB.setText(Locale.getStringInLocale("okay",this));
-        int totalBreedSVHeight = 0;
-        for (int i = 0, len = breedArrayAdapter.getCount(); i < len; i++) {
-            View listItem = breedArrayAdapter.getView(i, null, breedLV);
-            //listItem.measure(0, 0);
-            int list_child_item_height = listItem.getLayoutParams().height + breedLV.getDividerHeight();//item height
-            totalBreedSVHeight += list_child_item_height; //
-        }
-        if(totalBreedSVHeight > 0){
-            breedLV.getLayoutParams().height = totalBreedSVHeight;
-            if(breedDialogSV.getLayoutParams().height > (totalBreedSVHeight + dialogBreedOkayB.getLayoutParams().height)){
-                breedDialogSV.getLayoutParams().height = totalBreedSVHeight + dialogBreedOkayB.getLayoutParams().height;
-            }
-        }
-
-        deformityDialog.setTitle(Locale.getStringInLocale("deformity",this));
-        deformities=Locale.getArrayInLocale("deformities_array",this);
-        if(deformities==null) {
-            deformities = new String[1];
-            deformities[0] = "";
-        }
-        ArrayAdapter<String> deformityArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,deformities);
-        deformityLV.setAdapter(deformityArrayAdapter);
-        specifyET.setHint(Locale.getStringInLocale("specify", this));
-        noDeformityCB.setText(Locale.getStringInLocale("no_deformity", this));
-        dialogDeformityOkayB.setText(Locale.getStringInLocale("okay",this));
-
-        sireACTV.setHint(Locale.getStringInLocale("enter_sire_etn", this));
-        damACTV.setHint(Locale.getStringInLocale("enter_dam_etn",this));
-
-        ArrayAdapter countryArrayAdapter = ArrayAdapter.createFromResource(this,R.array.countries,android.R.layout.select_dialog_item);
-        countryOfOriginACTV.setAdapter(countryArrayAdapter);
-        countryOfOriginACTV.setHint(Locale.getStringInLocale("specify_other_country", this));
-
-        int totalDeformitySVHeight = 0;
-        for (int i = 0, len = deformityArrayAdapter.getCount(); i < len; i++) {
-            View listItem = deformityArrayAdapter.getView(i, null, deformityLV);
-            //listItem.measure(0, 0);
-            int list_child_item_height = listItem.getLayoutParams().height + deformityLV.getDividerHeight();//item height
-            totalDeformitySVHeight += list_child_item_height; //
-        }
-
-        Log.d(TAG, "Height of no deformity checkbox = "+String.valueOf(noDeformityCB.getLayoutParams().height));
-        Log.d(TAG, "Margin top of deformity checkbox = "+String.valueOf(((ViewGroup.MarginLayoutParams)noDeformityCB.getLayoutParams()).topMargin));
-
-        if(totalDeformitySVHeight > 0){
-            deformityLV.getLayoutParams().height = totalDeformitySVHeight;
-            int svChildrenHeight = totalDeformitySVHeight +
-                    specifyET.getLayoutParams().height +
-                    noDeformityCB.getLayoutParams().height +
-                    ((ViewGroup.MarginLayoutParams)noDeformityCB.getLayoutParams()).topMargin +
-                    dialogDeformityOkayB.getLayoutParams().height +
-                    ((ViewGroup.MarginLayoutParams)dialogDeformityOkayB.getLayoutParams()).topMargin;
-
-            if(deformitySV.getLayoutParams().height > svChildrenHeight){
-                deformitySV.getLayoutParams().height= svChildrenHeight;
-            }
-        }
-
-        ArrayAdapter<CharSequence> commonCountriesArrayAdapter = ArrayAdapter.createFromResource(this,R.array.common_countries,android.R.layout.simple_spinner_item);
-        commonCountriesArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        commonCountriesS.setAdapter(commonCountriesArrayAdapter);
-    }
-
-    private void initMenuText(){
-        if(this.menu != null){
-            MenuItem mainMenuMI = menu.findItem(R.id.action_back_main_menu);
-            mainMenuMI.setTitle(Locale.getStringInLocale("back_to_main_menu", this));
-        }
-    }
-
-    @Override
-    public void onClick(View view) {
-        if(view==cancelB) {
-            Intent intent = new Intent(this, CowSelectionActivity.class);
-            intent.putExtra(CowSelectionActivity.KEY_ADMIN_DATA, adminData.toString());
-            startActivity(intent);
-        }
-        else if(view==editB) {
-            if(validateInput()) {
-                try{
-                    cacheThisCow();
-
-                    JSONObject cowJsonObject = thisCow.getJsonObject();
-                    cowJsonObject.put("farmer_id", farmer.getId());
-
-                    clearEditTextDataCache();
-
-                    Log.d(TAG, "Json Object for cow = "+cowJsonObject.toString());
-                    EditCowThread editCowThread = new EditCowThread();
-                    editCowThread.execute(cowJsonObject.toString());
-                }
-                catch (Exception e){
-                    e.printStackTrace();
-                }
-            }
-        }
-        else if(view==dateOfBirthET) {
-            dateOfBirthETClicked();
-        }
-        else if(view==breedET) {
-            breedETClicked();
-        }
-        else if(view==deformityET) {
-            deformityETClicked();
-        }
-        else if(view==dialogBreedOkayB) {
-            String selectedBreeds="";
-            SparseBooleanArray checkedBreeds=breedLV.getCheckedItemPositions();
-            for (int i=0; i<breedLV.getCount();i++)
-            {
-                if(checkedBreeds.get(i))
-                {
-                    if(!selectedBreeds.equals(""))
-                    {
-                        selectedBreeds=selectedBreeds+", "+breeds[i];
-                    }
-                    else
-                    {
-                        selectedBreeds=breeds[i];
-                    }
-                }
-            }
-            breedET.setText(selectedBreeds);
-            breedDialog.dismiss();
-        }
-        else if(view==dialogDeformityOkayB) {
-            String selectedDeformities="";
-            SparseBooleanArray checkedDeformities=deformityLV.getCheckedItemPositions();
-            for (int i=0; i<deformityLV.getCount();i++) {
-                if(checkedDeformities.get(i)) {
-                    if(!selectedDeformities.equals("")) {
-                        selectedDeformities=selectedDeformities+", "+deformities[i];
-                    }
-                    else {
-                        selectedDeformities=deformities[i];
-                    }
-                }
-            }
-            deformityET.setText(selectedDeformities);
-            deformityDialog.dismiss();
-            deformityOSpecifyText=specifyET.getText().toString();
-        }
-    }
-
-    @Override
-    public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
-        String dateString=String.valueOf(dayOfMonth)+"/"+String.valueOf(monthOfYear+1)+"/"+String.valueOf(year);//TODO: this might be a bug
-        dateOfBirthET.setText(dateString);
-        //setAgeFromDate(dateString);
-    }
-
-    @Override
-    public void onItemClick(AdapterView<?> parent, View view, int position, long id)
-    {
-        if(parent==breedLV) {
-            if(breedLV.isItemChecked(position)) {
-                selectedBreeds++;
-            }
-            else {
-                selectedBreeds--;
-            }
-            if(selectedBreeds>4) {
-                breedLV.setItemChecked(position,false);
-                selectedBreeds--;
-                Toast.makeText(this, Locale.getStringInLocale("maximum_of_four_breeds", this), Toast.LENGTH_LONG).show();
-            }
-        }
-        else if(parent==deformityLV) {
-            if(position==deformities.length-1){ //last deformity. should be other
-                if(deformityLV.isItemChecked(position)) {
-                    specifyET.setVisibility(EditText.VISIBLE);
-                }
-                else {
-                    specifyET.setVisibility(EditText.GONE);
-                    specifyET.setText("");
-                }
-            }
-
-            noDeformityCB.setChecked(false);
-        }
-    }
-
-    @Override
-    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
-        if(parent == serviceTypeS) {
-            changeServiceType();
-        }
-        else if(parent == commonCountriesS) {
-            toggleCountryOfOriginVisibility();
-        }
-        else if(parent == sireOwnerS){
-            toggleSireOwnerVisibility();
-        }
-        else if(parent == sexS){
-            toggleFemaleCowViewsVisibility();
-        }
-    }
-
-    @Override
-    public void onNothingSelected(AdapterView<?> parent) {
-
-    }
-
-    @Override
-    public void onFocusChange(View view, boolean hasFocus) {
-        if(view == dateOfBirthET && hasFocus){
-            if(dateOfBirthET.getText().toString().length() ==0 ){
-                dateOfBirthETClicked();
-            }
-        }
-        else if(view == breedET && hasFocus){
-            if(breedET.getText().toString().length() == 0){
-                breedETClicked();
-            }
-        }
-        else if(view == deformityET && hasFocus){
-            if(deformityET.getText().toString().length() == 0){
-                deformityETClicked();
-            }
-        }
-    }
-
-    @Override
-    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
-        if(buttonView.equals(noDeformityCB)){
-            if(isChecked){
-                deformityLV.clearChoices();
-                ArrayAdapter<String> deformityArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,deformities);
-                deformityLV.setAdapter(deformityArrayAdapter);
-                specifyET.setVisibility(EditText.GONE);
-                specifyET.setText("");
-
-                deformityET.setHint(Locale.getStringInLocale("no_deformity", this));
-            }
-            else{
-                deformityET.setHint("");
-            }
-        }
-    }
-
-    @Override
-    public boolean onLongClick(View v) {
-        if(v.equals(dateOfBirthET)){
-            Log.w(TAG, "About to delete date in dateOfBirthET");
-            dateOfBirthET.setText("");
-        }
-        return false;
-    }
-
-    private void dateOfBirthETClicked() {
-        Date date=null;
-        if(dateOfBirthET.getText().toString().length()>0) {
-            try {
-                date=new SimpleDateFormat(dateFormat, java.util.Locale.ENGLISH).parse(dateOfBirthET.getText().toString());
-            }
-            catch (ParseException e) {
-                e.printStackTrace();
-            }
-        }
-        if(date==null) {
-            date=new Date();
-        }
-        Calendar calendar=new GregorianCalendar();
-        calendar.setTime(date);
-        datePickerDialog=new DatePickerDialog(this,this,calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH));
-        //datePickerDialog=createDialogWithoutDateField(this,calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH));
-        datePickerDialog.show();
-    }
-
-    private void breedETClicked() {
-        //uncheck everything in listview
-        for (int i=0; i<breedLV.getCount();i++) {
-            breedLV.setItemChecked(i,false);
-        }
-
-        String breedETString=breedET.getText().toString();
-        if(!breedETString.equals(null)||!breedETString.equals(""))
-        {
-            String[] selectedBreeds=breedETString.split(", ");
-            //for all of the breeds check if breed is in selected breeds
-            for(int i=0; i<breeds.length;i++)
-            {
-                String currentBreed=breeds[i];
-                for(int j=0; j<selectedBreeds.length;j++) {
-                    if(currentBreed.equals(selectedBreeds[j])) {
-                        breedLV.setItemChecked(i,true);
-                        break;
-                    }
-                }
-            }
-        }
-        breedDialog.show();
-    }
-
-    private void deformityETClicked() {
-        //uncheck everything in listview
-        for (int i=0;i<deformityLV.getCount();i++) {
-            deformityLV.setItemChecked(i,false);
-        }
-        String deformityETString=deformityET.getText().toString();
-        if(!deformityETString.equals(null)||!deformityETString.equals("")) {
-            String[] selectedDeformities=deformityETString.split(", ");
-            for (int i=0;i<deformities.length;i++)
-            {
-                String currentDeformity=deformities[i];
-                for (int j=0;j<selectedDeformities.length;j++)
-                {
-                    if(currentDeformity.equals(selectedDeformities[j]))
-                    {
-                        deformityLV.setItemChecked(i,true);
-                        if (i==deformities.length-1)
-                        {
-                            specifyET.setVisibility(EditText.VISIBLE);
-                            specifyET.setText(deformityOSpecifyText);
-                        }
-                        break;
-                    }
-                }
-            }
-        }
-        deformityDialog.show();
-    }
-
-    private void changeServiceType() {
-        String[] serviceTypesInEN = Locale.getArrayInLocale("service_types", this, Locale.LOCALE_ENGLISH);
-        if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Bull")) {
-            sireTV.setVisibility(TextView.VISIBLE);
-            sireOwnerTV.setVisibility(TextView.VISIBLE);
-            sireOwnerS.setVisibility(Spinner.VISIBLE);
-            toggleSireOwnerVisibility();
-//            sireS.setVisibility(Spinner.VISIBLE);
-            strawNumberTV.setVisibility(TextView.GONE);
-            strawNumberET.setVisibility(EditText.GONE);
-            damTV.setVisibility(TextView.VISIBLE);
-//            damS.setVisibility(Spinner.VISIBLE);
-            damS.setVisibility(Spinner.GONE);
-            damACTV.setVisibility(AutoCompleteTextView.VISIBLE);
-            sireACTV.setVisibility(AutoCompleteTextView.VISIBLE);
-            embryoNumberTV.setVisibility(TextView.GONE);
-            embryoNumberET.setVisibility(EditText.GONE);
-            commonCountriesTV.setVisibility(TextView.VISIBLE);
-            commonCountriesS.setVisibility(Spinner.VISIBLE);
-            toggleCountryOfOriginVisibility();
-        }
-        else if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Artificial Insemination")) {
-            sireTV.setVisibility(TextView.GONE);
-            sireOwnerTV.setVisibility(TextView.GONE);
-            sireOwnerS.setVisibility(Spinner.GONE);
-            sireOwnerNameTV.setVisibility(TextView.GONE);
-            sireOwnerNameET.setVisibility(EditText.GONE);
-//            sireS.setVisibility(Spinner.GONE);
-            strawNumberTV.setVisibility(TextView.VISIBLE);
-            strawNumberET.setVisibility(EditText.VISIBLE);
-            damTV.setVisibility(TextView.VISIBLE);
-//            damS.setVisibility(Spinner.VISIBLE);
-            damS.setVisibility(Spinner.GONE);
-            damACTV.setVisibility(AutoCompleteTextView.VISIBLE);
-            sireACTV.setVisibility(AutoCompleteTextView.GONE);
-            embryoNumberTV.setVisibility(TextView.GONE);
-            embryoNumberET.setVisibility(EditText.GONE);
-            commonCountriesTV.setVisibility(TextView.GONE);
-            commonCountriesS.setVisibility(Spinner.GONE);
-            countryOfOriginTV.setVisibility(TextView.GONE);
-            countryOfOriginACTV.setVisibility(AutoCompleteTextView.GONE);
-        }
-        else if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Embryo Transfer")) {
-            sireTV.setVisibility(TextView.GONE);
-            sireOwnerTV.setVisibility(TextView.GONE);
-            sireOwnerS.setVisibility(Spinner.GONE);
-            sireOwnerNameTV.setVisibility(TextView.GONE);
-            sireOwnerNameET.setVisibility(EditText.GONE);
-//            sireS.setVisibility(Spinner.GONE);
-            strawNumberTV.setVisibility(TextView.GONE);
-            strawNumberET.setVisibility(EditText.GONE);
-            damTV.setVisibility(TextView.GONE);
-            damS.setVisibility(Spinner.GONE);
-            damACTV.setVisibility(AutoCompleteTextView.GONE);
-            sireACTV.setVisibility(AutoCompleteTextView.GONE);
-            embryoNumberTV.setVisibility(TextView.VISIBLE);
-            embryoNumberET.setVisibility(EditText.VISIBLE);
-            commonCountriesTV.setVisibility(TextView.GONE);
-            commonCountriesS.setVisibility(Spinner.GONE);
-            countryOfOriginTV.setVisibility(TextView.GONE);
-            countryOfOriginACTV.setVisibility(AutoCompleteTextView.GONE);
-        }
-    }
-
-    private void toggleSireOwnerVisibility(){
-        String[] sireOwnersInEN = Locale.getArrayInLocale("bull_owners", this, Locale.LOCALE_ENGLISH);
-        if(sireOwnersInEN[sireOwnerS.getSelectedItemPosition()].equals("Own bull")){
-            sireOwnerNameTV.setVisibility(TextView.GONE);
-            sireOwnerNameET.setVisibility(EditText.GONE);
-        }
-        else{
-            sireOwnerNameTV.setVisibility(TextView.VISIBLE);
-            sireOwnerNameET.setVisibility(EditText.VISIBLE);
-        }
-    }
-
-    private void toggleCountryOfOriginVisibility(){
-        String[] commonCountries = getResources().getStringArray(R.array.common_countries);
-        if(commonCountries[commonCountriesS.getSelectedItemPosition()].equals("Other")) {
-            countryOfOriginACTV.setVisibility(AutoCompleteTextView.VISIBLE);
-            countryOfOriginTV.setVisibility(TextView.VISIBLE);
-            countryOfOriginACTV.setText("");
-        }
-        else {
-            countryOfOriginACTV.setVisibility(AutoCompleteTextView.GONE);
-            countryOfOriginTV.setVisibility(TextView.GONE);
-            countryOfOriginACTV.setText(commonCountries[commonCountriesS.getSelectedItemPosition()]);
-        }
-    }
-
-    private void toggleFemaleCowViewsVisibility(){
-        Log.d(TAG, "Toggling female views");
-        String[] sexInEN = Locale.getArrayInLocale("sex_array", this, Locale.LOCALE_ENGLISH);
-        if(sexInEN[sexS.getSelectedItemPosition()].equals(Cow.SEX_FEMALE)){
-            milkingStatusS.setVisibility(Spinner.VISIBLE);
-            milkingStatusTV.setVisibility(TextView.VISIBLE);
-
-            inCalfStatusS.setVisibility(Spinner.VISIBLE);
-            inCalfStatusTV.setVisibility(TextView.VISIBLE);
-        }
-        else{
-            milkingStatusS.setVisibility(Spinner.GONE);
-            milkingStatusTV.setVisibility(TextView.GONE);
-
-            inCalfStatusS.setVisibility(Spinner.GONE);
-            inCalfStatusTV.setVisibility(TextView.GONE);
-        }
-    }
-
-    private boolean validateInput() {
-        String earTagNumberText=earTagNumberET.getText().toString();
-        String nameText=nameET.getText().toString();
-        if((earTagNumberText==null||earTagNumberText.equals("")) && (nameText==null||nameText.equals(""))) {
-            Toast.makeText(this,Locale.getStringInLocale("enter_ear_tag_no_or_name",this),Toast.LENGTH_LONG).show();
-            return false;
-        }
-
-        String[] sexInEN = Locale.getArrayInLocale("sex_array", this, Locale.LOCALE_ENGLISH);
-        if(sexInEN[sexS.getSelectedItemPosition()].equals(Cow.SEX_FEMALE)){
-            String[] inCalfArray = Locale.getArrayInLocale("cow_in_calf_array",this);
-            String[] milkingStatusArray = Locale.getArrayInLocale("cow_status_array",this);
-            if(inCalfStatusS.getSelectedItemPosition() == -1 || inCalfArray[inCalfStatusS.getSelectedItemPosition()].length() == 0){
-                Toast.makeText(this, Locale.getStringInLocale("enter_in_calf_status", this), Toast.LENGTH_LONG).show();
-                return false;
-            }
-            if(milkingStatusS.getSelectedItemPosition() == -1 || milkingStatusArray[milkingStatusS.getSelectedItemPosition()].length() == 0){
-                Toast.makeText(this, Locale.getStringInLocale("enter_milk_status_of_cow", this), Toast.LENGTH_LONG).show();
-                return false;
-            }
-        }
-
-        if(dateOfBirthET.getText().toString().trim().equals("") && ageET.getText().toString().trim().equals("")){
-            Toast.makeText(this, Locale.getStringInLocale("enter_age_or_dob", this), Toast.LENGTH_LONG).show();
-            return false;
-        }
-        else if (!dateOfBirthET.getText().toString().trim().equals("") && !ageET.getText().toString().trim().equals("")) {//both dob and age are set
-            String[] ageTypesInEN = Locale.getArrayInLocale("age_type_array", this, Locale.LOCALE_ENGLISH);
-            String ageType = ageTypesInEN[ageS.getSelectedItemPosition()];
-            float unitAge = 0;
-            if (ageType.equals("Years")) {
-                unitAge = 31557600000L;
-            } else if (ageType.equals("Months")) {
-                unitAge = 2628000000L;
-            } else if (ageType.equals("Days")) {
-                unitAge = 86400000L;
-            }
-
-            SimpleDateFormat simpleDateFormat = new SimpleDateFormat(dateFormat);
-
-            try {
-                Date enteredDate = simpleDateFormat.parse(dateOfBirthET.getText().toString());
-                long enteredDateMs = enteredDate.getTime();
-                long ageMs = (long) (new Date().getTime() - (Integer.parseInt(ageET.getText().toString()) * unitAge));
-                long msDiff = Math.abs(ageMs - enteredDateMs);
-                float unitDiff = msDiff / unitAge;
-                if (unitDiff > 1) {
-                    Toast.makeText(this, Locale.getStringInLocale("age_diff_from_dob", this), Toast.LENGTH_LONG).show();
-                    return false;
-                }
-            } catch (ParseException e) {
-                e.printStackTrace();
-            }
-        }
-
-        if(countryOfOriginACTV.getText().toString().length() > 0) {
-            String[] countries = this.getResources().getStringArray(R.array.countries);
-            boolean countryFound = false;
-            for(int i = 0; i < countries.length; i++) {
-                if(countries[i].equals(countryOfOriginACTV.getText().toString())) {
-                    countryFound = true;
-                    break;
-                }
-            }
-            if(!countryFound) {
-                Toast.makeText(this,Locale.getStringInLocale("country_not_found",this),Toast.LENGTH_LONG).show();
-                return false;
-            }
-        }
-
-        return true;
-    }
-
-    private void cacheThisCow() {
-        clearEditTextDataCache();
-
-        thisCow.setName(nameET.getText().toString());
-
-        thisCow.setEarTagNumber(earTagNumberET.getText().toString());
-        thisCow.setDateOfBirth(dateOfBirthET.getText().toString());
-        thisCow.setAge((ageET.getText().toString() == null || ageET.getText().toString().length() == 0) ? -1 : Integer.parseInt(ageET.getText().toString()));
-        String[] ageTypesInEN = Locale.getArrayInLocale("age_type_array",this,Locale.LOCALE_ENGLISH);
-        if(ageTypesInEN[ageS.getSelectedItemPosition()].equals("Days")) {
-            thisCow.setAgeType(Cow.AGE_TYPE_DAY);
-        }
-        else if(ageTypesInEN[ageS.getSelectedItemPosition()].equals("Months")) {
-            thisCow.setAgeType(Cow.AGE_TYPE_MONTH);
-        }
-        else if(ageTypesInEN[ageS.getSelectedItemPosition()].equals("Years")) {
-            thisCow.setAgeType(Cow.AGE_TYPE_YEAR);
-        }
-        thisCow.setDateOfBirth(dateOfBirthET.getText().toString());
-        thisCow.setBreeds(breedET.getText().toString().split(", "), this, false);
-
-        thisCow.setDeformities(deformityET.getText().toString().split(", "), this);
-        thisCow.setOtherDeformity(specifyET.getText().toString());
-        thisCow.setCountryOfOrigin(countryOfOriginACTV.getText().toString());
-        String[] sexInEN = Locale.getArrayInLocale("sex_array",this,Locale.LOCALE_ENGLISH);
-        if(sexInEN[sexS.getSelectedItemPosition()].equals("Female")) {
-            thisCow.setSex(Cow.SEX_FEMALE);
-
-            String[] milkingStatusInEN = Locale.getArrayInLocale("cow_status_array", this, Locale.LOCALE_ENGLISH);
-            thisCow.setMilkingStatus(milkingStatusInEN[milkingStatusS.getSelectedItemPosition()], this);
-            String[] inCalfArrayInEN = Locale.getArrayInLocale("cow_in_calf_array", this, Locale.LOCALE_ENGLISH);
-            if(inCalfArrayInEN[inCalfStatusS.getSelectedItemPosition()].equals(Cow.COW_IN_CALF)){
-                thisCow.setInCalf(true);
-            }
-            else{
-                thisCow.setInCalf(false);
-            }
-        }
-        else if(sexInEN[sexS.getSelectedItemPosition()].equals("Male")) {
-            thisCow.setSex(Cow.SEX_MALE);
-        }
-        //if(farmer.getMode().equals(Farmer.MODE_INITIAL_REGISTRATION)) {
-            String[] serviceTypesInEN = Locale.getArrayInLocale("service_types",this,Locale.LOCALE_ENGLISH);
-            if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Bull")) {
-                thisCow.setServiceType(Cow.SERVICE_TYPE_BULL);
-
-                Sire sire = new Sire();
-//                sire.setName(validSires.get(sireS.getSelectedItemPosition()).getName());
-//                sire.setEarTagNumber(validSires.get(sireS.getSelectedItemPosition()).getEarTagNumber());
-
-                for(int i = 0; i < validSires.size(); i++){
-                    if(sireACTV.getText().toString().equals(validSires.get(i).getEarTagNumber()+" ("+validSires.get(i).getName()+")")){
-                        sire.setEarTagNumber(validSires.get(i).getEarTagNumber());
-                        sire.setName(validSires.get(i).getName());
-                    }
-                }
-                if(sire.getEarTagNumber().trim().equals("")){//if not yet set then assume the sire is not part of the herd
-                    sire.setEarTagNumber(sireACTV.getText().toString());
-                }
-
-                String[] sireOwnersInEN = Locale.getArrayInLocale("bull_owners", this, Locale.LOCALE_ENGLISH);
-                sire.setOwnerType(sireOwnersInEN[sireOwnerS.getSelectedItemPosition()]);
-                sire.setOwner(sireOwnerNameET.getText().toString());
-                thisCow.setSire(sire);
-
-                Dam dam =new Dam();
-//                dam.setName(validDams.get(damS.getSelectedItemPosition()).getName());
-//                dam.setEarTagNumber(validDams.get(damS.getSelectedItemPosition()).getEarTagNumber());
-
-                for(int i = 0; i < validDams.size(); i++ ){
-                    if(damACTV.getText().toString().equals(validDams.get(i).getEarTagNumber()+" ("+validDams.get(i).getName()+")")){
-                        dam.setEarTagNumber(validDams.get(i).getEarTagNumber());
-                        dam.setName(validDams.get(i).getName());
-                    }
-                }
-                if(dam.getEarTagNumber().trim().equals("")){//if not yet set then assume the dam is not part of the herd
-                    dam.setEarTagNumber(damACTV.getText().toString());
-                }
-                thisCow.setDam(dam);
-            }
-            else if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Artificial Insemination")) {
-                thisCow.setServiceType(Cow.SERVICE_TYPE_AI);
-
-                Sire sire = new Sire();
-                sire.setStrawNumber(strawNumberET.getText().toString());
-                thisCow.setSire(sire);
-
-                Dam dam =new Dam();
-//                dam.setName(validDams.get(damS.getSelectedItemPosition()).getName());
-//                dam.setEarTagNumber(validDams.get(damS.getSelectedItemPosition()).getEarTagNumber());
-
-                for(int i = 0; i < validDams.size(); i++ ){
-                    if(damACTV.getText().toString().equals(validDams.get(i).getEarTagNumber()+" ("+validDams.get(i).getName()+")")){
-                        dam.setEarTagNumber(validDams.get(i).getEarTagNumber());
-                        dam.setName(validDams.get(i).getName());
-                    }
-                }
-                if(dam.getEmbryoNumber().trim().equals("")){
-                    dam.setEarTagNumber(damACTV.getText().toString());
-                }
-                thisCow.setDam(dam);
-            }
-            else if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Embryo Transfer")) {
-                thisCow.setServiceType(Cow.SERVICE_TYPE_ET);
-
-                Dam dam =new Dam();
-//                dam.setName(validDams.get(damS.getSelectedItemPosition()).getName());
-//                dam.setEarTagNumber(validDams.get(damS.getSelectedItemPosition()).getEarTagNumber());
-
-                for(int i = 0; i < validDams.size(); i++ ){
-                    if(damACTV.getText().toString().equals(validDams.get(i).getEarTagNumber()+" ("+validDams.get(i).getName()+")")){
-                        dam.setEarTagNumber(validDams.get(i).getEarTagNumber());
-                        dam.setName(validDams.get(i).getName());
-                    }
-                }
-                if(dam.getEmbryoNumber().trim().equals("")){
-                    dam.setEarTagNumber(damACTV.getText().toString());
-                }
-                thisCow.setDam(dam);
-            }
-        //}
-        farmer.setCow(thisCow,index);
-    }
-
-    private class EditCowThread extends AsyncTask<String, Integer, String>{
-
-        private ProgressDialog progressDialog;
-
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-            progressDialog = ProgressDialog.show(EditCowActivity.this, "", Locale.getStringInLocale("loading_please_wait", EditCowActivity.this), true);
-        }
-
-        @Override
-        protected String doInBackground(String... params) {
-            return DataHandler.sendDataToServer(EditCowActivity.this, params[0], DataHandler.ADMIN_EDIT_COW_URL, true);
-        }
-
-        @Override
-        protected void onPostExecute(String result) {
-            super.onPostExecute(result);
-
-            progressDialog.dismiss();
-
-            if(result==null){
-                String httpError = DataHandler.getSharedPreference(EditCowActivity.this, "http_error", "No Error thrown to application. Something must be really wrong");
-                Toast.makeText(EditCowActivity.this, httpError, Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
-                Toast.makeText(EditCowActivity.this, Locale.getStringInLocale("generic_sms_error", EditCowActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
-                Toast.makeText(EditCowActivity.this, Locale.getStringInLocale("no_service", EditCowActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
-                Toast.makeText(EditCowActivity.this, Locale.getStringInLocale("radio_off", EditCowActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
-                Toast.makeText(EditCowActivity.this, Locale.getStringInLocale("server_not_receive_sms", EditCowActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.ACKNOWLEDGE_OK)){
-                try{
-                    Intent intent = new Intent(EditCowActivity.this, CowSelectionActivity.class);
-                    intent.putExtra(CowSelectionActivity.KEY_ADMIN_DATA, adminData);//since this activity
-                    startActivity(intent);
-                }
-                catch (Exception e){
-                    e.printStackTrace();
-                }
-            }
-            else{
-                Toast.makeText(EditCowActivity.this, Locale.getStringInLocale("problem_connecting_to_server", EditCowActivity.this), Toast.LENGTH_LONG).show();
-            }
-        }
-    }
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/EditFarmerActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/EditFarmerActivity.java
deleted file mode 100644
index ed6a964..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/EditFarmerActivity.java
+++ /dev/null
@@ -1,612 +0,0 @@
-package org.cgiar.ilri.mistro.farmer;
-
-import android.app.AlertDialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.location.Criteria;
-import android.location.Location;
-import android.location.LocationListener;
-import android.location.LocationManager;
-import android.os.AsyncTask;
-import android.os.Bundle;
-import android.provider.Settings;
-import android.telephony.TelephonyManager;
-import android.util.Log;
-import android.view.View;
-import android.widget.ArrayAdapter;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.Spinner;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import com.actionbarsherlock.app.SherlockActivity;
-import com.actionbarsherlock.view.Menu;
-import com.actionbarsherlock.view.MenuInflater;
-import com.actionbarsherlock.view.MenuItem;
-
-import org.cgiar.ilri.mistro.farmer.backend.DataHandler;
-import org.cgiar.ilri.mistro.farmer.backend.Locale;
-import org.cgiar.ilri.mistro.farmer.backend.database.DatabaseHelper;
-import org.cgiar.ilri.mistro.farmer.carrier.Farmer;
-import org.json.JSONArray;
-
-import java.util.ArrayList;
-import java.util.List;
-
-
-public class EditFarmerActivity extends SherlockActivity implements MistroActivity, View.OnClickListener, LocationListener {
-    private static final String TAG = "EditFarmerActivity";
-
-
-    private Menu menu;
-    private TextView fullNameTV;
-    private EditText fullNameET;
-    private TextView preferredLanguageTV;
-    private Spinner preferredLanguageS;
-    private TextView extensionPersonnelTV;
-    private Spinner extensionPersonnelS;
-    private TextView mobileNumberTV;
-    private EditText mobileNumberET;
-    private TextView farmLocTV;
-    private Button recordLocB;
-    private TextView siteTV;
-    private Spinner siteS;
-    private TextView isActiveTV;
-    private Spinner isActiveS;
-    private Button editB;
-    private Button cancelB;
-
-    private String adminData;
-    private Farmer farmer;
-    private List<String> languages;
-    private boolean cacheData;
-    private List<String> vetNames;
-    private String longitude;
-    private String latitude;
-    private LocationManager locationManager;
-    private ProgressDialog gpsProgressDialog;
-    private boolean locationGotten;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_edit_farmer);
-
-        languages = Locale.getAllLanguages(this);
-        cacheData = true;
-
-        fullNameTV=(TextView)this.findViewById(R.id.full_name_tv);
-        fullNameET=(EditText)this.findViewById(R.id.full_name_et);
-        preferredLanguageTV = (TextView)this.findViewById(R.id.preferred_language_tv);
-        preferredLanguageS = (Spinner)this.findViewById(R.id.preferred_language_s);
-        extensionPersonnelTV=(TextView)this.findViewById(R.id.extension_personnel_tv);
-        extensionPersonnelS=(Spinner)this.findViewById(R.id.extension_personnel_s);
-        mobileNumberTV=(TextView)this.findViewById(R.id.mobile_number_tv);
-        mobileNumberET=(EditText)this.findViewById(R.id.mobile_number_et);
-        TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
-        //Toast.makeText(this,telephonyManager.getSimSerialNumber(),Toast.LENGTH_LONG).show();
-        mobileNumberET.setText(telephonyManager.getLine1Number());
-        farmLocTV = (TextView)findViewById(R.id.farm_loc_tv);
-        recordLocB = (Button)findViewById(R.id.record_loc_b);
-        recordLocB.setOnClickListener(this);
-        siteTV = (TextView)findViewById(R.id.site_tv);
-        siteS = (Spinner)findViewById(R.id.site_s);
-        isActiveTV = (TextView)findViewById(R.id.is_active_tv);
-        isActiveS = (Spinner)findViewById(R.id.is_active_s);
-        editB=(Button)this.findViewById(R.id.edit_b);
-        editB.setOnClickListener(this);
-        cancelB =(Button)this.findViewById(R.id.cancel_b);
-        cancelB.setOnClickListener(this);
-
-        //init text according to locale
-        initTextInViews();
-    }
-
-    public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu) {
-        MenuInflater inflater = getSupportMenuInflater();
-        inflater.inflate(R.menu.edit_farmer, menu);
-        this.menu = menu;
-        initMenuText();
-        return true;
-    }
-
-    public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem item) {
-        // Handle item selection
-        if(Language.processLanguageMenuItemSelected(this, this, item)){
-            return true;
-        }
-        else if(item.getItemId() == R.id.action_back_main_menu) {
-            DialogInterface.OnClickListener onClickListener = new DialogInterface.OnClickListener() {
-                @Override
-                public void onClick(DialogInterface dialog, int which) {
-                    if(which==DialogInterface.BUTTON_POSITIVE){
-                        dialog.dismiss();
-
-                        clearEditTextDataCache();
-
-                        Intent intent = new Intent(EditFarmerActivity.this, MainMenu.class);
-                        intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_ADMIN);
-                        intent.putExtra(MainMenu.KEY_ADMIN_DATA, adminData);
-                        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-                        startActivity(intent);
-                    }
-                    else{
-                        dialog.cancel();
-                    }
-                }
-            };
-            AlertDialog mainMenuDialog = Utils.createMainMenuDialog(this, onClickListener);
-            mainMenuDialog.show();
-        }
-        return false;
-    }
-
-    @Override
-    public void initTextInViews() {
-        setTitle(Locale.getStringInLocale("edit_farmer", this));
-        fullNameTV.setText(" * " + Locale.getStringInLocale("full_name", this));
-        extensionPersonnelTV.setText(" * " + Locale.getStringInLocale("extension_p", this));
-
-        List<String> tmpVetNames = new ArrayList<String>();
-        tmpVetNames.add("");
-        ArrayAdapter<String> epArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,tmpVetNames);
-        epArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        extensionPersonnelS.setAdapter(epArrayAdapter);
-
-        mobileNumberTV.setText(" * " + Locale.getStringInLocale("phone_number", this));
-        preferredLanguageTV.setText(" * "+Locale.getStringInLocale("preferred_language", this));
-
-        ArrayAdapter<String> languageAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item, languages);
-        languageAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        preferredLanguageS.setAdapter(languageAdapter);
-
-        recordLocB.setText(Locale.getStringInLocale("rec_farm_loc", this));
-
-        siteTV.setText(" * " + Locale.getStringInLocale("site", this));
-
-        ArrayAdapter<String> siteArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item, getResources().getStringArray(R.array.sites));
-        siteArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        siteS.setAdapter(siteArrayAdapter);
-
-        isActiveTV.setText(" * " + Locale.getStringInLocale("is_active", this));
-
-        ArrayAdapter<String> isActiveArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item, Locale.getArrayInLocale("yes_no", this));
-        isActiveArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        isActiveS.setAdapter(isActiveArrayAdapter);
-
-        editB.setText(Locale.getStringInLocale("save", this));
-        cancelB.setText(Locale.getStringInLocale("cancel", this));
-    }
-
-    private void initMenuText(){
-        if(this.menu != null){
-            MenuItem mainMenuMI = menu.findItem(R.id.action_back_main_menu);
-            mainMenuMI.setTitle(Locale.getStringInLocale("back_to_main_menu", this));
-        }
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        Bundle bundle = this.getIntent().getExtras();
-        if(bundle != null){
-            adminData = bundle.getString(FarmerSelectionActivity.KEY_ADMIN_DATA);
-            farmer = bundle.getParcelable(Farmer.PARCELABLE_KEY);
-            if(farmer != null){
-                fullNameET.setText(farmer.getFullName());
-                mobileNumberET.setText(farmer.getMobileNumber());
-
-                String prefLanguage = Locale.getLanguage(this, farmer.getPreferredLocale());
-
-                for(int i = 0; i < languages.size(); i++){
-                    if(languages.get(i).equals(prefLanguage)){
-                        preferredLanguageS.setSelection(i);
-                    }
-                }
-
-                String[] yesNoInEN = Locale.getArrayInLocale("yes_no", this, Locale.LOCALE_ENGLISH);
-                for(int i = 0; i < yesNoInEN.length; i++){
-                    if(yesNoInEN[i].equals("Yes") && farmer.isActive()){
-                        isActiveS.setSelection(i);
-                    }
-                    else if(yesNoInEN[i].equals("No") && !farmer.isActive()){
-                        isActiveS.setSelection(i);
-                    }
-                }
-
-                String[] sites = getResources().getStringArray(R.array.sites);
-                for(int i = 0; i < sites.length; i++){
-                    if(sites[i].equals(farmer.getSite())){
-                        siteS.setSelection(i);
-                    }
-                }
-
-                updateFarmLocation(farmer.getLongitude(), farmer.getLatitude());
-
-                //fetch extension personnel names from server. Do this after farmer object is initialized since the thread is going to use this object
-                FetchVetsThread fetchVetsThread = new FetchVetsThread();
-                fetchVetsThread.execute(0);
-            }
-            else{
-                Log.e(TAG, "Parcelable farmer object from previous activity is null");
-            }
-        }
-        else{
-            Log.e(TAG, "Unable to get data from previous activity");
-        }
-    }
-
-    private void cacheEditTextData(){
-        if(cacheData) {
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_FULL_NAME, fullNameET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_MOBILE_NUMBER, mobileNumberET.getText().toString());
-        }
-    }
-
-    private void restoreEditTextData(){
-        fullNameET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_FRA_FULL_NAME, ""));
-        mobileNumberET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_FRA_MOBILE_NUMBER, ""));
-    }
-
-    private void clearEditTextDataCache(){
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_FULL_NAME, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_MOBILE_NUMBER, "");
-
-        cacheData = false;
-    }
-
-
-    @Override
-    public void onClick(View v) {
-        if(v.equals(cancelB)){
-            Intent intent = new Intent(this, FarmerSelectionActivity.class);
-            intent.putExtra(FarmerSelectionActivity.KEY_ADMIN_DATA, adminData);
-            startActivity(intent);
-        }
-        else if(v.equals(recordLocB)){
-            buildGPSAlert();
-        }
-        else if(v.equals(editB)){
-            if(validateInput()){
-                cacheFarmer();
-
-                EditFarmerThread editFarmerThread = new EditFarmerThread();
-                editFarmerThread.execute(farmer.getJsonObject().toString());
-            }
-        }
-    }
-
-    private void cacheFarmer()
-    {
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_FULL_NAME, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_EXTENSION_PERSONNEL, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_MOBILE_NUMBER, "");
-
-        farmer.setFullName(fullNameET.getText().toString());
-        if(vetNames != null && extensionPersonnelS.getSelectedItemPosition() != -1){
-            farmer.setExtensionPersonnel(vetNames.get(extensionPersonnelS.getSelectedItemPosition()));
-        }
-        else{
-            farmer.setExtensionPersonnel("");
-        }
-
-        if(languages != null && preferredLanguageS.getSelectedItemPosition() != -1){
-            farmer.setPreferredLocale(Locale.getLocaleCode(this, languages.get(preferredLanguageS.getSelectedItemPosition())));
-        }
-
-        String[] yesNoInEN = Locale.getArrayInLocale("yes_no", this, Locale.LOCALE_ENGLISH);
-        if(isActiveS.getSelectedItemPosition() != -1){
-            if(yesNoInEN[isActiveS.getSelectedItemPosition()].equals("Yes")){
-                farmer.setActive(true);
-            }
-            else if(yesNoInEN[isActiveS.getSelectedItemPosition()].equals("No")){
-                farmer.setActive(false);
-            }
-        }
-
-        String[] sites = getResources().getStringArray(R.array.sites);
-        farmer.setSite(sites[siteS.getSelectedItemPosition()]);
-
-        farmer.setMobileNumber(mobileNumberET.getText().toString());
-
-        farmer.setMode(Farmer.MODE_EDIT_FARMER);
-    }
-
-    private void buildGPSAlert(){
-        AlertDialog.Builder builder = new AlertDialog.Builder(this);
-        builder.setMessage(Locale.getStringInLocale("are_you_in_farmers_farm",this));
-        builder.setPositiveButton(Locale.getStringInLocale("yes",this), new DialogInterface.OnClickListener(){
-
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                dialog.dismiss();
-                getGPSCoordinates();
-            }
-        });
-        builder.setNegativeButton(Locale.getStringInLocale("no",this), new DialogInterface.OnClickListener(){
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                dialog.dismiss();
-            }
-        });
-
-        AlertDialog alertDialog = builder.create();
-        alertDialog.show();
-    }
-
-    private void getGPSCoordinates() {
-        locationManager=(LocationManager)getSystemService(LOCATION_SERVICE);
-        if(locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
-            //Toast.makeText(this,"gps started",Toast.LENGTH_LONG).show();
-            locationGotten = false;
-            gpsProgressDialog = ProgressDialog.show(EditFarmerActivity.this, "", Locale.getStringInLocale("accuracy", EditFarmerActivity.this) + " : " +Locale.getStringInLocale("unknown", EditFarmerActivity.this), true);
-            gpsProgressDialog.setCancelable(true);
-            gpsProgressDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {
-                @Override
-                public void onCancel(DialogInterface dialog) {
-                    locationGotten = true;
-                }
-            });
-
-            Criteria criteria=new Criteria();
-            String provider=locationManager.getBestProvider(criteria,false);
-            Location location=locationManager.getLastKnownLocation(provider);
-            locationManager.requestLocationUpdates(provider,18000,1000,this);//If farmer  is moving at 200km/h, will still be able to update!
-            if(location!=null)
-            {
-                onLocationChanged(location);
-            }
-        }
-        else {
-            AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(this);
-            alertDialogBuilder.setTitle(Locale.getStringInLocale("enable_gps",this));
-            alertDialogBuilder
-                    .setMessage(Locale.getStringInLocale("reason_for_enabling_gps", this))
-                    .setCancelable(false)
-                    .setPositiveButton(Locale.getStringInLocale("okay",this), new DialogInterface.OnClickListener()
-                    {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which)
-                        {
-                            Intent intent=new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
-                            startActivity(intent);
-                        }
-                    })
-                    .setNegativeButton(Locale.getStringInLocale("cancel",this), new DialogInterface.OnClickListener()
-                    {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which)
-                        {
-                            dialog.cancel();
-                        }
-                    });
-            AlertDialog alertDialog=alertDialogBuilder.create();
-            alertDialog.show();
-
-        }
-    }
-
-    @Override
-    public void onLocationChanged(Location location) {
-        if(!locationGotten){
-            latitude=String.valueOf(location.getLatitude());
-            longitude=String.valueOf(location.getLongitude());
-
-            farmer.setLatitude(latitude);
-            farmer.setLongitude(longitude);
-
-            updateFarmLocation(longitude, latitude);
-
-            Log.d(TAG, "latitude : " + latitude);
-            Log.d(TAG, "longitude : " + longitude);
-            if(latitude !=null && longitude != null){
-                String lastDigitInLong = longitude.substring(longitude.length() - 1, longitude.length());
-                String longCompare = longitude.substring(0, longitude.length() - 1) + String.valueOf(Integer.parseInt(lastDigitInLong) + 1);
-
-                String lastDigitInLat = latitude.substring(latitude.length() - 1, latitude.length());
-                String latCompare = latitude.substring(0, latitude.length() - 1) + String.valueOf(Integer.parseInt(lastDigitInLat) + 1);
-
-                float[] accuracy = new float[1];
-                double lat1 = Double.parseDouble(latitude);
-                double lon1 = Double.parseDouble(longitude);
-                double lat2 = Double.parseDouble(latCompare);
-                double lon2 = Double.parseDouble(longCompare);
-                Location.distanceBetween(lat1, lon1, lat2, lon2, accuracy);
-
-                int accuracyInM =(int) (accuracy[0] * 0.000621371192f);
-                Log.d(TAG, "Accuracy at "+String.valueOf(accuracyInM));
-
-                gpsProgressDialog.setMessage(Locale.getStringInLocale("accuracy", this) + " : " + String.valueOf(accuracyInM) + " M");
-
-                if(accuracyInM < 4){
-                    locationGotten = true;
-                    locationManager.removeUpdates(this);
-                    gpsProgressDialog.dismiss();
-                }
-            }
-        }
-    }
-
-    @Override
-    public void onStatusChanged(String provider, int status, Bundle extras) {
-
-    }
-
-    @Override
-    public void onProviderEnabled(String provider) {
-
-    }
-
-    @Override
-    public void onProviderDisabled(String provider) {
-
-    }
-
-    public void updateFarmLocation(String longitude, String latitude){
-        String farmLoc = Locale.getStringInLocale("farm_location", this);
-        if(DataHandler.isNull(farmer.getLongitude()) || farmer.getLongitude().length() == 0){
-            farmLoc = farmLoc + "\n \t Longitude: " + Locale.getStringInLocale("not_set", this);
-        }
-        else{
-            farmLoc = farmLoc + "\n \t Longitude: " + longitude;
-        }
-
-        if(DataHandler.isNull(farmer.getLatitude()) || farmer.getLatitude().length() == 0){
-            farmLoc = farmLoc + "\n \t Latitude: " + Locale.getStringInLocale("not_set", this);
-        }
-        else{
-            farmLoc = farmLoc + "\n \t Latitude: " + latitude;
-        }
-        farmLocTV.setText(farmLoc);
-    }
-
-    private boolean validateInput()
-    {
-        String nameText=fullNameET.getText().toString();
-        if(nameText==null || nameText.equals(""))
-        {
-            Toast.makeText(this,Locale.getStringInLocale("enter_farmer_name", this),Toast.LENGTH_LONG).show();
-            return false;
-        }
-        else if(nameText.split(" ").length < 2){
-            Toast.makeText(this, Locale.getStringInLocale("enter_two_names", this), Toast.LENGTH_LONG).show();
-            return false;
-        }
-
-        String mobileNumberText=mobileNumberET.getText().toString();
-        if(mobileNumberText==null||mobileNumberText.equals(""))
-        {
-            Toast.makeText(this,Locale.getStringInLocale("enter_farmer_mobile_no", this),Toast.LENGTH_LONG).show();
-            return false;
-        }
-        else if(mobileNumberText.length() != 10){
-            Toast.makeText(this, Locale.getStringInLocale("phone_number_not_valid", this), Toast.LENGTH_LONG).show();
-            return false;
-        }
-
-        if(vetNames == null){
-            Toast.makeText(this, Locale.getStringInLocale("epersonnel_tshoot", this), Toast.LENGTH_LONG).show();
-            return false;
-        }
-        else if(extensionPersonnelS.getSelectedItemPosition() == -1 || vetNames.get(extensionPersonnelS.getSelectedItemPosition()).length() == 0){
-            Toast.makeText(this, Locale.getStringInLocale("select_epersonnel", this), Toast.LENGTH_LONG).show();
-            return  false;
-        }
-
-        String[] sites = getResources().getStringArray(R.array.sites);
-        if(sites[siteS.getSelectedItemPosition()].length() == 0){
-            Toast.makeText(this, Locale.getStringInLocale("specify_site", this), Toast.LENGTH_LONG).show();
-            return false;
-        }
-        return true;
-    }
-
-    private class FetchVetsThread extends AsyncTask<Integer, Integer, String> {
-        private ProgressDialog progressDialog;
-
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-            progressDialog = ProgressDialog.show(EditFarmerActivity.this, "", Locale.getStringInLocale("loading_please_wait", EditFarmerActivity.this), true);
-        }
-
-        @Override
-        protected String doInBackground(Integer... params) {
-            Log.d(TAG, "Fetching extension personnel from server");
-
-            return DataHandler.sendDataToServer(EditFarmerActivity.this, "", DataHandler.FARMER_FETCH_VETS_URL, true, DatabaseHelper.TABLE_EXTENSION_PERSONNEL);
-        }
-
-        @Override
-        protected void onPostExecute(String result) {
-            super.onPostExecute(result);
-            progressDialog.dismiss();
-
-            if(result == null){
-                Toast.makeText(EditFarmerActivity.this, Locale.getStringInLocale("unable_to_get_epersonnel", EditFarmerActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else{
-                try{
-                    Log.d(TAG, "result is "+result);
-                    JSONArray vetJsonArray = new JSONArray(result);
-                    vetNames = new ArrayList<String>();
-                    vetNames.add("");
-                    for(int i = 0; i < vetJsonArray.length(); i++){
-                        vetNames.add(vetJsonArray.getJSONObject(i).getString("name"));
-                    }
-
-                    int selection = 0;//default selection is the blank one
-                    if(farmer != null){
-                        String selectedEP = farmer.getExtensionPersonnel();
-                        if(selectedEP != null && selectedEP.length() > 0){
-                            for(int i =0; i < vetNames.size(); i++){
-                                if(vetNames.get(i).equals(selectedEP)){
-                                    selection = i;
-                                }
-                            }
-                        }
-                    }
-
-                    ArrayAdapter<String> epArrayAdapter = new ArrayAdapter<String>(EditFarmerActivity.this, android.R.layout.simple_spinner_item, vetNames);
-                    epArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-                    extensionPersonnelS.setAdapter(epArrayAdapter);
-                    extensionPersonnelS.setSelection(selection);
-                }
-                catch (Exception e){
-                    e.printStackTrace();
-                }
-            }
-        }
-    }
-
-    private class EditFarmerThread extends AsyncTask<String, Integer, String>{
-        private ProgressDialog progressDialog;
-
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-            progressDialog = ProgressDialog.show(EditFarmerActivity.this, "", Locale.getStringInLocale("loading_please_wait", EditFarmerActivity.this), true);
-        }
-
-        @Override
-        protected String doInBackground(String... params) {
-            return DataHandler.sendDataToServer(EditFarmerActivity.this, params[0], DataHandler.ADMIN_EDIT_FARMER_URL, true);
-        }
-
-        @Override
-        protected void onPostExecute(String result) {
-            super.onPostExecute(result);
-            progressDialog.dismiss();
-
-            if(result == null) {
-                String httpError = DataHandler.getSharedPreference(EditFarmerActivity.this, "http_error", "No Error thrown to application. Something must be really wrong");
-                Toast.makeText(EditFarmerActivity.this,httpError,Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
-                Toast.makeText(EditFarmerActivity.this, Locale.getStringInLocale("generic_sms_error", EditFarmerActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
-                Toast.makeText(EditFarmerActivity.this, Locale.getStringInLocale("no_service", EditFarmerActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
-                Toast.makeText(EditFarmerActivity.this, Locale.getStringInLocale("radio_off", EditFarmerActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
-                Toast.makeText(EditFarmerActivity.this, Locale.getStringInLocale("server_not_receive_sms", EditFarmerActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.CODE_NUMBER_IN_USE)){
-                Toast.makeText(EditFarmerActivity.this, Locale.getStringInLocale("number_in_use", EditFarmerActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.ACKNOWLEDGE_OK)) {
-                Toast.makeText(EditFarmerActivity.this, Locale.getStringInLocale("farmer_profile_updated", EditFarmerActivity.this), Toast.LENGTH_LONG).show();
-
-                Intent intent = new Intent(EditFarmerActivity.this, FarmerSelectionActivity.class);
-                //intent.putExtra(FarmerSelectionActivity.KEY_ADMIN_DATA, adminData);
-                startActivity(intent);
-            }
-        }
-    }
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/EventsActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/EventsActivity.java
deleted file mode 100644
index 7fd4570..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/EventsActivity.java
+++ /dev/null
@@ -1,137 +0,0 @@
-package org.cgiar.ilri.mistro.farmer;
-
-import android.content.Intent;
-import android.os.AsyncTask;
-import android.os.Bundle;
-import android.app.Activity;
-import com.actionbarsherlock.view.Menu;
-
-import android.util.Log;
-import android.view.View;
-import android.widget.Button;
-import android.widget.Toast;
-
-import com.actionbarsherlock.app.SherlockActivity;
-import com.actionbarsherlock.view.MenuInflater;
-import com.actionbarsherlock.view.MenuItem;
-
-import org.cgiar.ilri.mistro.farmer.backend.DataHandler;
-import org.cgiar.ilri.mistro.farmer.backend.Locale;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-public class EventsActivity extends SherlockActivity implements MistroActivity, View.OnClickListener
-{
-    private String TAG = "EventsActivity";
-
-    private Menu menu;
-    private Button addEventB;
-    private Button eventHistoryB;
-    private Button backB;
-    @Override
-    protected void onCreate(Bundle savedInstanceState)
-    {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_events);
-
-        addEventB=(Button)findViewById(R.id.add_event_b);
-        addEventB.setOnClickListener(this);
-        eventHistoryB=(Button)findViewById(R.id.event_history_b);
-        eventHistoryB.setOnClickListener(this);
-        backB = (Button)findViewById(R.id.back_b);
-        backB.setOnClickListener(this);
-
-        initTextInViews();
-    }
-
-    public boolean onCreateOptionsMenu(Menu menu) {
-        MenuInflater inflater = getSupportMenuInflater();
-        inflater.inflate(R.menu.events, menu);
-        this.menu = menu;
-        initMenuText();
-        return true;
-    }
-
-    public boolean onOptionsItemSelected(MenuItem item) {
-        // Handle item selection
-        if(Language.processLanguageMenuItemSelected(this, this, item)){
-            return true;
-        }
-        else if(item.getItemId() == R.id.action_back_main_menu) {
-            Intent intent = new Intent(this, MainMenu.class);
-            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_FARMER);
-            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-            startActivity(intent);
-        }
-
-        return false;
-    }
-
-    @Override
-    public void initTextInViews()
-    {
-        setTitle(Locale.getStringInLocale("events",this));
-        addEventB.setText(Locale.getStringInLocale("add_an_event",this));
-        eventHistoryB.setText(Locale.getStringInLocale("past_events",this));
-        backB.setText(Locale.getStringInLocale("back", this));
-        initMenuText();
-    }
-
-    private void initMenuText(){
-        if(this.menu != null){
-            MenuItem mainMenuMI = menu.findItem(R.id.action_back_main_menu);
-            mainMenuMI.setTitle(Locale.getStringInLocale("back_to_main_menu", this));
-        }
-    }
-
-    @Override
-    public void onClick(View view)
-    {
-        if(view==addEventB)
-        {
-            Intent intent=new Intent(this,AddEventActivity.class);
-            startActivity(intent);
-        }
-        else if(view == eventHistoryB)
-        {
-            Intent intent=new Intent(this,EventsHistoryActivity.class);
-            startActivity(intent);
-        }
-        else if(view == backB){
-            SendCachedDataThread sendCachedDataThread = new SendCachedDataThread();
-            sendCachedDataThread.execute(1);
-
-            Intent intent = new Intent(this, MainMenu.class);
-            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_FARMER);
-            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-            startActivity(intent);
-        }
-    }
-
-    private class SendCachedDataThread extends AsyncTask<Integer, Integer, Boolean>{
-
-        @Override
-        protected Boolean doInBackground(Integer... params) {
-            String result = DataHandler.sendCachedRequests(EventsActivity.this, true);//send cached data and receive updated farmer data
-            if(result != null && !result.equals(DataHandler.CODE_USER_NOT_AUTHENTICATED)){//no data fetched for this farmer
-                try {//try converting the response into a jsonobject. It might not work if the DataHandler returns a response code
-                    Log.d(TAG, "response is " + result);
-                    DataHandler.saveFarmerData(EventsActivity.this, new JSONObject(result));
-                    return true;
-                } catch (JSONException e) {
-                    e.printStackTrace();
-                }
-            }
-            return false;
-        }
-
-        @Override
-        protected void onPostExecute(Boolean result) {
-            super.onPostExecute(result);
-
-            if(result == true){
-                Toast.makeText(EventsActivity.this, Locale.getStringInLocale("information_successfully_sent_to_server", EventsActivity.this), Toast.LENGTH_LONG).show();
-            }
-        }
-    }
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/EventsHistoryActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/EventsHistoryActivity.java
deleted file mode 100644
index 6ef6287..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/EventsHistoryActivity.java
+++ /dev/null
@@ -1,364 +0,0 @@
-package org.cgiar.ilri.mistro.farmer;
-
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.Intent;
-import android.os.AsyncTask;
-import android.os.Bundle;
-import android.telephony.TelephonyManager;
-import android.util.DisplayMetrics;
-import android.util.Log;
-import android.view.Gravity;
-import android.view.View;
-import android.widget.Button;
-import android.widget.TableLayout;
-import android.widget.TableRow;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import com.actionbarsherlock.app.SherlockActivity;
-import com.actionbarsherlock.view.Menu;
-import com.actionbarsherlock.view.MenuInflater;
-import com.actionbarsherlock.view.MenuItem;
-
-import org.cgiar.ilri.mistro.farmer.backend.DataHandler;
-import org.cgiar.ilri.mistro.farmer.backend.Locale;
-import org.cgiar.ilri.mistro.farmer.carrier.Cow;
-import org.cgiar.ilri.mistro.farmer.carrier.Event;
-import org.cgiar.ilri.mistro.farmer.carrier.Farmer;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.GregorianCalendar;
-import java.util.List;
-
-public class EventsHistoryActivity extends SherlockActivity implements MistroActivity, View.OnClickListener {
-    private static final String TAG="EventsHistoryActivity";
-
-    private Menu menu;
-    private TableLayout eventsHistoryTL;
-    private TextView dateTV;
-    private TextView cowNameTV;
-    private TextView eventTV;
-    private DisplayMetrics metrics;
-    private Button backB;
-
-    private String noDataReceived;
-    private String serverError;
-    private List<String> eventHistoryIDs;
-    private String todayText;
-    private String yesterdayText;
-    private String loadingPleaseWait;
-    private String[] eventTypes;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_events_history);
-        //DataHandler.requestPermissionToUseSMS(this);
-
-        eventHistoryIDs = new ArrayList<String>();
-        metrics=new DisplayMetrics();
-
-        eventsHistoryTL = (TableLayout)findViewById(R.id.events_history_tl);
-        dateTV = (TextView)findViewById(R.id.date_tv);
-        cowNameTV = (TextView)findViewById(R.id.cow_name_tv);
-        eventTV = (TextView)findViewById(R.id.event_tv);
-        backB = (Button)findViewById(R.id.back_b);
-        backB.setOnClickListener(this);
-
-        initTextInViews();
-        fetchEventsHistory();
-    }
-
-    public boolean onCreateOptionsMenu(Menu menu) {
-        MenuInflater inflater = getSupportMenuInflater();
-        inflater.inflate(R.menu.events_history, menu);
-        this.menu = menu;
-        initMenuText();
-        return true;
-    }
-
-    public boolean onOptionsItemSelected(MenuItem item) {
-        // Handle item selection
-        if(Language.processLanguageMenuItemSelected(this, this, item)){
-            return true;
-        }
-        else if(item.getItemId() == R.id.action_back_main_menu) {
-            Intent intent = new Intent(this, MainMenu.class);
-            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_FARMER);
-            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-            startActivity(intent);
-        }
-        return false;
-    }
-
-    @Override
-    public void initTextInViews() {
-        setTitle(Locale.getStringInLocale("past_events",this));
-        dateTV.setText(Locale.getStringInLocale("date",this));
-        cowNameTV.setText(Locale.getStringInLocale("cow",this));
-        eventTV.setText(Locale.getStringInLocale("event",this));
-        noDataReceived = Locale.getStringInLocale("no_data_received",this);
-        serverError = Locale.getStringInLocale("problem_connecting_to_server",this);
-        todayText=Locale.getStringInLocale("today",this);
-        yesterdayText=Locale.getStringInLocale("yesterday",this);
-        loadingPleaseWait=Locale.getStringInLocale("loading_please_wait",this);
-        eventTypes = Locale.getArrayInLocale("cow_event_types",this);
-        if(eventTypes == null) {
-            eventTypes = new String[1];
-            eventTypes[0] = "";
-        }
-        backB.setText(Locale.getStringInLocale("back", this));
-
-        initMenuText();
-    }
-
-    private void initMenuText(){
-        if(this.menu != null){
-            MenuItem mainMenuMI = menu.findItem(R.id.action_back_main_menu);
-            mainMenuMI.setTitle(Locale.getStringInLocale("back_to_main_menu", this));
-        }
-    }
-
-    private void fetchEventsHistory() {
-        TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
-        CowEventHistoryThread cowEventHistoryThread =new CowEventHistoryThread();
-        if(eventHistoryIDs.size() == 0){//first time
-            cowEventHistoryThread.execute(telephonyManager.getSimSerialNumber(), "-1");
-        }
-        else {
-            cowEventHistoryThread.execute(telephonyManager.getSimSerialNumber(), eventHistoryIDs.get(eventHistoryIDs.size()-1));
-        }
-    }
-
-    @Override
-    public void onClick(View view) {
-        if(view == backB){
-            Intent intent = new Intent(this, EventsActivity.class);
-            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-            startActivity(intent);
-        }
-    }
-
-    private class CowEventHistoryThread extends AsyncTask<String, Integer, Farmer> {
-
-        ProgressDialog progressDialog;
-
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-            progressDialog = ProgressDialog.show(EventsHistoryActivity.this, "",loadingPleaseWait, true);
-        }
-
-        @Override
-        protected Farmer doInBackground(String... params) {
-            /*JSONObject jsonObject = new JSONObject();
-            try {
-                jsonObject.put("simCardSN",params[0]);
-                jsonObject.put("fromID",params[1]);
-                result = DataHandler.sendDataToServer(EventsHistoryActivity.this, jsonObject.toString(),DataHandler.FARMER_FETCH_COW_EVENTS_HISTORY_URL, true);
-            }
-            catch (JSONException e) {
-                e.printStackTrace();
-            }*/
-            String result = DataHandler.sendCachedRequests(EventsHistoryActivity.this, true);//send cached data and receive updated farmer data
-            if(result != null && !result.equals(DataHandler.CODE_USER_NOT_AUTHENTICATED)){//no data fetched for this farmer
-                try {//try converting the response into a jsonobject. It might not work if the DataHandler returns a response code
-                    Log.d(TAG, "response is "+result);
-                    DataHandler.saveFarmerData(EventsHistoryActivity.this, new JSONObject(result));
-                } catch (JSONException e) {
-                    e.printStackTrace();
-                }
-            }
-            return DataHandler.getFarmerData(EventsHistoryActivity.this);
-        }
-
-        @Override
-        protected void onPostExecute(Farmer farmer) {
-            super.onPostExecute(farmer);
-            progressDialog.dismiss();
-
-            if(farmer == null) {
-                Toast.makeText(EventsHistoryActivity.this, Locale.getStringInLocale("unable_to_fetch_cached_data", EventsHistoryActivity.this), Toast.LENGTH_LONG).show();
-            }
-
-            /*else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
-                Toast.makeText(EventsHistoryActivity.this, Locale.getStringInLocale("generic_sms_error", EventsHistoryActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
-                Toast.makeText(EventsHistoryActivity.this, Locale.getStringInLocale("no_service", EventsHistoryActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
-                Toast.makeText(EventsHistoryActivity.this, Locale.getStringInLocale("radio_off", EventsHistoryActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
-                Toast.makeText(EventsHistoryActivity.this, Locale.getStringInLocale("server_not_receive_sms", EventsHistoryActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.NO_DATA)) {
-                Toast.makeText(EventsHistoryActivity.this, noDataReceived, Toast.LENGTH_LONG).show();
-            }*/
-            else {
-                /*try {
-                    JSONObject jsonObject = new JSONObject(result);
-                    JSONArray historyArray = jsonObject.getJSONArray("history");
-                    addTableRows(historyArray);
-                }
-                catch (JSONException e) {
-                    e.printStackTrace();
-                }*/
-                try{
-                    List<Cow> allCows = farmer.getCows();
-                    JSONArray historyArray = new JSONArray();
-                    for(int cowIndex = 0; cowIndex < allCows.size(); cowIndex++){
-                        //append all events for this cow to the UI
-                        List<Event> cowEvents = allCows.get(cowIndex).getEvents();
-                        for(int eventIndex = 0; eventIndex < cowEvents.size(); eventIndex++){
-                            //cow_name, ear_tag_number, event.*,
-                            JSONObject currEventJSON = new JSONObject();
-                            currEventJSON.put("cow_name", allCows.get(cowIndex).getName());
-                            currEventJSON.put("ear_tag_number", allCows.get(cowIndex).getEarTagNumber());
-                            currEventJSON.put("id", cowEvents.get(eventIndex).getId());
-                            currEventJSON.put("remarks", cowEvents.get(eventIndex).getRemarks());
-                            currEventJSON.put("event_date", cowEvents.get(eventIndex).getEventDate());
-                            currEventJSON.put("event_name", cowEvents.get(eventIndex).getType());
-                            currEventJSON.put("birth_type", cowEvents.get(eventIndex).getBirthType());
-                            currEventJSON.put("parent_cow_event", cowEvents.get(eventIndex).getParentCowEventID());
-                            currEventJSON.put("servicing_days", cowEvents.get(eventIndex).getServicingDays());
-                            historyArray.put(currEventJSON);
-                        }
-                    }
-
-                    addTableRows(historyArray);
-                }
-                catch (Exception e){
-                    e.printStackTrace();
-                }
-            }
-        }
-    }
-
-    private void addTableRows(JSONArray historyArray) {
-        for (int i = 0; i < historyArray.length(); i++) {
-            try {
-                Log.d(TAG, "called");
-                JSONObject jsonObject=historyArray.getJSONObject(i);
-                eventHistoryIDs.add(jsonObject.getString("id"));
-                final TableRow tableRow=new TableRow(this);
-                tableRow.setId(5342+Integer.parseInt(jsonObject.getString("id")));
-                int tableRowHeight=0;
-                int tableTextSideMargin=0;//4dp
-                int tableTextSize=0;//14dp
-                if(metrics.densityDpi== DisplayMetrics.DENSITY_XHIGH) {
-                    tableRowHeight=58;//initially 30
-                    tableTextSideMargin=14;//initially 6
-                    tableTextSize=16;//initially 21
-                }
-                else if(metrics.densityDpi==DisplayMetrics.DENSITY_HIGH) {
-                    tableRowHeight=44;//initially 30
-                    tableTextSideMargin=14;//initially 6
-                    tableTextSize=16;//initially 21
-                }
-                else if(metrics.densityDpi==DisplayMetrics.DENSITY_MEDIUM) {
-                    tableRowHeight=27;//initially 20
-                    tableTextSideMargin=10;//initially 4
-                    tableTextSize=15;//initially 14
-                }
-                else if(metrics.densityDpi==DisplayMetrics.DENSITY_LOW) {
-                    tableRowHeight=20;//initially 15
-                    tableTextSideMargin=6;//initially 3
-                    tableTextSize=15;//initially 11
-                }
-                else {
-                    tableRowHeight=58;//initially 30
-                    tableTextSideMargin=14;//initially 6
-                    tableTextSize=16;//initially 21
-                }
-                tableRow.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,tableRowHeight));
-
-                SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd");
-                Date eventDate=dateFormat.parse(jsonObject.getString("event_date"));
-                Date today=new Date();
-                long dateDifference=(today.getTime()-eventDate.getTime())/86400000;
-
-                Calendar calendar=new GregorianCalendar();
-                calendar.setTime(eventDate);
-                String dateText=String.valueOf(calendar.get(Calendar.DAY_OF_MONTH))+"/"+String.valueOf(calendar.get(Calendar.MONTH)+1)+"/"+calendar.get(Calendar.YEAR);
-                if(dateDifference<1) {
-                    dateText=todayText;
-                }
-                else if(dateDifference>=1&&dateDifference<2) {
-                    dateText=yesterdayText;
-                }
-
-                final TextView date=generateTextView(dateText,5342+jsonObject.getInt("id")+332,tableRowHeight,tableTextSize);
-                tableRow.addView(date);
-
-                final View rowSeparator1=generateRowSeparator(5342+jsonObject.getInt("id")+3322,tableRowHeight);
-                tableRow.addView(rowSeparator1);
-
-                String nameText=jsonObject.getString("cow_name");
-                if(nameText==null||nameText.equals("")) {
-                    nameText=jsonObject.getString("ear_tag_number");
-                }
-                final TextView name=generateTextView(nameText,5342+jsonObject.getInt("id")+432,tableRowHeight,tableTextSize);
-                tableRow.addView(name);
-
-                final View rowSeparator2=generateRowSeparator(5342+jsonObject.getInt("id")+3432,tableRowHeight);
-                tableRow.addView(rowSeparator2);
-
-                String[] eventTypesInEN = Locale.getArrayInLocale("cow_event_types",this,Locale.LOCALE_ENGLISH);
-                String eventTypeString = "";
-                int index = -1;
-                for(int j = 0; j< eventTypesInEN.length; j++) {
-                    if(eventTypesInEN[j].equals(jsonObject.getString("event_name"))) {
-                        index = j;
-                    }
-                    else if(jsonObject.getString("event_name").equals("Calving")){
-                        eventTypeString = Locale.getStringInLocale("calving", EventsHistoryActivity.this);
-                    }
-                }
-                if(eventTypesInEN.length == eventTypes.length && index != -1) {
-                    eventTypeString = eventTypes[index];
-                }
-                final  TextView event=generateTextView(eventTypeString,5342+jsonObject.getInt("id")+554,tableRowHeight,tableTextSize);
-                tableRow.addView(event);
-
-                eventsHistoryTL.addView(tableRow, new TableLayout.LayoutParams(TableLayout.LayoutParams.MATCH_PARENT,tableRowHeight));
-            }
-            catch (JSONException e) {
-                e.printStackTrace();
-            }
-            catch (ParseException e) {
-                e.printStackTrace();
-            }
-        }
-    }
-
-    private TextView generateTextView(String text, int id,int tableRowHeight,int tableTextSize) {
-        TextView textView=new TextView(this);
-        TableRow.LayoutParams dateLP=new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT,tableRowHeight);
-        textView.setId(id);
-        textView.setText(text);
-        textView.setTextSize(tableTextSize);
-        textView.setTextColor(getResources().getColor(R.color.text_input_color));
-        textView.setGravity(Gravity.CENTER);
-        textView.setLayoutParams(dateLP);
-        return textView;
-    }
-
-    private View generateRowSeparator(int id,int tableRowHeight) {
-        final View rowSeperator=new View(this);
-        rowSeperator.setId(id);
-        rowSeperator.setLayoutParams(new TableRow.LayoutParams(1,tableRowHeight));
-        rowSeperator.setBackgroundColor(getResources().getColor(R.color.pressed_mistro));
-        return rowSeperator;
-    }
-    
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/FarmerRegistrationActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/FarmerRegistrationActivity.java
deleted file mode 100644
index d916137..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/FarmerRegistrationActivity.java
+++ /dev/null
@@ -1,610 +0,0 @@
-package org.cgiar.ilri.mistro.farmer;
-
-import android.app.AlertDialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.location.Criteria;
-import android.location.Location;
-import android.location.LocationListener;
-import android.location.LocationManager;
-import android.nfc.Tag;
-import android.os.AsyncTask;
-import android.os.Bundle;
-import android.provider.Settings;
-import android.telephony.TelephonyManager;
-import android.util.Log;
-import android.view.KeyEvent;
-import android.view.View;
-import android.widget.ArrayAdapter;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.Spinner;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import com.actionbarsherlock.app.SherlockActivity;
-import com.actionbarsherlock.view.Menu;
-import com.actionbarsherlock.view.MenuInflater;
-import com.actionbarsherlock.view.MenuItem;
-
-import org.cgiar.ilri.mistro.farmer.backend.DataHandler;
-import org.cgiar.ilri.mistro.farmer.backend.Locale;
-import org.cgiar.ilri.mistro.farmer.backend.database.DatabaseHelper;
-import org.cgiar.ilri.mistro.farmer.carrier.Farmer;
-import org.json.JSONArray;
-import org.json.JSONObject;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class FarmerRegistrationActivity extends SherlockActivity implements MistroActivity, View.OnClickListener,LocationListener
-{
-    public static final String TAG="FarmerRegistrationActivity";
-
-    private boolean cacheData;
-
-    private String latitude;
-    private String longitude;
-    private TextView fullNameTV;
-    private EditText fullNameET;
-    private TextView preferredLanguageTV;
-    private Spinner preferredLanguageS;
-    private TextView extensionPersonnelTV;
-    private Spinner extensionPersonnelS;
-    private TextView siteTV;
-    private Spinner siteS;
-    private TextView mobileNumberTV;
-    private EditText mobileNumberET;
-    private TextView numberOfCowsTV;
-    private EditText numberOfCowsET;
-    private Button registerButton;
-    private String gpsAlertDialogTitle;
-    private String gpsAlertDialogText;
-    private String okayText;
-    private String cancelText;
-    private String networkAlertTitle;
-    private String networkAlertText;
-    private String nameETEmptyWarning;
-    private String mobileNoETEmptyWarning;
-    private  LocationManager locationManager;
-    private String loadingPleaseWait;
-    private List<String> vetNames;
-    private boolean isInFarm;
-    private List<String> languages;
-    private int preferredLanguageIndex;
-
-    private Farmer farmer;
-    @Override
-    protected void onCreate(Bundle savedInstanceState)
-    {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_farmer_registration);
-        //DataHandler.requestPermissionToUseSMS(this);
-
-        //init child views
-        languages = Locale.getAllLanguages(this);
-        cacheData = true;
-        isInFarm = false;
-        preferredLanguageIndex = -1;
-
-        fullNameTV=(TextView)this.findViewById(R.id.full_name_tv);
-        fullNameET=(EditText)this.findViewById(R.id.full_name_et);
-        preferredLanguageTV = (TextView)this.findViewById(R.id.preferred_language_tv);
-        preferredLanguageS = (Spinner)this.findViewById(R.id.preferred_language_s);
-        extensionPersonnelTV=(TextView)this.findViewById(R.id.extension_personnel_tv);
-        extensionPersonnelS=(Spinner)this.findViewById(R.id.extension_personnel_s);
-        mobileNumberTV=(TextView)this.findViewById(R.id.mobile_number_tv);
-        mobileNumberET=(EditText)this.findViewById(R.id.mobile_number_et);
-        TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
-        siteTV = (TextView)this.findViewById(R.id.site_tv);
-        siteS = (Spinner)this.findViewById(R.id.site_s);
-        //Toast.makeText(this,telephonyManager.getSimSerialNumber(),Toast.LENGTH_LONG).show();
-        mobileNumberET.setText(telephonyManager.getLine1Number());
-        numberOfCowsTV=(TextView)this.findViewById(R.id.number_of_cows_tv);
-        numberOfCowsET=(EditText)this.findViewById(R.id.number_of_cows_et);
-        registerButton=(Button)this.findViewById(R.id.register_button);
-        registerButton.setOnClickListener(this);
-
-        //init text according to locale
-        initTextInViews();
-
-        FetchVetsThread fetchVetsThread = new FetchVetsThread();
-        fetchVetsThread.execute(0);
-    }
-
-    public boolean onCreateOptionsMenu(Menu menu) {
-        MenuInflater inflater = getSupportMenuInflater();
-        inflater.inflate(R.menu.farmer_registration, menu);
-        return true;
-    }
-
-    @Override
-    public boolean onKeyDown(int keyCode, KeyEvent event) {
-        if(keyCode == KeyEvent.KEYCODE_BACK){
-            Intent intent = new Intent(FarmerRegistrationActivity.this, LandingActivity.class);
-            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-            startActivity(intent);
-        }
-        return super.onKeyDown(keyCode, event);
-    }
-
-    public boolean onOptionsItemSelected(MenuItem item) {
-        // Handle item selection
-        if(Language.processLanguageMenuItemSelected(this, this, item)){
-            return true;
-        }
-        return false;
-    }
-
-    private void cacheEditTextData(){
-        if(cacheData) {
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_FULL_NAME, fullNameET.getText().toString());
-            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_MOBILE_NUMBER, mobileNumberET.getText().toString());
-        }
-    }
-
-    private void restoreEditTextData(){
-        fullNameET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_FRA_FULL_NAME, ""));
-        mobileNumberET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_FRA_MOBILE_NUMBER, ""));
-    }
-
-    private void clearEditTextDataCache(){
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_FULL_NAME, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_MOBILE_NUMBER, "");
-
-        cacheData = false;
-    }
-
-    @Override
-    protected void onResume()
-    {
-        super.onResume();
-
-        restoreEditTextData();
-
-        Bundle bundle=this.getIntent().getExtras();
-        if(bundle!=null)
-        {
-            farmer=bundle.getParcelable(Farmer.PARCELABLE_KEY);
-        }
-        if(farmer!=null)
-        {
-            fullNameET.setText(farmer.getFullName());
-            Log.d(TAG, "Full name: " + farmer.getFullName());
-            List<String> tmpVetNames = new ArrayList<String>();
-            tmpVetNames.add("");
-            String selectedEP = farmer.getExtensionPersonnel();
-            int epSelection = 0;
-            if(selectedEP!= null && selectedEP.length() > 0){
-                tmpVetNames.add(selectedEP);
-                epSelection = 1;
-            }
-            ArrayAdapter<String> epArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,tmpVetNames);
-            epArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-            extensionPersonnelS.setAdapter(epArrayAdapter);
-            extensionPersonnelS.setSelection(epSelection);
-
-            String prefLocale = farmer.getPreferredLocale();
-            if(prefLocale != null && prefLocale.length() > 0){
-                for(int i = 0; i < languages.size(); i++){
-                    if(languages.get(i).equals(Locale.getLanguage(this, prefLocale))){
-                        preferredLanguageIndex = i;
-                    }
-                }
-            }
-
-            Log.d(TAG, "Preferred locale: "+farmer.getPreferredLocale());
-
-            String[] sites = this.getResources().getStringArray(R.array.sites);
-            for(int i = 0; i < sites.length;i++){
-                if(sites[i].equals(farmer.getSite())){
-                    siteS.setSelection(i);
-                }
-            }
-
-            Log.d(TAG,"Extension Personnel: "+farmer.getExtensionPersonnel());
-            mobileNumberET.setText(farmer.getMobileNumber());
-            Log.d(TAG,"Mobile number: "+farmer.getMobileNumber());
-            numberOfCowsET.setText(String.valueOf(farmer.getCowNumber()));
-            Log.d(TAG,"Number of Cows: "+String.valueOf(farmer.getCowNumber()));
-            if((farmer.getLatitude()==null||farmer.getLatitude().length()==0)||(farmer.getLongitude()==null||farmer.getLongitude().length()==0))
-            {
-                getGPSCoordinates();
-            }
-        }
-        else
-        {
-            getGPSCoordinates();
-            Log.d(TAG, "Farmer object is null");
-        }
-
-    }
-
-    @Override
-    protected void onPause()
-    {
-        super.onPause();
-
-        cacheEditTextData();
-
-        if(locationManager!=null)
-        {
-            locationManager.removeUpdates(this);
-        }
-    }
-
-    @Override
-    public void initTextInViews()
-    {
-        setTitle(Locale.getStringInLocale("farmer_registration", this));
-        fullNameTV.setText(" * " + Locale.getStringInLocale("full_name", this));
-        extensionPersonnelTV.setText(" * " + Locale.getStringInLocale("extension_p", this));
-        mobileNumberTV.setText(" * " + Locale.getStringInLocale("mobile_number", this));
-        numberOfCowsTV.setText(" * "+Locale.getStringInLocale("number_of_cows",this));
-        preferredLanguageTV.setText(" * "+Locale.getStringInLocale("preferred_language", this));
-        siteTV.setText(" * "+Locale.getStringInLocale("site", this));
-        ArrayAdapter<String> siteArrayAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, getResources().getStringArray(R.array.sites));
-        siteArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        siteS.setAdapter(siteArrayAdapter);
-
-        ArrayAdapter<String> languageAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item, languages);
-        languageAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        preferredLanguageS.setAdapter(languageAdapter);
-
-        if(preferredLanguageIndex != -1) preferredLanguageS.setSelection(preferredLanguageIndex);
-
-        registerButton.setText(Locale.getStringInLocale("register",this));
-        gpsAlertDialogTitle=Locale.getStringInLocale("enable_gps",this);
-        gpsAlertDialogText=Locale.getStringInLocale("reason_for_enabling_gps",this);
-        okayText=Locale.getStringInLocale("okay",this);
-        cancelText=Locale.getStringInLocale("cancel",this);
-        networkAlertTitle=Locale.getStringInLocale("enable_network",this);
-        networkAlertText=Locale.getStringInLocale("reason_for_enabling_network",this);
-        nameETEmptyWarning=Locale.getStringInLocale("enter_your_name",this);
-        mobileNoETEmptyWarning=Locale.getStringInLocale("enter_your_mobile_no",this);
-        loadingPleaseWait=Locale.getStringInLocale("loading_please_wait",this);
-    }
-
-    private void cacheFarmer(boolean isInFarm)
-    {
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_FULL_NAME, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_EXTENSION_PERSONNEL, "");
-        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_MOBILE_NUMBER, "");
-
-        if(farmer==null)
-        {
-            farmer=new Farmer();
-        }
-        farmer.setFullName(fullNameET.getText().toString());
-        if(vetNames != null && extensionPersonnelS.getSelectedItemPosition() != -1){
-            farmer.setExtensionPersonnel(vetNames.get(extensionPersonnelS.getSelectedItemPosition()));
-        }
-        else{
-            farmer.setExtensionPersonnel("");
-        }
-
-        if(languages != null && preferredLanguageS.getSelectedItemPosition() != -1){
-            farmer.setPreferredLocale(Locale.getLocaleCode(this, languages.get(preferredLanguageS.getSelectedItemPosition())));
-        }
-
-        farmer.setMobileNumber(mobileNumberET.getText().toString());
-        farmer.setCowNumber((numberOfCowsET.getText().toString()==null||numberOfCowsET.getText().toString().length()==0) ? 0:Integer.parseInt(numberOfCowsET.getText().toString()));//Integer.parseInt(numberOfCowsET.getText().toString())
-        if(isInFarm) {
-            farmer.setLatitude(latitude);
-            farmer.setLongitude(longitude);
-        }
-        else {
-            farmer.setLatitude("");
-            farmer.setLongitude("");
-        }
-        String[] sites = getResources().getStringArray(R.array.sites);
-        farmer.setSite(sites[siteS.getSelectedItemPosition()]);
-        farmer.setMode(Farmer.MODE_INITIAL_REGISTRATION);
-        TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
-        farmer.setSimCardSN(telephonyManager.getSimSerialNumber());
-        //TODO:save gps coordinates
-    }
-
-    @Override
-    public void onClick(View view)
-    {
-        if(view==registerButton)
-        {
-            buildGPSAlert();
-        }
-    }
-
-    public void registerButtonClicked(boolean isInFarm){
-        if(validateInput(isInFarm)) {
-            cacheFarmer(isInFarm);
-            String numberOfCowsString=numberOfCowsET.getText().toString();
-            if(numberOfCowsString!=null && numberOfCowsString.length()>0 && Integer.parseInt(numberOfCowsString)>0)
-            {
-                clearEditTextDataCache();
-
-                int numberOfCows=Integer.valueOf(numberOfCowsString);
-                Intent intent=new Intent(FarmerRegistrationActivity.this,CowRegistrationActivity.class);
-
-                //intent.putExtra(CowRegistrationActivity.KEY_MODE,CowRegistrationActivity.MODE_COW);
-                intent.putExtra(CowRegistrationActivity.KEY_INDEX,0);
-                intent.putExtra(CowRegistrationActivity.KEY_NUMBER_OF_COWS,numberOfCows);
-                Bundle bundle=new Bundle();
-                bundle.putParcelable(Farmer.PARCELABLE_KEY, farmer);
-                intent.putExtras(bundle);
-                startActivity(intent);
-            }
-            else
-            {
-                Log.d(TAG, farmer.getJsonObject().toString());
-                sendDataToServer(farmer.getJsonObject());
-            }
-        }
-    }
-
-    private void getGPSCoordinates() {
-        locationManager=(LocationManager)getSystemService(LOCATION_SERVICE);
-        if(locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER))
-        {
-            //Toast.makeText(this,"gps started",Toast.LENGTH_LONG).show();
-            Criteria criteria=new Criteria();
-            String provider=locationManager.getBestProvider(criteria,false);
-            Location location=locationManager.getLastKnownLocation(provider);
-            locationManager.requestLocationUpdates(provider,18000,1000,this);//If farmer  is moving at 200km/h, will still be able to update!
-            if(location!=null)
-            {
-                onLocationChanged(location);
-            }
-        }
-        else
-        {
-            AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(this);
-            alertDialogBuilder.setTitle(gpsAlertDialogTitle);
-            alertDialogBuilder
-                    .setMessage(gpsAlertDialogText)
-                    .setCancelable(false)
-                    .setPositiveButton(okayText, new DialogInterface.OnClickListener()
-                    {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which)
-                        {
-                            Intent intent=new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
-                            startActivity(intent);
-                        }
-                    })
-                    .setNegativeButton(cancelText, new DialogInterface.OnClickListener()
-                    {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which)
-                        {
-                            dialog.cancel();
-                            Intent intent=new Intent(FarmerRegistrationActivity.this,LandingActivity.class);
-                            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-                            startActivity(intent);
-                        }
-                    });
-            AlertDialog alertDialog=alertDialogBuilder.create();
-            alertDialog.show();
-        }
-    }
-
-    private void sendDataToServer(JSONObject jsonObject)
-    {
-        ServerRegistrationThread serverRegistrationThread=new ServerRegistrationThread();
-        serverRegistrationThread.execute(jsonObject);
-    }
-
-    private boolean validateInput(boolean isInFarm)
-    {
-        String nameText=fullNameET.getText().toString();
-        if(nameText==null || nameText.equals(""))
-        {
-            Toast.makeText(this,nameETEmptyWarning,Toast.LENGTH_LONG).show();
-            return false;
-        }
-        else if(nameText.split(" ").length < 2){
-            Toast.makeText(this, Locale.getStringInLocale("enter_two_names", this), Toast.LENGTH_LONG).show();
-            return false;
-        }
-
-        String mobileNumberText=mobileNumberET.getText().toString();
-        if(mobileNumberText==null||mobileNumberText.equals(""))
-        {
-            Toast.makeText(this,mobileNoETEmptyWarning,Toast.LENGTH_LONG).show();
-            return false;
-        }
-        else if(mobileNumberText.length() != 10){
-            Toast.makeText(this, Locale.getStringInLocale("phone_number_not_valid", this), Toast.LENGTH_LONG).show();
-            return false;
-        }
-
-        if(vetNames == null){
-            Toast.makeText(this, Locale.getStringInLocale("epersonnel_tshoot", this), Toast.LENGTH_LONG).show();
-            return false;
-        }
-        else if(extensionPersonnelS.getSelectedItemPosition() == -1 || vetNames.get(extensionPersonnelS.getSelectedItemPosition()).length() == 0){
-            Toast.makeText(this, Locale.getStringInLocale("select_epersonnel", this), Toast.LENGTH_LONG).show();
-            return  false;
-        }
-
-        String[] sites = getResources().getStringArray(R.array.sites);
-        if(siteS.getSelectedItemPosition() != -1 && sites[siteS.getSelectedItemPosition()].length() == 0){
-            Toast.makeText(this, Locale.getStringInLocale("specify_site", this), Toast.LENGTH_LONG).show();
-            return false;
-        }
-
-        if(isInFarm && (longitude == null || longitude.length() == 0 || latitude == null || latitude.length() == 0)) {
-            //Toast.makeText(this,Locale.getStringInLocale("gps_narrowing_down_on_loc",this),Toast.LENGTH_LONG).show();
-            //return false;
-            Log.w(TAG, Locale.getStringInLocale("unable_to_lock_gps", this));
-        }
-
-        if(numberOfCowsET.getText().toString().length()==0){
-            Toast.makeText(this,Locale.getStringInLocale("enter_no_cows_own",this),Toast.LENGTH_LONG).show();
-            return false;
-        }
-        return true;
-    }
-
-    @Override
-    public void onLocationChanged(Location location)
-    {
-        latitude=String.valueOf(location.getLatitude());
-        longitude=String.valueOf(location.getLongitude());
-        Toast.makeText(this, Locale.getStringInLocale("gps_recorded", this), Toast.LENGTH_LONG).show();
-        Log.d(TAG,"latitude : "+latitude);
-        Log.d(TAG,"longitude : "+longitude);
-    }
-
-    @Override
-    public void onStatusChanged(String provider, int status, Bundle extras) {
-
-    }
-
-    @Override
-    public void onProviderEnabled(String provider) {
-
-    }
-
-    @Override
-    public void onProviderDisabled(String provider) {
-
-    }
-
-    private void buildGPSAlert(){
-        AlertDialog.Builder builder = new AlertDialog.Builder(this);
-        builder.setMessage(Locale.getStringInLocale("are_you_in_farm",this));
-        builder.setPositiveButton(Locale.getStringInLocale("yes",this), new DialogInterface.OnClickListener(){
-
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                dialog.dismiss();
-                registerButtonClicked(true);
-            }
-        });
-        builder.setNegativeButton(Locale.getStringInLocale("no",this), new DialogInterface.OnClickListener(){
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                dialog.dismiss();
-                registerButtonClicked(false);
-            }
-        });
-
-        AlertDialog alertDialog = builder.create();
-        alertDialog.show();
-    }
-
-    private class ServerRegistrationThread extends AsyncTask<JSONObject,Integer,String>
-    {
-        ProgressDialog progressDialog;
-
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-            progressDialog = ProgressDialog.show(FarmerRegistrationActivity.this, "",loadingPleaseWait, true);
-        }
-
-        @Override
-        protected String doInBackground(JSONObject... params)
-        {
-            Log.d(TAG,"sending registration data to server");
-            String responseString=DataHandler.sendDataToServer(FarmerRegistrationActivity.this, params[0].toString(),DataHandler.FARMER_REGISTRATION_URL, true);
-
-            return responseString;
-        }
-
-        @Override
-        protected void onPostExecute(String result)
-        {
-            super.onPostExecute(result);
-            progressDialog.dismiss();
-
-            if(result == null){
-                String httpError = DataHandler.getSharedPreference(FarmerRegistrationActivity.this, "http_error", "No Error thrown to application. Something must be really wrong");
-                Toast.makeText(FarmerRegistrationActivity.this,httpError,Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
-                Toast.makeText(FarmerRegistrationActivity.this, Locale.getStringInLocale("generic_sms_error", FarmerRegistrationActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
-                Toast.makeText(FarmerRegistrationActivity.this, Locale.getStringInLocale("no_service", FarmerRegistrationActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
-                Toast.makeText(FarmerRegistrationActivity.this, Locale.getStringInLocale("radio_off", FarmerRegistrationActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
-                Toast.makeText(FarmerRegistrationActivity.this, Locale.getStringInLocale("server_not_receive_sms", FarmerRegistrationActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.CODE_NUMBER_IN_USE)){
-                Toast.makeText(FarmerRegistrationActivity.this, Locale.getStringInLocale("number_in_use", FarmerRegistrationActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.ACKNOWLEDGE_OK))
-            {
-                Log.d(TAG,"data successfully sent to server");
-                Utils.showSuccessfullRegistration(FarmerRegistrationActivity.this,null);
-                //Intent intent=new Intent(FarmerRegistrationActivity.this,LandingActivity.class);
-                //startActivity(intent);
-            }
-        }
-    }
-
-    private class FetchVetsThread extends AsyncTask<Integer, Integer, String>{
-        private ProgressDialog progressDialog;
-
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-            progressDialog = ProgressDialog.show(FarmerRegistrationActivity.this, "",loadingPleaseWait, true);
-        }
-
-        @Override
-        protected String doInBackground(Integer... params) {
-            Log.d(TAG, "Fetching vets from server");
-
-            return DataHandler.sendDataToServer(FarmerRegistrationActivity.this, "", DataHandler.FARMER_FETCH_VETS_URL, true, DatabaseHelper.TABLE_EXTENSION_PERSONNEL);
-        }
-
-        @Override
-        protected void onPostExecute(String result) {
-            super.onPostExecute(result);
-            progressDialog.dismiss();
-
-            if(result == null){
-                Toast.makeText(FarmerRegistrationActivity.this, Locale.getStringInLocale("unable_to_get_epersonnel", FarmerRegistrationActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else{
-                try{
-                    Log.d(TAG, "result is "+result);
-                    JSONArray vetJsonArray = new JSONArray(result);
-                    vetNames = new ArrayList<String>();
-                    vetNames.add("");
-                    for(int i = 0; i < vetJsonArray.length(); i++){
-                        vetNames.add(vetJsonArray.getJSONObject(i).getString("name"));
-                    }
-
-                    int selection = 0;
-                    if(farmer != null){
-                        String selectedEP = farmer.getExtensionPersonnel();
-                        if(selectedEP != null && selectedEP.length() > 0){
-                            for(int i =0; i < vetNames.size(); i++){
-                                if(vetNames.get(i).equals(selectedEP)){
-                                    selection = i;
-                                }
-                            }
-                        }
-                    }
-
-                    ArrayAdapter<String> epArrayAdapter = new ArrayAdapter<String>(FarmerRegistrationActivity.this, android.R.layout.simple_spinner_item, vetNames);
-                    epArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-                    extensionPersonnelS.setAdapter(epArrayAdapter);
-                    extensionPersonnelS.setSelection(selection);
-                }
-                catch (Exception e){
-                    e.printStackTrace();
-                }
-            }
-        }
-    }
-
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/FarmerSelectionActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/FarmerSelectionActivity.java
deleted file mode 100644
index 6ab4c46..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/FarmerSelectionActivity.java
+++ /dev/null
@@ -1,310 +0,0 @@
-package org.cgiar.ilri.mistro.farmer;
-
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.Intent;
-import android.os.AsyncTask;
-import android.os.Bundle;
-import android.telephony.TelephonyManager;
-import android.util.Log;
-import android.view.View;
-import android.widget.AdapterView;
-import android.widget.ArrayAdapter;
-import android.widget.Button;
-import android.widget.Spinner;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import com.actionbarsherlock.app.SherlockActivity;
-import com.actionbarsherlock.view.Menu;
-import com.actionbarsherlock.view.MenuInflater;
-import com.actionbarsherlock.view.MenuItem;
-
-import org.cgiar.ilri.mistro.farmer.backend.DataHandler;
-import org.cgiar.ilri.mistro.farmer.backend.Locale;
-import org.cgiar.ilri.mistro.farmer.carrier.Farmer;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.ArrayList;
-import java.util.List;
-
-
-public class FarmerSelectionActivity extends SherlockActivity implements MistroActivity, View.OnClickListener, AdapterView.OnItemSelectedListener {
-
-    private static final String TAG = "FarmerSelectionActivity";
-    public static final String KEY_ADMIN_DATA= "adminData";
-
-    private Menu menu;
-
-    private TextView filterFarmersTV;
-    private Spinner filterFarmersS;
-    private TextView selectFarmerTV;
-    private Spinner selectFarmerS;
-    private Button selectB;
-    private Button backB;
-
-    private List<Farmer> allFarmers;
-    private List<Farmer> filteredFarmers;
-    private JSONObject adminData;
-    private List<String> filters;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_farmer_selection);
-
-        filterFarmersTV = (TextView)findViewById(R.id.filter_farmers_tv);
-        filterFarmersS = (Spinner)findViewById(R.id.filter_farmers_s);
-        filterFarmersS.setOnItemSelectedListener(this);
-        selectFarmerTV = (TextView)findViewById(R.id.select_farmer_tv);
-        selectFarmerS = (Spinner)findViewById(R.id.select_farmer_s);
-
-        selectB = (Button)findViewById(R.id.select_b);
-        selectB.setOnClickListener(this);
-        backB = (Button)findViewById(R.id.back_b);
-        backB.setOnClickListener(this);
-
-        initTextInViews();
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-
-        Bundle bundle=this.getIntent().getExtras();
-        if(bundle != null){
-            String adminJSONString = bundle.getString(KEY_ADMIN_DATA);
-            loadAdminData(adminJSONString);
-        }
-        else{
-            TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
-            if(telephonyManager != null){
-                GetFarmerDataThread getFarmerDataThread = new GetFarmerDataThread();
-                getFarmerDataThread.execute(telephonyManager.getSimSerialNumber());
-            }
-            else{
-                Toast.makeText(this,Locale.getStringInLocale("no_sim_card",this),Toast.LENGTH_LONG).show();
-            }
-        }
-    }
-
-    private void loadAdminData(String adminJSONString){
-        try {
-            adminData = new JSONObject(adminJSONString);
-            JSONArray farmerData = adminData.getJSONArray("farmers");
-
-            filters = new ArrayList<String>();
-            filters.add(Locale.getStringInLocale("all_farmers", this));
-            filters.add(Locale.getStringInLocale("farmers_no_epersonnel", this));
-            if(adminData.getInt("is_super") == 1){//admin is super
-                JSONArray allEPersonnel = adminData.getJSONArray("extension_personnel");
-                for(int i = 0; i < allEPersonnel.length(); i++){
-                    JSONObject currEPersonnel = allEPersonnel.getJSONObject(i);
-                    filters.add(Locale.getStringInLocale("farmers_tied_to", this) + " " + currEPersonnel.getString("name"));
-                }
-            }
-            else{
-                filters.add(Locale.getStringInLocale("farmers_tied_to", this) +" "+ adminData.getString("name"));
-            }
-            ArrayAdapter<String> filterArrayAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, filters);
-            filterArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-            filterFarmersS.setAdapter(filterArrayAdapter);
-
-            allFarmers = new ArrayList<Farmer>(farmerData.length());
-            filteredFarmers = new ArrayList<Farmer>(farmerData.length());
-            for (int i = 0; i < farmerData.length(); i++) {
-                Farmer currFarmer = new Farmer(farmerData.getJSONObject(i));
-                allFarmers.add(currFarmer);
-                filteredFarmers.add(currFarmer);
-            }
-
-            setFilteredFarmerList(filteredFarmers);
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
-    private void setFilteredFarmerList(List<Farmer> filteredFarmers){
-        List<String> farmerNames = new ArrayList<String>(filteredFarmers.size());
-        for (int i = 0; i < filteredFarmers.size(); i++) {
-            Farmer currFarmer = filteredFarmers.get(i);
-            farmerNames.add(currFarmer.getFullName());
-        }
-
-        ArrayAdapter<String> farmerArrayAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, farmerNames);
-        farmerArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        selectFarmerS.setAdapter(farmerArrayAdapter);
-
-        if(this.filteredFarmers != filteredFarmers) {
-            this.filteredFarmers = filteredFarmers;
-        }
-    }
-
-    public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu) {
-        MenuInflater inflater = getSupportMenuInflater();
-        inflater.inflate(R.menu.farmer_selection, menu);
-        this.menu = menu;
-        initMenuText();
-        return true;
-    }
-
-    public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem item) {
-        // Handle item selection
-        if(Language.processLanguageMenuItemSelected(this, this, item)){
-            return true;
-        }
-        else if(item.getItemId() == R.id.action_back_main_menu) {
-            Intent intent = new Intent(this, MainMenu.class);
-            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_ADMIN);
-            intent.putExtra(MainMenu.KEY_ADMIN_DATA, adminData.toString());
-            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-            startActivity(intent);
-        }
-        return false;
-    }
-
-    @Override
-    public void initTextInViews() {
-        setTitle(Locale.getStringInLocale("select_farmer", this));
-
-        filterFarmersTV.setText(Locale.getStringInLocale("filter_farmers", this));
-        selectFarmerTV.setText(Locale.getStringInLocale("select_farmer", this));
-        selectB.setText(Locale.getStringInLocale("select", this));
-        backB.setText(Locale.getStringInLocale("back", this));
-    }
-
-    private void initMenuText(){
-        if(this.menu != null){
-            MenuItem mainMenuMI = menu.findItem(R.id.action_back_main_menu);
-            mainMenuMI.setTitle(Locale.getStringInLocale("back_to_main_menu", this));
-        }
-    }
-
-    @Override
-    public void onClick(View v) {
-        if(v.equals(selectB)){
-            if(selectFarmerS.getSelectedItemPosition() != -1 && filteredFarmers.size() > selectFarmerS.getSelectedItemPosition()){
-                Log.d(TAG, "Selected farmer index = "+String.valueOf(selectFarmerS.getSelectedItemPosition()));
-                Farmer selectedFarmer = filteredFarmers.get(selectFarmerS.getSelectedItemPosition());
-                Intent intent = new Intent(this, EditFarmerActivity.class);
-                Bundle bundle = new Bundle();
-                bundle.putParcelable(Farmer.PARCELABLE_KEY, selectedFarmer);
-                intent.putExtras(bundle);
-                intent.putExtra(KEY_ADMIN_DATA, adminData.toString());
-                startActivity(intent);
-            }
-        }
-        else if(v.equals(backB)){
-            Intent intent = new Intent(this, MainMenu.class);
-            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_ADMIN);
-            intent.putExtra(MainMenu.KEY_ADMIN_DATA, adminData.toString());
-            startActivity(intent);
-        }
-    }
-
-    @Override
-    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
-        if(parent == filterFarmersS){
-            if(filterFarmersS.getSelectedItemPosition() == 0){//all farmers
-                List<Farmer> newlyFilteredFarmers = this.allFarmers;
-                setFilteredFarmerList(newlyFilteredFarmers);
-            }
-            else if(filterFarmersS.getSelectedItemPosition() == 1){//farmers without extension personnel
-                List<Farmer> newlyFilteredFarmers = new ArrayList<Farmer>();
-                for(int i =0; i<allFarmers.size(); i++){
-                    Farmer currFarmer = allFarmers.get(i);
-                    if(DataHandler.isNull(currFarmer.getExtensionPersonnel()) || currFarmer.getExtensionPersonnel().length() == 0){
-                        newlyFilteredFarmers.add(currFarmer);
-                    }
-                    else{
-                        Log.d(TAG, currFarmer.getExtensionPersonnel()+" does not qualify to be null");
-                    }
-                }
-
-                setFilteredFarmerList(newlyFilteredFarmers);
-            }
-            else if(filterFarmersS.getSelectedItemPosition() != -1){
-                String selection = filters.get(filterFarmersS.getSelectedItemPosition());
-
-                List<Farmer> newlyFilteredFarmers = new ArrayList<Farmer>();
-                for(int i = 0; i < allFarmers.size(); i++){
-                    Farmer currFarmer = allFarmers.get(i);
-                    if(currFarmer.getExtensionPersonnel() != null && currFarmer.getExtensionPersonnel().length() > 0 &&
-                            selection.contains(currFarmer.getExtensionPersonnel())){
-                        newlyFilteredFarmers.add(currFarmer);
-                    }
-                    else{
-                        Log.d(TAG, currFarmer.getExtensionPersonnel()+" does not match "+selection);
-                    }
-                }
-
-                setFilteredFarmerList(newlyFilteredFarmers);
-            }
-        }
-    }
-
-    @Override
-    public void onNothingSelected(AdapterView<?> parent) {
-
-    }
-
-    private class GetFarmerDataThread extends AsyncTask<String, Integer, String>{
-
-        private ProgressDialog progressDialog;
-
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-            progressDialog = ProgressDialog.show(FarmerSelectionActivity.this, "", Locale.getStringInLocale("loading_please_wait", FarmerSelectionActivity.this), true);
-        }
-
-        @Override
-        protected String doInBackground(String... params) {
-            JSONObject jsonObject=new JSONObject();
-            try
-            {
-                jsonObject.put("simCardSN",params[0]);
-                jsonObject.put("deviceType", "Android");
-                //jsonObject.put("mobileNumber",params[1]);
-                String result = DataHandler.sendDataToServer(FarmerSelectionActivity.this, jsonObject.toString(), DataHandler.ADMIN_AUTHENTICATION_URL, true);
-                return result;
-            }
-            catch (JSONException e)
-            {
-                e.printStackTrace();
-            }
-            return null;
-        }
-
-        @Override
-        protected void onPostExecute(String result) {
-            super.onPostExecute(result);
-            progressDialog.dismiss();
-            if(result==null){
-                String httpError = DataHandler.getSharedPreference(FarmerSelectionActivity.this, "http_error", "No Error thrown to application. Something must be really wrong");
-                Toast.makeText(FarmerSelectionActivity.this, httpError, Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
-                Toast.makeText(FarmerSelectionActivity.this, Locale.getStringInLocale("generic_sms_error", FarmerSelectionActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
-                Toast.makeText(FarmerSelectionActivity.this, Locale.getStringInLocale("no_service", FarmerSelectionActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
-                Toast.makeText(FarmerSelectionActivity.this, Locale.getStringInLocale("radio_off", FarmerSelectionActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
-                Toast.makeText(FarmerSelectionActivity.this, Locale.getStringInLocale("server_not_receive_sms", FarmerSelectionActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.CODE_USER_NOT_AUTHENTICATED)){
-                Log.w(TAG, "Admin not authenticated. May mean he/she changed sim cards after logging in");
-                Toast.makeText(FarmerSelectionActivity.this, Locale.getStringInLocale("sim_card_not_admin", FarmerSelectionActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else{
-                loadAdminData(result);
-            }
-        }
-    }
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/FertilityActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/FertilityActivity.java
deleted file mode 100644
index b32bcdf..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/FertilityActivity.java
+++ /dev/null
@@ -1,125 +0,0 @@
-package org.cgiar.ilri.mistro.farmer;
-
-import android.app.Dialog;
-import android.content.Intent;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.Button;
-import android.widget.Toast;
-
-import com.actionbarsherlock.app.SherlockActivity;
-import com.actionbarsherlock.view.Menu;
-import com.actionbarsherlock.view.MenuInflater;
-import com.actionbarsherlock.view.MenuItem;
-
-import org.cgiar.ilri.mistro.farmer.backend.Locale;
-import org.cgiar.ilri.mistro.farmer.carrier.Cow;
-
-public class FertilityActivity extends SherlockActivity implements MistroActivity, View.OnClickListener{
-
-    private Menu menu;
-    private Button servicingB;
-    private Button calvingB;
-    private Button backB;
-
-    private Dialog servicingTypeDialog;
-    private Button bullB;
-    private Button aiB;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_fertility);
-
-        servicingB = (Button) this.findViewById(R.id.servicing_b);
-        servicingB.setOnClickListener(this);
-
-        calvingB = (Button) this.findViewById(R.id.calving_b);
-        calvingB.setOnClickListener(this);
-
-        backB = (Button) this.findViewById(R.id.back_b);
-        backB.setOnClickListener(this);
-
-        servicingTypeDialog =new Dialog(this);
-        servicingTypeDialog.setContentView(R.layout.dialog_servicing_type);
-        bullB =(Button) servicingTypeDialog.findViewById(R.id.bull_b);
-        bullB.setOnClickListener(this);
-
-        aiB = (Button) servicingTypeDialog.findViewById(R.id.ai_b);
-        aiB.setOnClickListener(this);
-        initTextInViews();
-    }
-
-    public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu) {
-        MenuInflater inflater = getSupportMenuInflater();
-        inflater.inflate(R.menu.milk_production, menu);
-        this.menu = menu;
-        initMenuText();
-        return true;
-    }
-
-    public boolean onOptionsItemSelected(MenuItem item) {
-        // Handle item selection
-        if(Language.processLanguageMenuItemSelected(this, this, item)){
-            return true;
-        }
-        else if(item.getItemId() == R.id.action_back_main_menu) {
-            Intent intent = new Intent(this, MainMenu.class);
-            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_FARMER);
-            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-            startActivity(intent);
-        }
-        return false;
-    }
-
-    @Override
-    public void initTextInViews(){
-        this.setTitle(Locale.getStringInLocale("fertility",this));
-        servicingB.setText(Locale.getStringInLocale("servicing",this));
-        calvingB.setText(Locale.getStringInLocale("calving",this));
-        servicingTypeDialog.setTitle(Locale.getStringInLocale("select_service_type",this));
-        aiB.setText(Locale.getStringInLocale("artificial_inseminamtion",this));
-        bullB.setText(Locale.getStringInLocale("bull_servicing",this));
-        backB.setText(Locale.getStringInLocale("back", this));
-        initMenuText();
-    }
-
-    private void initMenuText(){
-        if(this.menu != null){
-            MenuItem mainMenuMI = menu.findItem(R.id.action_back_main_menu);
-            mainMenuMI.setTitle(Locale.getStringInLocale("back_to_main_menu", this));
-        }
-    }
-
-    @Override
-    public void onClick(View view) {
-        if(view == servicingB){
-            servicingTypeDialog.show();
-        }
-        else if(view == calvingB){
-            Intent intent = new Intent(this, AddEventActivity.class);
-            intent.putExtra(AddEventActivity.KEY_MODE, AddEventActivity.MODE_CALVING);
-            startActivity(intent);
-        }
-        else if(view == bullB){
-            Intent intent = new Intent(this, AddEventActivity.class);
-            intent.putExtra(AddEventActivity.KEY_MODE, AddEventActivity.MODE_SERVICING);
-            intent.putExtra(AddEventActivity.KEY_SERVICING_TYPE, Cow.SERVICE_TYPE_BULL);
-            servicingTypeDialog.dismiss();
-            startActivity(intent);
-        }
-        else if(view == aiB){
-            Intent intent = new Intent(this, AddEventActivity.class);
-            intent.putExtra(AddEventActivity.KEY_MODE, AddEventActivity.MODE_SERVICING);
-            intent.putExtra(AddEventActivity.KEY_SERVICING_TYPE, Cow.SERVICE_TYPE_AI);
-            servicingTypeDialog.dismiss();
-            startActivity(intent);
-        }
-        else if(view == backB){
-            Intent intent = new Intent(this, MainMenu.class);
-            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_FARMER);
-            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-            startActivity(intent);
-        }
-    }
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/LandingActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/LandingActivity.java
deleted file mode 100644
index 3a53ea1..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/LandingActivity.java
+++ /dev/null
@@ -1,459 +0,0 @@
-package org.cgiar.ilri.mistro.farmer;
-
-import android.app.AlertDialog;
-import android.app.Dialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.content.pm.PackageInfo;
-import android.content.pm.PackageManager;
-import android.os.AsyncTask;
-import android.os.Bundle;
-import android.telephony.TelephonyManager;
-import android.util.Log;
-import android.view.View;
-import android.widget.Button;
-import android.widget.CheckBox;
-import android.widget.EditText;
-import android.widget.TextView;
-import android.widget.Toast;
-import com.actionbarsherlock.view.Menu;
-
-import com.actionbarsherlock.app.SherlockActivity;
-import com.actionbarsherlock.view.MenuInflater;
-import com.actionbarsherlock.view.MenuItem;
-
-import org.cgiar.ilri.mistro.farmer.backend.DataHandler;
-import org.cgiar.ilri.mistro.farmer.backend.Locale;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-public class LandingActivity extends SherlockActivity implements MistroActivity, View.OnClickListener
-{
-    private static final String TAG="LandingActivity";
-    private Button loginButton;
-    private Button registerButton;
-    private boolean loginSessionOn=false;
-    private String loginText;
-    private String unsuccessfulAuthText;
-    private String okayText;
-    private String fromAnotherDevWarning;
-    private String yesText;
-    private String noText;
-    private String loginAnywayText;
-    private String registerText;
-    private Dialog changeSystemSimCardDialog;
-    private TextView oldMobileNumberTV;
-    private EditText oldMobileNumberET;
-    private TextView newMobileNumberTV;
-    private EditText newMobileNumberET;
-    private Button changeSystemSimCardB;
-    private String simCardRegistrationText;
-    private String oldNumberNotInSystemText;
-    private String welcomeText;
-    private String loadingPleaseWait;
-    private String serverError;
-    private CheckBox adminFuncCB;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState)
-    {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_landing);
-        //DataHandler.requestPermissionToUseSMS(this);
-
-        //initialize child views
-        loginButton=(Button)this.findViewById(R.id.login_button);
-        loginButton.setOnClickListener(this);
-        registerButton=(Button)this.findViewById(R.id.register_button);
-        registerButton.setOnClickListener(this);
-        changeSystemSimCardDialog=new Dialog(this);
-        changeSystemSimCardDialog.setContentView(R.layout.dialog_change_system_sim_card);
-        oldMobileNumberTV =(TextView)changeSystemSimCardDialog.findViewById(R.id.old_mobile_number_tv);
-        oldMobileNumberET =(EditText)changeSystemSimCardDialog.findViewById(R.id.old_mobile_number_et);
-        changeSystemSimCardB=(Button)changeSystemSimCardDialog.findViewById(R.id.dialog_change_system_ok_b);
-        changeSystemSimCardB.setOnClickListener(this);
-        newMobileNumberTV=(TextView)changeSystemSimCardDialog.findViewById(R.id.new_mobile_number_tv);
-        newMobileNumberET=(EditText)changeSystemSimCardDialog.findViewById(R.id.new_mobile_number_et);
-        TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
-        newMobileNumberET.setText(telephonyManager.getLine1Number());
-
-        adminFuncCB = (CheckBox)this.findViewById(R.id.admin_func_cb);
-
-        //init text according to locale
-        initTextInViews();
-
-        //get version name for the application and toast it
-        try {
-            PackageInfo pInfo = getPackageManager().getPackageInfo(getPackageName(), 0);
-            Toast.makeText(this, "Version "+pInfo.versionName, Toast.LENGTH_LONG).show();
-        } catch (PackageManager.NameNotFoundException e) {
-            e.printStackTrace();
-        }
-    }
-
-    public boolean onCreateOptionsMenu(Menu menu) {
-        MenuInflater inflater = getSupportMenuInflater();
-        inflater.inflate(R.menu.landing_activity, menu);
-        return true;
-    }
-
-    public boolean onOptionsItemSelected(MenuItem item) {
-        // Handle item selection
-        if(Language.processLanguageMenuItemSelected(this, this, item)){
-            return true;
-        }
-        return false;
-    }
-
-    @Override
-    protected void onResume()
-    {
-        super.onResume();
-    }
-
-    @Override
-    public void initTextInViews()
-    {
-        loginButton.setText(Locale.getStringInLocale("login", this));
-        registerButton.setText(Locale.getStringInLocale("register", this));
-        loginText=Locale.getStringInLocale("login", this);
-        unsuccessfulAuthText=Locale.getStringInLocale("sim_card_not_registered", this);
-        okayText=Locale.getStringInLocale("okay", this);
-        fromAnotherDevWarning=Locale.getStringInLocale("logging_in_from_different_device", this);
-        yesText=Locale.getStringInLocale("yes", this);
-        noText=Locale.getStringInLocale("no", this);
-        loginAnywayText=Locale.getStringInLocale("login_anyway", this);
-        registerText=Locale.getStringInLocale("register", this);
-        oldMobileNumberTV.setText(Locale.getStringInLocale("old_mobile_number", this));
-        newMobileNumberTV.setText(Locale.getStringInLocale("new_mobile_number", this));
-        changeSystemSimCardDialog.setTitle(Locale.getStringInLocale("sim_card_registration", this));
-        changeSystemSimCardB.setText(Locale.getStringInLocale("okay", this));
-        simCardRegistrationText=Locale.getStringInLocale("sim_card_registration", this);
-        oldNumberNotInSystemText=Locale.getStringInLocale("old_number_not_in_system", this);
-        welcomeText=Locale.getStringInLocale("welcome", this);
-        loadingPleaseWait=Locale.getStringInLocale("loading_please_wait", this);
-        serverError=Locale.getStringInLocale("problem_connecting_to_server", this);
-        adminFuncCB.setText(Locale.getStringInLocale("admin_functions", this));
-    }
-
-    private void startRegistrationActivity()
-    {
-        Intent intent=new Intent(LandingActivity.this,FarmerRegistrationActivity.class);
-        startActivity(intent);
-    }
-
-    @Override
-    public void onClick(View view)
-    {
-        if(view==registerButton)
-        {
-            startRegistrationActivity();
-        }
-        else if(view==loginButton)
-        {
-            Log.d(TAG,"Login button clicked");
-            if(loginSessionOn == false)
-            {
-                //loginDialog.show();
-                authenticateUser();
-            }
-        }
-        else if(view==changeSystemSimCardB)
-        {
-            registerSimCard();
-        }
-    }
-
-
-
-    private void authenticateUser()
-    {
-        TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
-        if(!adminFuncCB.isChecked()){
-            Log.d(TAG, "Trying to log in as normal farmer");
-            if(telephonyManager.getSimSerialNumber()!=null)
-            {
-                UserAuthenticationThread authenticationThread=new UserAuthenticationThread();
-                authenticationThread.execute(telephonyManager.getSimSerialNumber());
-            }
-            else{
-                Toast.makeText(this,Locale.getStringInLocale("no_sim_card",this),Toast.LENGTH_LONG).show();
-            }
-        }
-        else{
-            Log.d(TAG, "Trying to log in as admin");
-            if(telephonyManager.getSimSerialNumber()!=null)
-            {
-                AdminAuthenticationThread authenticationThread=new AdminAuthenticationThread();
-                authenticationThread.execute(telephonyManager.getSimSerialNumber());
-            }
-            else{
-                Toast.makeText(this,Locale.getStringInLocale("no_sim_card",this),Toast.LENGTH_LONG).show();
-            }
-        }
-    }
-
-    private class UserAuthenticationThread extends AsyncTask<String,Integer,String> {
-        ProgressDialog progressDialog;
-
-        @Override
-        protected void onPreExecute()
-        {
-            super.onPreExecute();
-            loginSessionOn=true;
-            progressDialog= ProgressDialog.show(LandingActivity.this, "",loadingPleaseWait, true);
-
-        }
-
-        @Override
-        protected String doInBackground(String... params)
-        {
-            JSONObject jsonObject=new JSONObject();
-            try
-            {
-                jsonObject.put("simCardSN",params[0]);
-                jsonObject.put("deviceType", "Android");
-                //jsonObject.put("mobileNumber",params[1]);
-                String result = DataHandler.sendDataToServer(LandingActivity.this, jsonObject.toString(),DataHandler.FARMER_AUTHENTICATION_URL, true);
-                return result;
-            }
-            catch (JSONException e)
-            {
-                e.printStackTrace();
-            }
-            return null;
-        }
-
-        @Override
-        protected void onPostExecute(String result)
-        {
-            super.onPostExecute(result);
-            progressDialog.dismiss();
-            loginSessionOn=false;
-            if(result==null)
-            {
-                String httpError = DataHandler.getSharedPreference(LandingActivity.this, "http_error", "No Error thrown to application. Something must be really wrong");
-                Toast.makeText(LandingActivity.this,httpError,Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
-                Toast.makeText(LandingActivity.this, Locale.getStringInLocale("generic_sms_error", LandingActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
-                Toast.makeText(LandingActivity.this, Locale.getStringInLocale("no_service", LandingActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
-                Toast.makeText(LandingActivity.this, Locale.getStringInLocale("radio_off", LandingActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
-                Toast.makeText(LandingActivity.this, Locale.getStringInLocale("server_not_receive_sms", LandingActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.CODE_USER_NOT_AUTHENTICATED))
-            {
-                showRegisterOrLoginDialog();
-            }
-            else {
-                //save farmer data in the database
-                SaveFarmerDataThread saveFarmerDataThread = new SaveFarmerDataThread();
-                saveFarmerDataThread.execute(result);
-
-                Intent intent=new Intent(LandingActivity.this,MainMenu.class);
-                Log.d(TAG, result);
-                intent.putExtra(MainMenu.KEY_FARMER_DATA, result);
-                intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_FARMER);
-                startActivity(intent);
-            }
-        }
-
-        private void showRegisterOrLoginDialog()
-        {
-            AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(LandingActivity.this);
-            alertDialogBuilder.setTitle(loginText);
-            alertDialogBuilder
-                    .setMessage(unsuccessfulAuthText)
-                    .setCancelable(true)
-                    .setPositiveButton(loginAnywayText, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which)
-                        {
-                            changeSystemSimCardDialog.show();
-                        }
-                    })
-                    .setNegativeButton(registerText, new DialogInterface.OnClickListener() {
-
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            dialog.dismiss();
-                            startRegistrationActivity();
-                        }
-                    });
-            AlertDialog alertDialog=alertDialogBuilder.create();
-            alertDialog.show();
-        }
-    }
-
-    private class AdminAuthenticationThread extends AsyncTask<String,Integer,String> {
-        ProgressDialog progressDialog;
-
-        @Override
-        protected void onPreExecute()
-        {
-            super.onPreExecute();
-            loginSessionOn=true;
-            progressDialog= ProgressDialog.show(LandingActivity.this, "",loadingPleaseWait, true);
-
-        }
-
-        @Override
-        protected String doInBackground(String... params)
-        {
-            JSONObject jsonObject=new JSONObject();
-            try
-            {
-                jsonObject.put("simCardSN",params[0]);
-                jsonObject.put("deviceType", "Android");
-                //jsonObject.put("mobileNumber",params[1]);
-                String result = DataHandler.sendDataToServer(LandingActivity.this, jsonObject.toString(),DataHandler.ADMIN_AUTHENTICATION_URL, true);
-                return result;
-            }
-            catch (JSONException e)
-            {
-                e.printStackTrace();
-            }
-            return null;
-        }
-
-        @Override
-        protected void onPostExecute(String result)
-        {
-            super.onPostExecute(result);
-            progressDialog.dismiss();
-            loginSessionOn=false;
-            if(result==null)
-            {
-                String httpError = DataHandler.getSharedPreference(LandingActivity.this, "http_error", "No Error thrown to application. Something must be really wrong");
-                Toast.makeText(LandingActivity.this,httpError,Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
-                Toast.makeText(LandingActivity.this, Locale.getStringInLocale("generic_sms_error", LandingActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
-                Toast.makeText(LandingActivity.this, Locale.getStringInLocale("no_service", LandingActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
-                Toast.makeText(LandingActivity.this, Locale.getStringInLocale("radio_off", LandingActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
-                Toast.makeText(LandingActivity.this, Locale.getStringInLocale("server_not_receive_sms", LandingActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.CODE_USER_NOT_AUTHENTICATED))
-            {
-                Log.w(TAG, "User trying to log in as admin with an unregistered Sim Card");
-                Toast.makeText(LandingActivity.this, Locale.getStringInLocale("sim_card_not_admin", LandingActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else{
-                Log.d(TAG, "Admin data from server = "+result);
-                Intent intent=new Intent(LandingActivity.this,MainMenu.class);
-                intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_ADMIN);
-                intent.putExtra(MainMenu.KEY_ADMIN_DATA, result);
-                startActivity(intent);
-            }
-        }
-    }
-
-    private void registerSimCard()
-    {
-        if(oldMobileNumberET.getText().toString().length() == 0){
-            Toast.makeText(this, Locale.getStringInLocale("enter_old_phone_no", this), Toast.LENGTH_LONG).show();
-        }
-        else if(newMobileNumberET.getText().toString().length() == 0){
-            Toast.makeText(this, Locale.getStringInLocale("enter_new_phone_no", this), Toast.LENGTH_LONG).show();
-        }
-        else{
-            TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
-            if(telephonyManager.getSimSerialNumber()!=null) {
-                SimCardRegistrationThread simCardRegistrationThread=new SimCardRegistrationThread();
-                simCardRegistrationThread.execute(oldMobileNumberET.getText().toString(),newMobileNumberET.getText().toString(),telephonyManager.getSimSerialNumber());
-            }
-        }
-    }
-
-    private class SimCardRegistrationThread extends AsyncTask<String,Integer,String>
-    {
-        private ProgressDialog progressDialog;
-
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-            progressDialog = ProgressDialog.show(LandingActivity.this, "",loadingPleaseWait, true);
-        }
-
-        @Override
-        protected String doInBackground(String... params)
-        {
-
-            JSONObject jsonObject=new JSONObject();
-            try
-            {
-                String result=null;
-                jsonObject.put("oldMobileNumber",params[0]);
-                jsonObject.put("newMobileNumber",params[1]);
-                jsonObject.put("newSimCardSN",params[2]);
-                result= DataHandler.sendDataToServer(LandingActivity.this, jsonObject.toString(),DataHandler.FARMER_SIM_CARD_REGISTRATION_URL, true);
-                return result;
-            }
-            catch (JSONException e)
-            {
-                e.printStackTrace();
-            }
-
-            return null;
-        }
-
-        @Override
-        protected void onPostExecute(String result)
-        {
-            super.onPostExecute(result);
-            progressDialog.dismiss();
-            Log.d(TAG,"sim card registration *****"+result);
-            if(result==null)
-            {
-                Toast.makeText(LandingActivity.this, Locale.getStringInLocale("problem_connecting_to_server", LandingActivity.this),Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.CODE_USER_NOT_AUTHENTICATED)) {
-                Utils.showGenericAlertDialog(LandingActivity.this,simCardRegistrationText,oldNumberNotInSystemText,okayText,null,null,null);
-            }
-            else if(result.equals(DataHandler.CODE_SIM_CARD_REGISTERED))
-            {
-                changeSystemSimCardDialog.dismiss();
-                authenticateUser();
-            }
-        }
-    }
-
-    private class SaveFarmerDataThread extends AsyncTask<String, Integer, Integer>{
-
-        @Override
-        protected Integer doInBackground(String... params) {
-            Log.d(TAG, "About to save farmer data in the database");
-
-            try {
-                JSONObject farmerData = new JSONObject(params[0]);
-                DataHandler.saveFarmerData(LandingActivity.this, farmerData);
-            } catch (JSONException e) {
-                e.printStackTrace();
-            }
-
-            return 0;
-        }
-
-        @Override
-        protected void onPostExecute(Integer integer) {
-            super.onPostExecute(integer);
-
-            Log.d(TAG, "Finished caching farmer data in SQLite database");
-        }
-    }
-
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MainMenu.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MainMenu.java
deleted file mode 100644
index e7be6bc..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MainMenu.java
+++ /dev/null
@@ -1,345 +0,0 @@
-package org.cgiar.ilri.mistro.farmer;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.location.Criteria;
-import android.location.Location;
-import android.location.LocationListener;
-import android.location.LocationManager;
-import android.os.AsyncTask;
-import android.os.Bundle;
-import android.provider.Settings;
-import android.telephony.TelephonyManager;
-import android.util.Log;
-import android.view.View;
-import android.widget.Button;
-import android.widget.Toast;
-
-import com.actionbarsherlock.app.SherlockActivity;
-import com.actionbarsherlock.view.Menu;
-import com.actionbarsherlock.view.MenuInflater;
-import com.actionbarsherlock.view.MenuItem;
-
-import org.cgiar.ilri.mistro.farmer.backend.DataHandler;
-import org.cgiar.ilri.mistro.farmer.backend.Locale;
-import org.cgiar.ilri.mistro.farmer.carrier.Farmer;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.List;
-
-public class MainMenu extends SherlockActivity implements MistroActivity, View.OnClickListener, LocationListener
-{
-    private static final String TAG="MainMenu";
-    public static final String KEY_LONGITUDE = "longitude";
-    public static final String KEY_LATITUDE = "latitude";
-    public static final String KEY_FARMER_DATA = "farmerData";
-    public static final String KEY_MODE = "mode";
-    public static final String KEY_ADMIN_DATA = "adminData";
-
-    public static final String MODE_FARMER = "isFarmer";
-    public static final String MODE_ADMIN = "isAdmin";
-
-    private Button milkProductionB;
-    private Button fertilityB;
-    private Button eventsB;
-    private Button editFarmerB;
-    private Button editCowB;
-    private Button logoutB;
-    private JSONObject farmerData;
-    private JSONObject adminData;
-    private LocationManager locationManager;
-    private String longitude;
-    private String latitude;
-    private List<Farmer> farmers;
-
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState)
-    {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_main_menu);
-        //DataHandler.requestPermissionToUseSMS(this);
-
-        milkProductionB=(Button)this.findViewById(R.id.milk_production_b);
-        milkProductionB.setOnClickListener(this);
-        fertilityB = (Button)this.findViewById(R.id.fertility_b);
-        fertilityB.setOnClickListener(this);
-        eventsB =(Button)this.findViewById(R.id.events_b);
-        eventsB.setOnClickListener(this);
-        editFarmerB = (Button)this.findViewById(R.id.edit_farmer_b);
-        editFarmerB.setOnClickListener(this);
-        editCowB = (Button)this.findViewById(R.id.edit_cow_b);
-        editCowB.setOnClickListener(this);
-        logoutB = (Button)this.findViewById(R.id.logout_b);
-        logoutB.setOnClickListener(this);
-
-        Bundle bundle=this.getIntent().getExtras();
-        if(bundle != null){
-            String mode = bundle.getString(KEY_MODE);
-            if(mode != null){
-                switchMode(mode);
-                if(mode.equals(MODE_FARMER)){
-                    String farmerJSONString = bundle.getString(KEY_FARMER_DATA);
-
-                    try{
-                        farmerData = new JSONObject(farmerJSONString);
-                        registerCoords();
-
-                        Toast.makeText(this, Locale.getStringInLocale("welcome", this)+" "+farmerData.getString("name"), Toast.LENGTH_LONG).show();
-                    }
-                    catch (Exception e){
-                        e.printStackTrace();
-                    }
-                }
-                else if(mode.equals(MODE_ADMIN)){
-                    String adminJSONString = bundle.getString(KEY_ADMIN_DATA);
-                    Log.d(TAG, " *** Admin data from login screen = "+adminJSONString);
-                    try{
-                        adminData = new JSONObject(adminJSONString);
-                        String type = Locale.getStringInLocale("admin", this);
-                        if(adminData.getInt("is_super") == 1){
-                            type = Locale.getStringInLocale("super_admin", this);
-                        }
-                        Toast.makeText(this, Locale.getStringInLocale("welcome", this) + " " + adminData.getString("name") + " (" + type + ")", Toast.LENGTH_LONG).show();
-                    }
-                    catch (Exception e){
-                        e.printStackTrace();
-                    }
-                }
-                else{
-                    Log.e(TAG, "Unable to find out which mode to use in main menu");
-                }
-            }
-            else{
-                Log.e(TAG, "Mode is null. Not sure which mode to use");
-            }
-        }
-
-        initTextInViews();
-    }
-
-    public boolean onCreateOptionsMenu(Menu menu) {
-        MenuInflater inflater = getSupportMenuInflater();
-        inflater.inflate(R.menu.main_menu, menu);
-        return true;
-    }
-
-    public boolean onOptionsItemSelected(MenuItem item) {
-        // Handle item selection
-        if(Language.processLanguageMenuItemSelected(this, this, item)){
-            return true;
-        }
-        return false;
-    }
-
-    @Override
-    public void initTextInViews()
-    {
-        this.setTitle(Locale.getStringInLocale("main_menu",this));
-        milkProductionB.setText(Locale.getStringInLocale("milk_production", this));
-        fertilityB.setText(Locale.getStringInLocale("fertility", this));
-        eventsB.setText(Locale.getStringInLocale("events",this));
-        editFarmerB.setText(Locale.getStringInLocale("edit_farmer", this));
-        editCowB.setText(Locale.getStringInLocale("edit_cow", this));
-        logoutB.setText(Locale.getStringInLocale("logout", this));
-    }
-
-    private void switchMode(String mode){
-        milkProductionB.setVisibility(View.GONE);
-        fertilityB.setVisibility(View.GONE);
-        eventsB.setVisibility(View.GONE);
-        editFarmerB.setVisibility(View.GONE);
-        editCowB.setVisibility(View.GONE);
-        if(mode.equals(MODE_FARMER)){
-            milkProductionB.setVisibility(View.VISIBLE);
-            fertilityB.setVisibility(View.VISIBLE);
-            eventsB.setVisibility(View.VISIBLE);
-        }
-        else if(mode.equals(MODE_ADMIN)){
-            editFarmerB.setVisibility(View.VISIBLE);
-            editCowB.setVisibility(View.VISIBLE);
-        }
-    }
-
-    @Override
-    public void onClick(View view) {
-        sendDataToServer();
-        if(view==milkProductionB)
-        {
-            Intent intent=new Intent(this,MilkProductionActivity.class);
-            startActivity(intent);
-        }
-        else if(view == fertilityB){
-            Intent intent=new Intent(this,FertilityActivity.class);
-            startActivity(intent);
-        }
-        else if(view==eventsB)
-        {
-            Intent intent=new Intent(this,EventsActivity.class);
-            startActivity(intent);
-        }
-        else if(view==editFarmerB){
-            if(adminData != null){
-                Intent intent = new Intent(this, FarmerSelectionActivity.class);
-                intent.putExtra(FarmerSelectionActivity.KEY_ADMIN_DATA, adminData.toString());
-                startActivity(intent);
-            }
-            else {
-                Log.w(TAG, "Admin data is null. Unable to move to the next activity");
-            }
-        }
-        else if(view==editCowB){
-            if(adminData != null){
-                Intent intent = new Intent(this, CowSelectionActivity.class);
-                intent.putExtra(CowSelectionActivity.KEY_ADMIN_DATA, adminData.toString());
-                startActivity(intent);
-            }
-            else {
-                Log.w(TAG, "Admin data is null. Unable to move to the next activity");
-            }
-        }
-        else if(view==logoutB){
-            Intent intent = new Intent(this, LandingActivity.class);
-            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-            startActivity(intent);
-        }
-    }
-
-    private void registerCoords(){
-        try {
-            String regLongitude = farmerData.getString("gps_longitude");
-            String regLatitude = farmerData.getString("gps_latitude");
-            if(regLongitude==null || regLongitude.trim().length()==0 || regLatitude==null || regLatitude.trim().length()==0){
-                buildGPSAlert();
-            }
-        } catch (JSONException e) {
-            e.printStackTrace();
-        }
-    }
-
-    private void buildGPSAlert(){
-        AlertDialog.Builder builder = new AlertDialog.Builder(this);
-        builder.setMessage(Locale.getStringInLocale("are_you_in_farm",this));
-        builder.setPositiveButton(Locale.getStringInLocale("yes",this), new DialogInterface.OnClickListener(){
-
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                dialog.dismiss();
-                getGPSCoordinates();
-            }
-        });
-        builder.setNegativeButton(Locale.getStringInLocale("no",this), new DialogInterface.OnClickListener(){
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                dialog.dismiss();
-            }
-        });
-
-        AlertDialog alertDialog = builder.create();
-        alertDialog.show();
-    }
-
-    private void getGPSCoordinates() {
-        locationManager=(LocationManager)getSystemService(LOCATION_SERVICE);
-        if(locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER))
-        {
-            //Toast.makeText(this,"gps started",Toast.LENGTH_LONG).show();
-            Criteria criteria=new Criteria();
-            String provider=locationManager.getBestProvider(criteria,false);
-            Location location=locationManager.getLastKnownLocation(provider);
-            locationManager.requestLocationUpdates(provider,18000,1000,this);//If farmer  is moving at 200km/h, will still be able to update!
-            if(location!=null)
-            {
-                onLocationChanged(location);
-            }
-        }
-        else
-        {
-            AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(this);
-            alertDialogBuilder.setTitle(Locale.getStringInLocale("enable_gps",this));
-            alertDialogBuilder
-                    .setMessage(Locale.getStringInLocale("reason_for_enabling_gps", this))
-                    .setCancelable(false)
-                    .setPositiveButton(Locale.getStringInLocale("okay",this), new DialogInterface.OnClickListener()
-                    {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which)
-                        {
-                            Intent intent=new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
-                            startActivity(intent);
-                        }
-                    })
-                    .setNegativeButton(Locale.getStringInLocale("cancel",this), new DialogInterface.OnClickListener()
-                    {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which)
-                        {
-                            dialog.cancel();
-                            Intent intent=new Intent(MainMenu.this,LandingActivity.class);
-                            startActivity(intent);
-                        }
-                    });
-            AlertDialog alertDialog=alertDialogBuilder.create();
-            alertDialog.show();
-
-        }
-    }
-
-    @Override
-    public void onLocationChanged(Location location) {
-        latitude=String.valueOf(location.getLatitude());
-        longitude=String.valueOf(location.getLongitude());
-        Log.d(TAG, "latitude : " + latitude);
-        Log.d(TAG, "longitude : " + longitude);
-    }
-
-    @Override
-    public void onStatusChanged(String provider, int status, Bundle extras) {
-
-    }
-
-    @Override
-    public void onProviderEnabled(String provider) {
-
-    }
-
-    @Override
-    public void onProviderDisabled(String provider) {
-
-    }
-
-    private void sendDataToServer(){
-        if(longitude!=null && longitude.trim().length()>0 && latitude!=null && latitude.trim().length()>0){
-            JSONObject jsonObject = new JSONObject();
-            try {
-                TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
-                jsonObject.put("simCardSN",telephonyManager.getSimSerialNumber());
-                jsonObject.put("longitude",longitude);
-                jsonObject.put("latitude",latitude);
-                CoordinateHandler coordinateHandler = new CoordinateHandler();
-                coordinateHandler.execute(jsonObject);
-            } catch (JSONException e) {
-                e.printStackTrace();
-            }
-        }
-    }
-
-    private class CoordinateHandler extends AsyncTask<JSONObject, Integer, String>{
-        @Override
-        protected String doInBackground(JSONObject... params) {
-            return DataHandler.sendDataToServer(MainMenu.this, params[0].toString(),DataHandler.FARMER_REGISTER_FARM_COORDS_URL, false);
-        }
-
-        @Override
-        protected void onPostExecute(String result) {
-            super.onPostExecute(result);
-
-            if(result!=null && result.equals(DataHandler.ACKNOWLEDGE_OK)){
-                Toast.makeText(MainMenu.this,Locale.getStringInLocale("farm_coords_successfully_reg", MainMenu.this),Toast.LENGTH_LONG).show();
-            }
-        }
-    }
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MilkProcutionHistoryActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MilkProcutionHistoryActivity.java
deleted file mode 100644
index 4a429bf..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MilkProcutionHistoryActivity.java
+++ /dev/null
@@ -1,590 +0,0 @@
-package org.cgiar.ilri.mistro.farmer;
-
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.Intent;
-import android.os.AsyncTask;
-import android.os.Bundle;
-import android.telephony.TelephonyManager;
-import android.util.DisplayMetrics;
-import android.util.Log;
-import android.view.Gravity;
-import android.view.View;
-import android.widget.Button;
-import android.widget.TableLayout;
-import android.widget.TableRow;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import com.actionbarsherlock.app.SherlockActivity;
-import com.actionbarsherlock.view.Menu;
-import com.actionbarsherlock.view.MenuInflater;
-import com.actionbarsherlock.view.MenuItem;
-
-import org.cgiar.ilri.mistro.farmer.backend.DataHandler;
-import org.cgiar.ilri.mistro.farmer.backend.Locale;
-import org.cgiar.ilri.mistro.farmer.carrier.Cow;
-import org.cgiar.ilri.mistro.farmer.carrier.Farmer;
-import org.cgiar.ilri.mistro.farmer.carrier.MilkProduction;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.GregorianCalendar;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-
-public class MilkProcutionHistoryActivity extends SherlockActivity implements MistroActivity, View.OnClickListener
-{
-    private static final String TAG="MIlkProductionHistoryActivity";
-    private Menu menu;
-    private TextView dateTV;
-    private TextView cowNameTV;
-    private TextView timeTV;
-    private TextView quantityTV;
-    private List<String> productionHistoryIDs;
-    private String noDataWarning;
-    private DisplayMetrics metrics;
-    private TableLayout productionHistoryTL;
-    private TableLayout productionTotalTL;
-    private TextView totalDateTV;
-    private TextView totalCowNameTV;
-    private TextView totalQuantityTV;
-    private Button backB;
-
-    private String[] times;
-    private String todayText;
-    private String yesterdayText;
-    private String loadingPleaseWait;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState)
-    {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_milk_production_history);
-        //DataHandler.requestPermissionToUseSMS(this);
-
-        productionHistoryIDs=new ArrayList<String>();
-        metrics=new DisplayMetrics();
-
-        dateTV=(TextView)findViewById(R.id.date_tv);
-        cowNameTV=(TextView)findViewById(R.id.cow_name_tv);
-        timeTV=(TextView)findViewById(R.id.time_tv);
-        quantityTV=(TextView)findViewById(R.id.quantity_tv);
-        productionHistoryTL=(TableLayout)findViewById(R.id.production_history_tl);
-        productionTotalTL = (TableLayout)findViewById(R.id.production_total_tl);
-        totalDateTV = (TextView)findViewById(R.id.total_date_tv);
-        totalCowNameTV = (TextView)findViewById(R.id.total_cow_name_tv);
-        totalQuantityTV = (TextView)findViewById(R.id.total_quantity_tv);
-        backB = (Button)findViewById(R.id.back_b);
-        backB.setOnClickListener(this);
-
-        initTextInViews();
-        fetchProductionHistory();
-    }
-
-    public boolean onCreateOptionsMenu(Menu menu) {
-        MenuInflater inflater = getSupportMenuInflater();
-        inflater.inflate(R.menu.milk_procution_history, menu);
-        this.menu = menu;
-        initMenuText();
-        return true;
-    }
-
-    public boolean onOptionsItemSelected(MenuItem item) {
-        // Handle item selection
-        if(Language.processLanguageMenuItemSelected(this, this, item)){
-            return true;
-        }
-        else if(item.getItemId() == R.id.action_back_main_menu) {
-            Intent intent = new Intent(this, MainMenu.class);
-            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_FARMER);
-            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-            startActivity(intent);
-        }
-        return false;
-    }
-
-    @Override
-    public void initTextInViews()
-    {
-        dateTV.setText(Locale.getStringInLocale("date",this));
-        cowNameTV.setText(Locale.getStringInLocale("cow",this));
-        timeTV.setText(Locale.getStringInLocale("time",this));
-        quantityTV.setText(Locale.getStringInLocale("quantity",this));
-
-        totalDateTV.setText(Locale.getStringInLocale("date",this));
-        totalCowNameTV.setText(Locale.getStringInLocale("cow",this));
-        totalQuantityTV.setText(Locale.getStringInLocale("total", this));
-
-        noDataWarning=Locale.getStringInLocale("no_data_received",this);
-        times=Locale.getArrayInLocale("milking_times",this);
-        if(times == null) {
-            times = new String[1];
-            times[0] = "";
-        }
-        todayText=Locale.getStringInLocale("today",this);
-        yesterdayText=Locale.getStringInLocale("yesterday",this);
-        loadingPleaseWait=Locale.getStringInLocale("loading_please_wait",this);
-        backB.setText(Locale.getStringInLocale("back", this));
-        initMenuText();
-    }
-
-    private void initMenuText(){
-        if(this.menu != null){
-            MenuItem mainMenuMI = menu.findItem(R.id.action_back_main_menu);
-            mainMenuMI.setTitle(Locale.getStringInLocale("back_to_main_menu", this));
-        }
-    }
-
-    private void fetchProductionHistory()
-    {
-        TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
-        ProductionHistoryThread productionHistoryThread=new ProductionHistoryThread();
-        if(productionHistoryIDs.size()==0)
-        {
-            productionHistoryThread.execute(telephonyManager.getSimSerialNumber(),"-1");
-        }
-        else
-        {
-            productionHistoryThread.execute(telephonyManager.getSimSerialNumber(),productionHistoryIDs.get(productionHistoryIDs.size()-1));
-        }
-    }
-
-    @Override
-    public void onClick(View view) {
-        if(view == backB){
-            Intent intent = new Intent(this, MilkProductionActivity.class);
-            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-            startActivity(intent);
-        }
-    }
-
-    private class ProductionHistoryThread extends AsyncTask<String,Integer,Farmer>
-    {
-        private ProgressDialog progressDialog;
-
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-            progressDialog = ProgressDialog.show(MilkProcutionHistoryActivity.this, "",loadingPleaseWait, true);
-        }
-
-        @Override
-        protected Farmer doInBackground(String... params)
-        {
-            /*JSONObject jsonObject=new JSONObject();
-            try
-            {
-                jsonObject.put("simCardSN",params[0]);
-                jsonObject.put("fromID",params[1]);
-                String result=DataHandler.sendDataToServer(MilkProcutionHistoryActivity.this, jsonObject.toString(),DataHandler.FARMER_FETCH_MILK_PRODUCTION_HISTORY_URL, true);
-                Log.d(TAG,"result gotten from server = "+result);
-                return result;
-            }
-            catch (JSONException e)
-            {
-                e.printStackTrace();
-            }
-            return null;*/
-
-
-            String result = DataHandler.sendCachedRequests(MilkProcutionHistoryActivity.this, true);//send cached data and receive updated farmer data
-            if(result != null && !result.equals(DataHandler.CODE_USER_NOT_AUTHENTICATED)){//no data fetched for this farmer
-                try {//try converting the response into a jsonobject. It might not work if the DataHandler returns a response code
-                    Log.d(TAG, "response is "+result);
-                    DataHandler.saveFarmerData(MilkProcutionHistoryActivity.this, new JSONObject(result));
-                } catch (JSONException e) {
-                    e.printStackTrace();
-                }
-            }
-            return DataHandler.getFarmerData(MilkProcutionHistoryActivity.this);
-        }
-
-        @Override
-        protected void onPostExecute(Farmer farmer)
-        {
-            super.onPostExecute(farmer);
-            progressDialog.dismiss();
-            if(farmer==null)
-            {
-                Toast.makeText(MilkProcutionHistoryActivity.this,"server error",Toast.LENGTH_LONG).show();
-            }
-            /*else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
-                Toast.makeText(MilkProcutionHistoryActivity.this, Locale.getStringInLocale("generic_sms_error", MilkProcutionHistoryActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
-                Toast.makeText(MilkProcutionHistoryActivity.this, Locale.getStringInLocale("no_service", MilkProcutionHistoryActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
-                Toast.makeText(MilkProcutionHistoryActivity.this, Locale.getStringInLocale("radio_off", MilkProcutionHistoryActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
-                Toast.makeText(MilkProcutionHistoryActivity.this, Locale.getStringInLocale("server_not_receive_sms", MilkProcutionHistoryActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.NO_DATA))
-            {
-                Toast.makeText(MilkProcutionHistoryActivity.this,noDataWarning,Toast.LENGTH_LONG).show();
-            }*/
-            else
-            {
-                /*try
-                {
-                    JSONObject jsonObject=new JSONObject(result);
-                    JSONArray historyArray=jsonObject.getJSONArray("history");
-                    addTotalTableRows(historyArray);
-                    addHistoryTableRows(historyArray);
-                }
-                catch (JSONException e)
-                {
-                    e.printStackTrace();
-                }*/
-                try{
-                    List<Cow> allCows = farmer.getCows();
-                    JSONArray historyArray = new JSONArray();
-                    for(int cowIndex = 0; cowIndex < allCows.size(); cowIndex++){
-                        //append all events for this cow to the UI
-                        List<MilkProduction> cowMP = allCows.get(cowIndex).getMilkProduction();
-                        for(int mpIndex = 0; mpIndex < cowMP.size(); mpIndex++){
-                            JSONObject currMP = new JSONObject();
-                            currMP.put("id", cowMP.get(mpIndex).getId());
-                            currMP.put("date", cowMP.get(mpIndex).getDate());
-                            currMP.put("time", cowMP.get(mpIndex).getTime());
-                            currMP.put("name", allCows.get(cowIndex).getName());
-                            currMP.put("ear_tag_number", allCows.get(cowIndex).getEarTagNumber());
-                            currMP.put("quantity_type", cowMP.get(mpIndex).getQuantityType());
-                            currMP.put("quantity", cowMP.get(mpIndex).getQuantity());
-
-                            historyArray.put(currMP);
-                        }
-                    }
-
-                    addTotalTableRows(historyArray);
-                    addHistoryTableRows(historyArray);
-                }
-                catch (Exception e){
-                    e.printStackTrace();
-                }
-            }
-        }
-    }
-
-    private TextView generateTextView(String text, int id,int tableRowHeight,int tableTextSize)
-    {
-        TextView textView=new TextView(this);
-        TableRow.LayoutParams dateLP=new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT,tableRowHeight);
-        textView.setId(id);
-        textView.setText(text);
-        textView.setTextSize(tableTextSize);
-        textView.setTextColor(getResources().getColor(R.color.text_input_color));
-        textView.setGravity(Gravity.CENTER);
-        textView.setLayoutParams(dateLP);
-        return textView;
-    }
-
-    private View generateRowSeparator(int id,int tableRowHeight)
-    {
-        final View rowSeperator=new View(this);
-        rowSeperator.setId(id);
-        rowSeperator.setLayoutParams(new TableRow.LayoutParams(1,tableRowHeight));
-        rowSeperator.setBackgroundColor(getResources().getColor(R.color.pressed_mistro));
-        return rowSeperator;
-    }
-
-    private void addHistoryTableRows(JSONArray history)
-    {
-        for (int i=0;i<history.length();i++)
-        {
-            try
-            {
-                JSONObject jsonObject=history.getJSONObject(i);
-                productionHistoryIDs.add(jsonObject.getString("id"));
-                final TableRow tableRow=new TableRow(this);
-                tableRow.setId(3424+Integer.parseInt(jsonObject.getString("id")));
-                int tableRowHeight=0;
-                int tableTextSideMargin=0;//4dp
-                int tableTextSize=0;//14dp
-                if(metrics.densityDpi==DisplayMetrics.DENSITY_XHIGH)
-                {
-                    tableRowHeight=58;//initially 30
-                    tableTextSideMargin=14;//initially 6
-                    tableTextSize=16;//initially 21
-                }
-                else if(metrics.densityDpi==DisplayMetrics.DENSITY_HIGH)
-                {
-                    tableRowHeight=44;//initially 30
-                    tableTextSideMargin=14;//initially 6
-                    tableTextSize=16;//initially 21
-                }
-                else if(metrics.densityDpi==DisplayMetrics.DENSITY_MEDIUM)
-                {
-                    tableRowHeight=27;//initially 20
-                    tableTextSideMargin=10;//initially 4
-                    tableTextSize=15;//initially 14
-                }
-                else if(metrics.densityDpi==DisplayMetrics.DENSITY_LOW)
-                {
-                    tableRowHeight=16;//initially 15
-                    tableTextSideMargin=6;//initially 3
-                    tableTextSize=15;//initially 11
-                }
-                else
-                {
-                    tableRowHeight=58;//initially 30
-                    tableTextSideMargin=14;//initially 6
-                    tableTextSize=16;//initially 21
-                }
-                tableRow.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,tableRowHeight));
-
-                SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd");
-                Date milkingDate=dateFormat.parse(jsonObject.getString("date"));
-                Date today=new Date();
-                long dateDifference=(today.getTime()-milkingDate.getTime())/86400000;
-
-                Calendar calendar=new GregorianCalendar();
-                calendar.setTime(milkingDate);
-                String dateText=String.valueOf(calendar.get(Calendar.DAY_OF_MONTH))+"/"+String.valueOf(calendar.get(Calendar.MONTH)+1)+"/"+calendar.get(Calendar.YEAR);
-                if(dateDifference<1)
-                {
-                    dateText=todayText;
-                }
-                else if(dateDifference>=1&&dateDifference<2)
-                {
-                    dateText=yesterdayText;
-                }
-
-                final TextView date=generateTextView(dateText,3424+jsonObject.getInt("id")+332,tableRowHeight,tableTextSize);
-                tableRow.addView(date);
-
-                final View rowSeparator1=generateRowSeparator(3424+jsonObject.getInt("id")+3322,tableRowHeight);
-                tableRow.addView(rowSeparator1);
-
-                String[] milkingTimesInEN = Locale.getArrayInLocale("milking_times",this,Locale.LOCALE_ENGLISH);
-                String milkingTime = "";
-                for(int j = 0; j < milkingTimesInEN.length; j++) {
-                    if(jsonObject.getString("time").equals(milkingTimesInEN[j])) {
-                        if(milkingTimesInEN.length == times.length){
-                            milkingTime = times[j];
-                        }
-                        break;
-                    }
-                }
-                final  TextView time=generateTextView(milkingTime,3424+jsonObject.getInt("id")+554,tableRowHeight,tableTextSize);
-                tableRow.addView(time);
-
-                final View rowSeparator2=generateRowSeparator(3424+jsonObject.getInt("id")+3432,tableRowHeight);
-                tableRow.addView(rowSeparator2);
-
-                //check if name is null and use ear tag number
-                String nameText=jsonObject.getString("name");
-                if(nameText==null||nameText.equals(""))
-                {
-                    nameText=jsonObject.getString("ear_tag_number");
-                }
-                final TextView name=generateTextView(nameText,3424+jsonObject.getInt("id")+432,tableRowHeight,tableTextSize);
-                tableRow.addView(name);
-
-                final View rowSeparator3=generateRowSeparator(3424+jsonObject.getInt("id")+3532,tableRowHeight);
-                tableRow.addView(rowSeparator3);
-
-                String quantityType = jsonObject.getString("quantity_type");
-                String quantityString = String.format("%.2f", Float.parseFloat(jsonObject.getString("quantity")));
-                String[] quantityTypesInEN = Locale.getArrayInLocale("quantity_types",this, Locale.LOCALE_ENGLISH);
-                String[] quantityTypes = Locale.getArrayInLocale("quantity_types", this);
-                if(quantityTypes != null && quantityTypesInEN.length == quantityTypes.length) {
-                    for(int j = 0; j < quantityTypesInEN.length; j++) {
-                        if(quantityType.equals(quantityTypesInEN[j])) {
-                            quantityString = quantityString +" "+quantityTypes[j];
-                            break;
-                        }
-                    }
-                }
-                final TextView quantity=generateTextView(quantityString,3424+jsonObject.getInt("id")+564,tableRowHeight,tableTextSize);
-                tableRow.addView(quantity);
-
-                productionHistoryTL.addView(tableRow, new TableLayout.LayoutParams(TableLayout.LayoutParams.MATCH_PARENT,tableRowHeight));
-
-            }
-            catch (JSONException e)
-            {
-                e.printStackTrace();
-            }
-            catch (ParseException e)
-            {
-                e.printStackTrace();
-            }
-        }
-    }
-
-    private void addTotalTableRows(JSONArray history){
-        //get totals for each cow
-
-        // array["cowName-ear_tag_number"]{"name","ear_tag_number","startDateMilliseconds","endDateMilliseconds","total"}
-        HashMap<String, String[]> cowMilkTotalArray = new HashMap<String, String[]>();
-
-        for(int i = 0; i < history.length(); i++){
-            try {
-                JSONObject jsonObject=history.getJSONObject(i);
-                String cowKey = jsonObject.getString("name")+"-"+jsonObject.getString("ear_tag_number");
-
-                //2. Initialize the cow data
-                //TODO: do conversions for other quantity types if they come up
-                    /*
-                    Since 1KG = 1L of milk you don't need to do any quantity conversions as of now
-                     */
-                String convertedQuantity = jsonObject.getString("quantity");
-
-                SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd");
-                Date milkingDate=dateFormat.parse(jsonObject.getString("date"));
-                long milkingDateMilliseconds = milkingDate.getTime();
-
-                //1. check if the cow is in the cowMilkTotalArray
-                String[] currCowData = null;
-                if(cowMilkTotalArray.containsKey(cowKey)){
-                    currCowData = cowMilkTotalArray.get(cowKey);
-                }
-
-                if(currCowData == null){//no milk data from cow gotten until now in the loop
-                    /*
-                    Cow Data structure looks like:
-                        {"name","ear_tag_number","startDateMilliseconds","endDateMilliseconds","total", "quantity_type"}
-                     */
-
-                    Log.d(TAG, "Adding first time data for "+cowKey);
-                    String[] quantityTypesInEN = Locale.getArrayInLocale("quantity_types", this, Locale.LOCALE_ENGLISH);
-                    String[] quantityTypes = Locale.getArrayInLocale("quantity_types", this);
-                    //get translation of Litres in current locale
-                    String litresInLocale = null;
-                    for(int j = 0; j < quantityTypesInEN.length; j++){
-                        if(quantityTypesInEN[j].equals("Litres")){
-                            litresInLocale = quantityTypes[j];
-                        }
-                    }
-
-                    currCowData = new String[]{
-                            jsonObject.getString("name"),
-                            jsonObject.getString("ear_tag_number"),
-                            String.valueOf(milkingDateMilliseconds),
-                            String.valueOf(milkingDateMilliseconds),
-                            convertedQuantity,
-                            litresInLocale
-                    };
-                }
-                else{//Milk production from this cow already iterated through before i
-                    //3. Increment quantity and dates
-                    Log.d(TAG, "Updating data for "+cowKey);
-                    currCowData[4] = String.valueOf(Float.parseFloat(currCowData[4]) + Float.parseFloat(convertedQuantity));
-
-                    //4. Check if current milk reading is in the date extremes (first date or last date)
-                    Log.d(TAG, "start time string = "+currCowData[2]);
-                    Log.d(TAG, "end time string = "+currCowData[3]);
-                    long startDateMilliseconds = Long.parseLong(currCowData[2]);
-                    long endDateMilliseconds = Long.parseLong(currCowData[3]);
-
-                    Log.d(TAG, "Current milking Date Milliseconds = "+String.valueOf(milkingDateMilliseconds));
-                    Log.d(TAG, "Start Date Milliseconds = "+String.valueOf(startDateMilliseconds));
-                    Log.d(TAG, "End Date Milliseconds = "+String.valueOf(endDateMilliseconds));
-
-                    if(milkingDateMilliseconds < startDateMilliseconds){
-                        startDateMilliseconds = milkingDateMilliseconds;
-                    }
-                    else if(milkingDateMilliseconds > endDateMilliseconds){
-                        endDateMilliseconds = milkingDateMilliseconds;
-                    }
-
-                    currCowData[2] = String.valueOf(startDateMilliseconds);
-                    currCowData[3] = String.valueOf(endDateMilliseconds);
-                }
-
-                cowMilkTotalArray.put(cowKey, currCowData);
-            }
-            catch (Exception e){
-                e.printStackTrace();
-            }
-        }
-
-        //render cow milk totals data to the user
-        int index = 0;
-        for(Map.Entry currCow : cowMilkTotalArray.entrySet()){
-
-            String[] currCowData = (String[]) currCow.getValue();
-
-            final TableRow tableRow=new TableRow(this);
-            tableRow.setId(1522+index);
-            int tableRowHeight=0;
-            int tableTextSideMargin=0;//4dp
-            int tableTextSize=0;//14dp
-            if(metrics.densityDpi==DisplayMetrics.DENSITY_XHIGH)
-            {
-                tableRowHeight=58;//initially 30
-                tableTextSideMargin=14;//initially 6
-                tableTextSize=16;//initially 21
-            }
-            else if(metrics.densityDpi==DisplayMetrics.DENSITY_HIGH)
-            {
-                tableRowHeight=44;//initially 30
-                tableTextSideMargin=14;//initially 6
-                tableTextSize=16;//initially 21
-            }
-            else if(metrics.densityDpi==DisplayMetrics.DENSITY_MEDIUM)
-            {
-                tableRowHeight=27;//initially 20
-                tableTextSideMargin=10;//initially 4
-                tableTextSize=15;//initially 14
-            }
-            else if(metrics.densityDpi==DisplayMetrics.DENSITY_LOW)
-            {
-                tableRowHeight=16;//initially 15
-                tableTextSideMargin=6;//initially 3
-                tableTextSize=15;//initially 11
-            }
-            else
-            {
-                tableRowHeight=58;//initially 30
-                tableTextSideMargin=14;//initially 6
-                tableTextSize=16;//initially 21
-            }
-            tableRow.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,tableRowHeight));
-
-            Calendar startDate=new GregorianCalendar();
-            startDate.setTime(new Date(Long.valueOf(currCowData[2])));
-            Calendar endDate = new GregorianCalendar();
-            endDate.setTime(new Date(Long.valueOf(currCowData[3])));
-
-            String startDateText=String.valueOf(startDate.get(Calendar.DAY_OF_MONTH))+"/"+String.valueOf(startDate.get(Calendar.MONTH)+1)+"/"+startDate.get(Calendar.YEAR);
-            String endDateText=String.valueOf(endDate.get(Calendar.DAY_OF_MONTH))+"/"+String.valueOf(endDate.get(Calendar.MONTH) + 1)+"/"+endDate.get(Calendar.YEAR);
-
-            final TextView date=generateTextView(startDateText + " - " + endDateText, 3343 + index,tableRowHeight,tableTextSize);
-            tableRow.addView(date);
-
-            final View rowSeparator1=generateRowSeparator(index + 3322, tableRowHeight);
-            tableRow.addView(rowSeparator1);
-
-            String cowName = currCowData[0];
-            if(cowName == null || cowName.length() == 0){//if cow doesnt have a name, use its ear tag number
-                cowName = currCowData[1];
-            }
-            final TextView cow = generateTextView(cowName, 7343 + index,tableRowHeight,tableTextSize);
-            tableRow.addView(cow);
-
-            final View rowSeparator2=generateRowSeparator(index + 2322, tableRowHeight);
-            tableRow.addView(rowSeparator2);
-
-            String formattedQuantity = String.format("%.2f" ,Float.parseFloat(currCowData[4]));
-
-            final TextView quantity = generateTextView(formattedQuantity+" "+currCowData[5] ,922+index, tableRowHeight, tableTextSize);
-            tableRow.addView(quantity);
-
-            productionTotalTL.addView(tableRow, new TableLayout.LayoutParams(TableLayout.LayoutParams.MATCH_PARENT,tableRowHeight));
-
-            index++;
-        }
-    }
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MilkProductionActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MilkProductionActivity.java
deleted file mode 100644
index 3a6d2f2..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MilkProductionActivity.java
+++ /dev/null
@@ -1,533 +0,0 @@
-package org.cgiar.ilri.mistro.farmer;
-
-import android.app.DatePickerDialog;
-import android.app.Dialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.Intent;
-import android.os.AsyncTask;
-import android.os.Bundle;
-import android.telephony.TelephonyManager;
-import android.util.Log;
-import android.view.View;
-import android.widget.ArrayAdapter;
-import android.widget.Button;
-import android.widget.DatePicker;
-import android.widget.EditText;
-import android.widget.Spinner;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import com.actionbarsherlock.app.SherlockActivity;
-import com.actionbarsherlock.view.Menu;
-import com.actionbarsherlock.view.MenuInflater;
-import com.actionbarsherlock.view.MenuItem;
-
-import org.cgiar.ilri.mistro.farmer.backend.DataHandler;
-import org.cgiar.ilri.mistro.farmer.backend.Locale;
-import org.cgiar.ilri.mistro.farmer.carrier.Cow;
-import org.cgiar.ilri.mistro.farmer.carrier.MilkProduction;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.GregorianCalendar;
-
-public class MilkProductionActivity extends SherlockActivity implements MistroActivity, View.OnClickListener, DatePickerDialog.OnDateSetListener
-{
-    private final String dateFormat="dd/MM/yyyy";
-
-    private static final String TAG="MilkProductionActivity";
-    private Menu menu;
-    private Button addProductionB;
-    private Button productionHistoryB;
-    private Button backB;
-    private Dialog addMilkProductionDialog;
-    private TextView cowTV;
-    private Spinner cowS;
-    private TextView timeTV;
-    private Spinner timeS;
-    private TextView quantityTV;
-    private EditText quantityET;
-    private Button addMilkProductionAddB;
-    private String[] cowNameArray;
-    private String[] cowEarTagNumberArray;
-    private String quantityETEmptyWarning;
-    private String infoSuccessfullySent;
-    private String problemInData;
-    private String loadingPleaseWait;
-    private TextView quantityTypeTV;
-    private Spinner quantityTypeS;
-    private String[] quantityTypes;
-    private TextView dateTV;
-    private EditText dateET;
-    private DatePickerDialog datePickerDialog;
-    private TextView noMilkingTV;
-    private EditText noMilkingET;
-    private TextView calfSucklingTV;
-    private String[] calfSucklingTypes;
-    private Spinner calfSucklingS;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState)
-    {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_milk_production);
-        //DataHandler.requestPermissionToUseSMS(this);
-
-        addProductionB=(Button)this.findViewById(R.id.add_production_b);
-        addProductionB.setOnClickListener(this);
-        productionHistoryB =(Button)this.findViewById(R.id.production_history_b);
-        productionHistoryB.setOnClickListener(this);
-        backB = (Button)this.findViewById(R.id.back_b);
-        backB.setOnClickListener(this);
-        addMilkProductionDialog=new Dialog(this);
-        addMilkProductionDialog.setContentView(R.layout.dialog_add_milk_production);
-        cowTV=(TextView)addMilkProductionDialog.findViewById(R.id.cow_tv);
-        cowS=(Spinner)addMilkProductionDialog.findViewById(R.id.cow_s);
-        dateTV=(TextView)addMilkProductionDialog.findViewById(R.id.date_tv);
-        dateET=(EditText)addMilkProductionDialog.findViewById(R.id.date_et);
-        dateET.setOnClickListener(this);
-        timeTV=(TextView)addMilkProductionDialog.findViewById(R.id.time_tv);
-        timeS=(Spinner)addMilkProductionDialog.findViewById(R.id.time_s);
-        quantityTV=(TextView)addMilkProductionDialog.findViewById(R.id.quantity_tv);
-        quantityET=(EditText)addMilkProductionDialog.findViewById(R.id.quantity_et);
-        quantityTypeTV=(TextView)addMilkProductionDialog.findViewById(R.id.quantity_type_tv);
-        quantityTypeS=(Spinner)addMilkProductionDialog.findViewById(R.id.quantity_type_s);
-        addMilkProductionAddB=(Button)addMilkProductionDialog.findViewById(R.id.dialog_add_milk_add_b);
-        noMilkingTV = (TextView)addMilkProductionDialog.findViewById(R.id.no_milking_tv);
-        noMilkingET = (EditText)addMilkProductionDialog.findViewById(R.id.no_milking_et);
-        calfSucklingTV = (TextView)addMilkProductionDialog.findViewById(R.id.calf_suckling_tv);
-        calfSucklingS = (Spinner)addMilkProductionDialog.findViewById(R.id.calf_suckling_s);
-        addMilkProductionAddB.setOnClickListener(this);
-
-        initTextInViews();
-        //fetchCowIdentifiers();
-    }
-
-    public boolean onCreateOptionsMenu(Menu menu) {
-        MenuInflater inflater = getSupportMenuInflater();
-        inflater.inflate(R.menu.milk_production, menu);
-        this.menu = menu;
-        initMenuText();
-        return true;
-    }
-
-    public boolean onOptionsItemSelected(MenuItem item) {
-        // Handle item selection
-        if(Language.processLanguageMenuItemSelected(this, this, item)){
-            return true;
-        }
-        else if(item.getItemId() == R.id.action_back_main_menu) {
-            Intent intent = new Intent(this, MainMenu.class);
-            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_FARMER);
-            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-            startActivity(intent);
-        }
-        return false;
-    }
-
-    @Override
-    public void initTextInViews()
-    {
-        this.setTitle(Locale.getStringInLocale("milk_production",this));
-        addProductionB.setText(Locale.getStringInLocale("add_production",this));
-        productionHistoryB.setText(Locale.getStringInLocale("production_history",this));
-        addMilkProductionDialog.setTitle(Locale.getStringInLocale("add_production",this));
-        cowTV.setText(Locale.getStringInLocale("cow",this));
-        dateTV.setText(Locale.getStringInLocale("date",this));
-        timeTV.setText(Locale.getStringInLocale("time",this));
-        quantityTV.setText(Locale.getStringInLocale("quantity",this));
-        addMilkProductionAddB.setText(Locale.getStringInLocale("add",this));
-        int milkingTimesArrayID = Locale.getArrayIDInLocale("milking_times",this);
-        if(milkingTimesArrayID != 0) {
-            ArrayAdapter<CharSequence> milkingTimesArrayAdapter=ArrayAdapter.createFromResource(this, milkingTimesArrayID, android.R.layout.simple_spinner_item);
-            milkingTimesArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-            timeS.setAdapter(milkingTimesArrayAdapter);
-        }
-        quantityETEmptyWarning=Locale.getStringInLocale("enter_quantity_of_milk_produced",this);
-        infoSuccessfullySent=Locale.getStringInLocale("information_successfully_sent_to_server",this);
-        problemInData=Locale.getStringInLocale("production_for_time_already_exists",this);
-        loadingPleaseWait = Locale.getStringInLocale("loading_please_wait",this);
-        quantityTypeTV.setText(Locale.getStringInLocale("measurement_type",this));
-
-        quantityTypes = Locale.getArrayInLocale("quantity_types",this);
-        int defaultQuantityTypeIndex = 0;
-        if(quantityTypes == null ) {
-            quantityTypes = new String[1];
-            quantityTypes[0] = "";
-        }
-        else {
-            defaultQuantityTypeIndex = Integer.parseInt(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_MILK_QUANTITY_TYPE,"0"));
-        }
-        ArrayAdapter<String> quantityTypesArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,quantityTypes);
-        quantityTypesArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        quantityTypeS.setAdapter(quantityTypesArrayAdapter);
-        if(defaultQuantityTypeIndex < quantityTypes.length)
-            quantityTypeS.setSelection(defaultQuantityTypeIndex);
-
-
-        noMilkingTV.setText(Locale.getStringInLocale("no_times_milked_in_a_day",this));
-        calfSucklingTV.setText(Locale.getStringInLocale("calf_suckling",this));
-
-        calfSucklingTypes = Locale.getArrayInLocale("calf_suckling_types",this);
-        ArrayAdapter<String> calfSucklingTypesArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,calfSucklingTypes);
-        calfSucklingTypesArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        calfSucklingS.setAdapter(calfSucklingTypesArrayAdapter);
-        backB.setText(Locale.getStringInLocale("back", this));
-
-        initMenuText();
-    }
-
-    private void initMenuText(){
-        if(this.menu != null){
-            MenuItem mainMenuMI = menu.findItem(R.id.action_back_main_menu);
-            mainMenuMI.setTitle(Locale.getStringInLocale("back_to_main_menu", this));
-        }
-    }
-
-    @Override
-    public void onClick(View view)
-    {
-        if(view==addProductionB)
-        {
-            //addMilkProductionDialog.show();
-            Intent intent = new Intent(MilkProductionActivity.this, AddMilkProductionActivity.class);
-            startActivity(intent);
-        }
-        else if(view==addMilkProductionAddB)
-        {
-            sendMilkProductionData();
-        }
-        else if(view==productionHistoryB)
-        {
-            Intent intent=new Intent(MilkProductionActivity.this,MilkProcutionHistoryActivity.class);
-            startActivity(intent);
-        }
-        else if(view==dateET) {
-            dateETClicked();
-        }
-        else if(view==backB){
-            SendCachedDataThread sendCachedDataThread = new SendCachedDataThread();
-            sendCachedDataThread.execute(1);
-
-            Intent intent = new Intent(this, MainMenu.class);
-            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_FARMER);
-            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-            startActivity(intent);
-        }
-    }
-
-    private void dateETClicked()
-    {
-        Date date=new Date();
-        Calendar calendar=new GregorianCalendar();
-        calendar.setTime(date);
-        datePickerDialog=new DatePickerDialog(this,this,calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH));
-        //datePickerDialog=createDialogWithoutDateField(this,calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH));
-        datePickerDialog.show();
-    }
-
-    @Override
-    public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth)
-    {
-        String dateString=String.valueOf(dayOfMonth)+"/"+String.valueOf(monthOfYear+1)+"/"+String.valueOf(year);
-        dateET.setText(dateString);
-        if(!validateDate()){
-            dateET.setText("");
-        }
-    }
-
-    private void fetchCowIdentifiers()
-    {
-        CowIdentifierThread cowIdentifierThread=new CowIdentifierThread();
-        TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
-        cowIdentifierThread.execute(telephonyManager.getSimSerialNumber());
-    }
-
-    private void setCowIdentifiers(String[] cowArray)
-    {
-        if(cowS!=null)
-        {
-            ArrayAdapter<String> cowsArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_dropdown_item,cowArray);
-            cowsArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-            cowS.setAdapter(cowsArrayAdapter);
-        }
-    }
-    
-    private class CowIdentifierThread extends AsyncTask<String,Integer,String>
-    {
-        private ProgressDialog progressDialog;
-
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-            progressDialog = ProgressDialog.show(MilkProductionActivity.this, "",loadingPleaseWait, true);
-        }
-
-        @Override
-        protected String doInBackground(String... params)
-        {
-            JSONObject jsonObject=new JSONObject();
-            try
-            {
-                jsonObject.put("simCardSN",params[0]);
-                jsonObject.put("cowSex", Cow.SEX_FEMALE);
-                String result=DataHandler.sendDataToServer(MilkProductionActivity.this, jsonObject.toString(),DataHandler.FARMER_FETCH_COW_IDENTIFIERS_URL, true);
-                return result;
-            }
-            catch (JSONException e)
-            {
-                e.printStackTrace();
-            }
-            return null;
-        }
-
-        @Override
-        protected void onPostExecute(String result)
-        {
-            super.onPostExecute(result);
-            progressDialog.dismiss();
-            if(result == null ){
-                Toast.makeText(MilkProductionActivity.this,"server error",Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
-                Toast.makeText(MilkProductionActivity.this, Locale.getStringInLocale("generic_sms_error", MilkProductionActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
-                Toast.makeText(MilkProductionActivity.this, Locale.getStringInLocale("no_service", MilkProductionActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
-                Toast.makeText(MilkProductionActivity.this, Locale.getStringInLocale("radio_off", MilkProductionActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
-                Toast.makeText(MilkProductionActivity.this, Locale.getStringInLocale("server_not_receive_sms", MilkProductionActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else{
-                try
-                {
-                    JSONObject jsonObject=new JSONObject(result);
-                    JSONArray cowNamesArray=jsonObject.getJSONArray("cowNames");
-                    JSONArray earTagNumbersArray=jsonObject.getJSONArray("earTagNumbers");
-                    String[] cowArray=new String[cowNamesArray.length()];
-                    String[] earTagArray=new String[cowNamesArray.length()];
-                    for(int i=0;i<cowNamesArray.length();i++)
-                    {
-                        cowArray[i]=cowNamesArray.get(i).toString();
-                        earTagArray[i]=earTagNumbersArray.get(i).toString();
-                    }
-                    //TODO: warn user if no cows
-                    if(cowArray.length==0)
-                    {
-                        Toast.makeText(MilkProductionActivity.this,"no cows fetched",Toast.LENGTH_LONG).show();
-                    }
-                    MilkProductionActivity.this.cowNameArray =cowArray;
-                    MilkProductionActivity.this.cowEarTagNumberArray=earTagArray;
-                    String[] identifierArray=new String[cowArray.length];
-                    for (int i=0;i<cowArray.length;i++)
-                    {
-                        if(cowArray[i]!=null&&!cowArray[i].equals(""))
-                        {
-                            identifierArray[i]=cowArray[i];
-                        }
-                        else
-                        {
-                            identifierArray[i]=earTagArray[i];
-                        }
-                    }
-                    setCowIdentifiers(identifierArray);
-                }
-                catch (JSONException e)
-                {
-                    e.printStackTrace();
-                }
-            }
-
-        }
-    }
-
-    private void sendMilkProductionData()
-    {
-        if(validateInput())
-        {
-            TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
-            MilkProductionDataAdditionThread milkProductionDataAdditionThread=new MilkProductionDataAdditionThread();
-            String[] quantityTypesInEN = Locale.getArrayInLocale("quantity_types",this,Locale.LOCALE_ENGLISH);
-            String[] milkingTimesInEN = Locale.getArrayInLocale("milking_times", this, Locale.LOCALE_ENGLISH);
-            String quantityType = "";
-            if(quantityTypesInEN.length == quantityTypes.length) {
-                DataHandler.setSharedPreference(MilkProductionActivity.this, DataHandler.SP_KEY_MILK_QUANTITY_TYPE, String.valueOf(quantityTypeS.getSelectedItemPosition()));
-                quantityType = quantityTypesInEN[quantityTypeS.getSelectedItemPosition()];
-            }
-            String milkingTime = "";
-            if(milkingTimesInEN.length > 0){
-                milkingTime = milkingTimesInEN[timeS.getSelectedItemPosition()];
-            }
-
-            String[] calfSucklingTypesInEN = Locale.getArrayInLocale("calf_suckling_types",this,Locale.LOCALE_ENGLISH);
-            String calfSucklingType = calfSucklingTypesInEN[calfSucklingS.getSelectedItemPosition()];
-            milkProductionDataAdditionThread.execute(telephonyManager.getSimSerialNumber(),cowNameArray[cowS.getSelectedItemPosition()],cowEarTagNumberArray[cowS.getSelectedItemPosition()],milkingTime,quantityET.getText().toString(),quantityType,dateET.getText().toString(),noMilkingET.getText().toString(),calfSucklingType);
-        }
-    }
-
-    private boolean validateInput()
-    {
-        String[] quantityTypesInEN = Locale.getArrayInLocale("quantity_types",this,Locale.LOCALE_ENGLISH);
-        String quantityType = quantityTypesInEN[quantityTypeS.getSelectedItemPosition()];
-        if(quantityET.getText().toString()==null)
-        {
-            Toast.makeText(this,quantityETEmptyWarning,Toast.LENGTH_LONG).show();
-            return false;
-        }
-        else if(quantityET.getText().toString().length()<=0)
-        {
-            Toast.makeText(this,quantityETEmptyWarning,Toast.LENGTH_LONG).show();
-            return false;
-        }
-        else if(dateET.getText().toString()==null||dateET.getText().toString().length()==0)
-        {
-            Toast.makeText(this,Locale.getStringInLocale("enter_date",this),Toast.LENGTH_LONG).show();
-            return false;
-        }
-        else if(!validateDate()) {
-            return false;
-        }
-        else if(quantityType.equals("Litres") || quantityType.equals("KGs")) {
-            if(Integer.parseInt(quantityET.getText().toString()) > 30) {
-                Toast.makeText(this, Locale.getStringInLocale("milk_too_much",this),Toast.LENGTH_LONG).show();
-                return false;
-            }
-        }
-        else if(quantityType.equals("Cups")) {
-            if(Integer.parseInt(quantityET.getText().toString()) > (30*3.3)) {
-                Toast.makeText(this, Locale.getStringInLocale("milk_too_much",this),Toast.LENGTH_LONG).show();
-                return false;
-            }
-        }
-        if(noMilkingET.getText().toString()==null || noMilkingET.getText().toString().trim().length()==0){
-            Toast.makeText(this, Locale.getStringInLocale("enter_number_times_cow_milked",this),Toast.LENGTH_LONG).show();
-            return false;
-        }
-        else if(Integer.parseInt(noMilkingET.getText().toString())>10){
-            Toast.makeText(this, Locale.getStringInLocale("milking_times_too_much",this), Toast.LENGTH_LONG).show();
-            return false;
-        }
-        return true;
-    }
-
-    private boolean validateDate() {
-        try
-        {
-            Date dateEntered=new SimpleDateFormat(dateFormat, java.util.Locale.ENGLISH).parse(dateET.getText().toString());
-            Date today=new Date();
-            long milisecondDifference = today.getTime() - dateEntered.getTime();
-            long days = milisecondDifference / 86400000;
-            if((today.getTime()-dateEntered.getTime())<0)
-            {
-                Toast.makeText(this,Locale.getStringInLocale("date_in_future",this),Toast.LENGTH_LONG).show();
-                return false;
-            }
-            else if(days > 30) {//more than one month
-                Toast.makeText(this,Locale.getStringInLocale("milk_data_too_old",this),Toast.LENGTH_LONG).show();
-                return false;
-            }
-            else {
-                return true;
-            }
-        }
-        catch (ParseException e)
-        {
-            e.printStackTrace();
-            return false;
-        }
-    }
-
-    private class MilkProductionDataAdditionThread extends AsyncTask<String,Integer,String>
-    {
-        private ProgressDialog progressDialog;
-
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-            progressDialog = ProgressDialog.show(MilkProductionActivity.this, "",loadingPleaseWait, true);
-        }
-
-        @Override
-        protected String doInBackground(String... params)
-        {
-            Log.d(TAG,"at milkProductionDataAdditionThread");
-            JSONObject jsonObject=new JSONObject();
-            try
-            {
-                jsonObject.put("simCardSN",params[0]);
-                jsonObject.put("cowName",params[1]);
-                jsonObject.put("cowEarTagNumber",params[2]);
-                jsonObject.put("time",params[3]);
-                jsonObject.put("quantity",params[4]);
-                jsonObject.put("quantityType",params[5]);
-                jsonObject.put("date", params[6]);
-                jsonObject.put("noMilkingTimes",params[7]);
-                jsonObject.put("calfSuckling",params[8]);
-                String result=DataHandler.sendDataToServer(MilkProductionActivity.this, jsonObject.toString(),DataHandler.FARMER_ADD_MILK_PRODUCTION_URL, true);
-                Log.d(TAG,"data sent to server, result = "+result);
-                return result;
-            }
-            catch (JSONException e)
-            {
-                e.printStackTrace();
-            }
-            return null;
-        }
-
-        @Override
-        protected void onPostExecute(String result)
-        {
-            super.onPostExecute(result);
-            progressDialog.dismiss();
-            if(result==null)
-            {
-                Toast.makeText(MilkProductionActivity.this,"server error",Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.ACKNOWLEDGE_OK))
-            {
-                addMilkProductionDialog.dismiss();
-                Toast.makeText(MilkProductionActivity.this,infoSuccessfullySent,Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.DATA_ERROR))
-            {
-                Toast.makeText(MilkProductionActivity.this,problemInData,Toast.LENGTH_LONG).show();
-            }
-        }
-    }
-
-    private class SendCachedDataThread extends AsyncTask<Integer, Integer, Boolean>{
-
-        @Override
-        protected Boolean doInBackground(Integer... params) {
-            String result = DataHandler.sendCachedRequests(MilkProductionActivity.this, true);//send cached data and receive updated farmer data
-            if(result != null && !result.equals(DataHandler.CODE_USER_NOT_AUTHENTICATED)){//no data fetched for this farmer
-                try {//try converting the response into a jsonobject. It might not work if the DataHandler returns a response code
-                    Log.d(TAG, "response is " + result);
-                    DataHandler.saveFarmerData(MilkProductionActivity.this, new JSONObject(result));
-                    return true;
-                } catch (JSONException e) {
-                    e.printStackTrace();
-                }
-            }
-            return false;
-        }
-
-        @Override
-        protected void onPostExecute(Boolean result) {
-            super.onPostExecute(result);
-
-            if(result == true){
-                Toast.makeText(MilkProductionActivity.this, Locale.getStringInLocale("information_successfully_sent_to_server", MilkProductionActivity.this), Toast.LENGTH_LONG).show();
-            }
-        }
-    }
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MistroActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MistroActivity.java
deleted file mode 100644
index f8b5dee..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MistroActivity.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package org.cgiar.ilri.mistro.farmer;
-
-import android.content.Context;
-
-import com.actionbarsherlock.view.MenuItem;
-
-import org.cgiar.ilri.mistro.farmer.backend.Locale;
-
-/**
- * Created by jrogena on 14/05/14.
- */
-public interface MistroActivity {
-    public void initTextInViews();
-    public class Language{
-        public static boolean processLanguageMenuItemSelected(MistroActivity mistroActivity, Context context, MenuItem item){
-            if(item.getItemId() == R.id.action_english) {
-                Locale.switchLocale(Locale.LOCALE_ENGLISH, context);
-                mistroActivity.initTextInViews();
-                return true;
-            }
-            else if(item.getItemId() == R.id.action_swahili) {
-                Locale.switchLocale(Locale.LOCALE_SWAHILI, context);
-                mistroActivity.initTextInViews();
-                return true;
-            }
-            else if(item.getItemId() == R.id.action_lutsotso) {
-                Locale.switchLocale(Locale.LOCALE_LUTSOTSO, context);
-                mistroActivity.initTextInViews();
-                return true;
-            }
-            else if(item.getItemId() == R.id.action_nandi) {
-                Locale.switchLocale(Locale.LOCALE_NANDI, context);
-                mistroActivity.initTextInViews();
-                return true;
-            }
-            else if(item.getItemId() == R.id.action_kikabras) {
-                Locale.switchLocale(Locale.LOCALE_KIKABRAS, context);
-                mistroActivity.initTextInViews();
-                return true;
-            }
-            else if(item.getItemId() == R.id.action_kipsigis) {
-                Locale.switchLocale(Locale.LOCALE_KIPSIGIS, context);
-                mistroActivity.initTextInViews();
-                return true;
-            }
-            return false;
-        }
-    }
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/Utils.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/Utils.java
deleted file mode 100644
index e5faba7..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/Utils.java
+++ /dev/null
@@ -1,121 +0,0 @@
-package org.cgiar.ilri.mistro.farmer;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.provider.Settings;
-
-import com.actionbarsherlock.view.MenuItem;
-
-import org.cgiar.ilri.mistro.farmer.backend.Locale;
-
-/**
- * Created by jason on 8/6/13.
- */
-public class Utils
-{
-    public static void showSuccessfullRegistration(final Context context, String localeCode)
-    {
-        String title= Locale.getStringInLocale("string.successful_registration",context);
-        String instructions = Locale.getStringInLocale("successful_registration_instructions",context);
-        String okayText = Locale.getStringInLocale("okay",context);
-        AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(context);
-
-        alertDialogBuilder.setTitle(title);
-        alertDialogBuilder
-                .setMessage(instructions)
-                .setCancelable(false)
-                .setPositiveButton(okayText, new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialog, int which) {
-                        dialog.dismiss();
-                        Intent intent = new Intent(context, LandingActivity.class);
-                        context.startActivity(intent);
-                    }
-                });
-        AlertDialog alertDialog=alertDialogBuilder.create();
-        alertDialog.show();
-    }
-
-    public static void showGenericAlertDialog(final Context context, String title,String text, String positiveButtonText, String negativeButtonText, final Class<?> nextActivity, final Class<?> nextActivityNeg)
-    {
-        AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(context);
-        alertDialogBuilder.setTitle(title);
-        alertDialogBuilder
-                .setMessage(text)
-                .setCancelable(true)
-                .setPositiveButton(positiveButtonText, new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialog, int which)
-                    {
-                        if(nextActivity!=null)
-                        {
-                            dialog.dismiss();
-                            Intent intent = new Intent(context,nextActivity);
-                            context.startActivity(intent);
-                        }
-                        else
-                        {
-                            dialog.dismiss();
-                        }
-                    }
-                });
-        if(negativeButtonText!=null)
-        {
-            alertDialogBuilder.setNegativeButton(negativeButtonText, new DialogInterface.OnClickListener()
-            {
-
-                @Override
-                public void onClick(DialogInterface dialog, int which)
-                {
-                    if(nextActivityNeg!=null)
-                    {
-                        dialog.dismiss();
-                        Intent intent = new Intent(context,nextActivityNeg);
-                        context.startActivity(intent);
-                    }
-                    else
-                    {
-                        dialog.dismiss();
-                    }
-                }
-            });
-        }
-        AlertDialog alertDialog=alertDialogBuilder.create();
-        alertDialog.show();
-    }
-
-    public static AlertDialog createSMSDialog(Context context, DialogInterface.OnClickListener onClickListener){
-        AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(context);
-        alertDialogBuilder.setTitle(Locale.getStringInLocale("sms_charges", context));
-        alertDialogBuilder
-                .setMessage(Locale.getStringInLocale("incur_network_sms_charges", context))
-                .setCancelable(false)
-                .setPositiveButton(Locale.getStringInLocale("okay",context), onClickListener)
-                .setNegativeButton(Locale.getStringInLocale("cancel",context), onClickListener);
-        return alertDialogBuilder.create();
-    }
-
-    public static AlertDialog createMainMenuDialog(Context context, DialogInterface.OnClickListener onClickListener){
-        AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(context);
-        alertDialogBuilder.setTitle(Locale.getStringInLocale("warning", context));
-        alertDialogBuilder
-                .setMessage(Locale.getStringInLocale("action_will_be_canceled", context))
-                .setCancelable(false)
-                .setPositiveButton(Locale.getStringInLocale("okay",context), onClickListener)
-                .setNegativeButton(Locale.getStringInLocale("cancel",context), onClickListener);
-        return alertDialogBuilder.create();
-    }
-
-    public static AlertDialog createMilkFluctuationDialog(Context context, DialogInterface.OnClickListener onClickListener){
-        AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(context);
-        alertDialogBuilder.setTitle(Locale.getStringInLocale("warning", context));
-        alertDialogBuilder
-                .setMessage(Locale.getStringInLocale("milk_inconsistent", context))
-                .setCancelable(false)
-                .setPositiveButton(Locale.getStringInLocale("okay",context), onClickListener)
-                .setNegativeButton(Locale.getStringInLocale("cancel",context), onClickListener);
-        return alertDialogBuilder.create();
-    }
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/DataHandler.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/DataHandler.java
deleted file mode 100644
index eff8ee8..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/DataHandler.java
+++ /dev/null
@@ -1,1086 +0,0 @@
-package org.cgiar.ilri.mistro.farmer.backend;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.app.PendingIntent;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.content.SharedPreferences;
-import android.database.sqlite.SQLiteDatabase;
-import android.net.ConnectivityManager;
-import android.net.NetworkInfo;
-import android.os.Bundle;
-import android.telephony.SmsManager;
-import android.telephony.SmsMessage;
-import android.telephony.TelephonyManager;
-import android.util.Log;
-
-import org.cgiar.ilri.mistro.farmer.R;
-
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpResponse;
-import org.apache.http.NameValuePair;
-import org.apache.http.client.HttpClient;
-import org.apache.http.client.entity.UrlEncodedFormEntity;
-import org.apache.http.client.methods.HttpPost;
-import org.apache.http.impl.client.DefaultHttpClient;
-import org.apache.http.message.BasicNameValuePair;
-import org.apache.http.params.BasicHttpParams;
-import org.apache.http.params.HttpConnectionParams;
-import org.apache.http.params.HttpParams;
-import org.cgiar.ilri.mistro.farmer.Utils;
-import org.cgiar.ilri.mistro.farmer.backend.database.DatabaseHelper;
-import org.cgiar.ilri.mistro.farmer.carrier.Cow;
-import org.cgiar.ilri.mistro.farmer.carrier.Dam;
-import org.cgiar.ilri.mistro.farmer.carrier.Event;
-import org.cgiar.ilri.mistro.farmer.carrier.EventConstraint;
-import org.cgiar.ilri.mistro.farmer.carrier.Farmer;
-import org.cgiar.ilri.mistro.farmer.carrier.MilkProduction;
-import org.cgiar.ilri.mistro.farmer.carrier.Sire;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.BufferedReader;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.net.URL;
-import java.net.URLConnection;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-
-/**
- * Created by jason on 8/6/13.
- */
-public class DataHandler
-{
-    public static final String ACKNOWLEDGE_OK="533783";
-    public static final String NO_DATA="77732";
-    public static final String DATA_ERROR="934342";
-    public static final String CODE_USER_NOT_AUTHENTICATED="43322";
-    public static final String CODE_SIM_CARD_REGISTERED="83242";
-    public static final String CODE_NUMBER_IN_USE="032443";
-    public static final String NO_CONNECTION = "43387";
-
-    private static final String TAG="DataHandler";
-    private static final long SMS_RESPONSE_TIMEOUT = 300000;
-    private static final int HTTP_POST_TIMEOUT =20000;
-    private static final int HTTP_RESPONSE_TIMEOUT =20000;
-    public static final String SMS_SERVER_ADDRESS = "+254708090206";
-    private static final String BASE_URL="http://azizi.ilri.cgiar.org/ngombe_planner";
-    //private static final String BASE_URL="http://192.168.14.102/~jason/ngombe_planner/WebServer";
-    //private static final String BASE_URL="http://172.26.23.48/~jason/ngombe_planner/WebServer";
-    public static final String FARMER_REGISTRATION_URL="/php/farmer/registration.php";
-    public static final String FARMER_FETCH_VETS_URL="/php/farmer/fetch_vets.php";
-    public static final String FARMER_AUTHENTICATION_URL="/php/farmer/authentication.php";
-    public static final String FARMER_SIM_CARD_REGISTRATION_URL="/php/farmer/sim_card_registration.php";
-    public static final String FARMER_FETCH_COW_IDENTIFIERS_URL="/php/farmer/fetch_cow_identifiers.php";
-    public static final String FARMER_ADD_MILK_PRODUCTION_URL="/php/farmer/add_milk_production.php";
-    public static final String FARMER_FETCH_MILK_PRODUCTION_HISTORY_URL="/php/farmer/fetch_milk_production_history.php";
-    public static final String FARMER_ADD_COW_EVENT_URL="/php/farmer/add_cow_event.php";
-    public static final String FARMER_FETCH_COW_EVENTS_HISTORY_URL="/php/farmer/fetch_cow_events_history.php";
-    public static final String FARMER_FETCH_COW_SERVICING_EVENTS_URL="/php/farmer/fetch_servicing_events.php";
-    public static final String FARMER_REGISTER_FARM_COORDS_URL="/php/farmer/register_farm_coords.php";
-    public static final String FARMER_ADD_CACHED_DATA_URL="/php/farmer/add_cached_data.php";
-
-    public static final String ADMIN_AUTHENTICATION_URL="/php/admin/authentication.php";
-    public static final String ADMIN_EDIT_FARMER_URL="/php/admin/edit_farmer.php";
-    public static final String ADMIN_GET_COWS_URL="/php/admin/fetch_cows.php";
-    public static final String ADMIN_EDIT_COW_URL="/php/admin/edit_cow.php";
-
-    public static final String SP_KEY_LOCALE = "locale";
-    public static final String SP_KEY_MILK_QUANTITY_TYPE = "milkQuantityTYpe";
-    public static final String SP_KEY_USE_SMS_TO_SEND_DATA = "useSMSToSendData";
-    public static final String SP_KEY_SMS_RESPONSE = "smsResponse";
-    public static final String SP_KEY_SMS_CACHE = "smsCache";
-
-    public static final String SP_KEY_AEA_DATE = "addEventActivityDate";
-    public static final String SP_KEY_AEA_REMARKS = "addEventActivityRemarks";
-    public static final String SP_KEY_AEA_STRAW_NUMBER = "addEventActivityStrawNumber";
-    public static final String SP_KEY_AEA_VET_USED = "addEventActivityVetUsed";
-    public static final String SP_KEY_AEA_BULL_NAME = "addEventActivityBullName";
-    public static final String SP_KEY_AEA_BULL_OWNER = "addEventActivityBullOwner";
-    public static final String SP_KEY_AEA_NO_SERVICING_DAYS = "addEventActivityNoServicingDays";
-    public static final String SP_KEY_AMPA_DATE = "addMilkProductionActivityDate";
-    public static final String SP_KEY_AMPA_QUANTITY = "addMilkProductionActivityQuantity";
-    public static final String SP_KEY_CRA_NAME = "cowRegistrationActivityName";
-    public static final String SP_KEY_CRA_EAR_TAG_NUMBER = "cowRegistrationActivityEarTagNumber";
-    public static final String SP_KEY_CRA_AGE = "cowRegistrationActivityAge";
-    public static final String SP_KEY_CRA_DATE_OF_BIRTH = "cowRegistrationActivityDateOfBirth";
-    public static final String SP_KEY_CRA_BREED = "cowRegistrationActivityBreed";
-    public static final String SP_KEY_CRA_BREED_OTHER = "cowRegistrationActivityOtherBreed";
-    public static final String SP_KEY_CRA_DEFORMITY = "cowRegistrationActivityDeformity";
-    public static final String SP_KEY_CRA_STRAW_NUMBER = "cowRegistrationActivityStrawNumber";
-    public static final String SP_KEY_CRA_DAM = "cowRegistrationActivityDam";
-    public static final String SP_KEY_CRA_SIRE = "cowRegistrationActivitySire";
-    public static final String SP_KEY_CRA_EMBRYO_NUMBER = "cowRegistrationActivityEmbryoNumber";
-    public static final String SP_KEY_CRA_COUNTRY_OF_ORIGIN = "cowRegistrationActivityCountryOfOrigin";
-    public static final String SP_KEY_FRA_FULL_NAME = "farmerRegistrationActivityFullName";
-    public static final String SP_KEY_FRA_EXTENSION_PERSONNEL = "farmerRegistrationActivityExtensionPersonnel";
-    public static final String SP_KEY_FRA_MOBILE_NUMBER = "farmerRegistrationActivityMobileNumber";
-
-    public static final String CAN_SEND_USING_SMS = "canSend";
-    public static final String CANNOT_SEND_USING_SMS = "cannotSend";
-    public static final String SMS_DELIMITER = "#*#*";
-    public static final String ACTION_SMS_SENT = "SMS_SENT_MISTRO";
-    public static final String ACTION_SMS_DELIVERED = "SMS_DELIVERED_MISTRO";
-    public static final String ACTION_SMS_RECEIVED = "SMS_RECEIVED_MISTRO";
-    public static final String SMS_ERROR_GENERIC_FAILURE = "sms_generic_failure_error";
-    public static final String SMS_ERROR_NO_SERVICE = "sms_no_service_error";
-    public static final String SMS_ERROR_RADIO_OFF = "sms_radio_off_error";
-    public static final String SMS_ERROR_RESULT_CANCELLED = "sms_result_cancelled_error";
-
-    /**
-     * This method checks whether the application can access the internet
-     *
-     * @param context   The activity/service from where you want to check for the connection
-     *
-     * @return  True if the application can connect to the internet and False if not
-     */
-    public static boolean checkNetworkConnection(Context context){
-        ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
-        NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();
-        if(networkInfo==null){ //no connection
-            return false;
-        }
-        else {
-            return true;
-        }
-    }
-
-    /**
-     * This method checks if an internet connection is available and asks the user whether it can use SMS instead
-     * if no internet connection is found.
-     * Please do not run this method in the UI thread.
-     *
-     * @param context   The activity/service from where you want to check for the connection
-     */
-    public static void requestPermissionToUseSMS(final Context context){
-        if(!checkNetworkConnection(context)){
-            if(getSharedPreference(context, SP_KEY_USE_SMS_TO_SEND_DATA,CANNOT_SEND_USING_SMS).equals(CANNOT_SEND_USING_SMS)){
-                DialogInterface.OnClickListener onClickListener = new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialog, int which) {
-                        if(which==DialogInterface.BUTTON_POSITIVE){
-                            dialog.dismiss();
-                            setSharedPreference(context, SP_KEY_USE_SMS_TO_SEND_DATA,CAN_SEND_USING_SMS);
-                        }
-                        else{
-                            dialog.cancel();
-                            setSharedPreference(context, SP_KEY_USE_SMS_TO_SEND_DATA,CANNOT_SEND_USING_SMS);
-                        }
-                    }
-                };
-                AlertDialog simCardAlertDialog = Utils.createSMSDialog(context, onClickListener);
-                simCardAlertDialog.show();
-            }
-        }
-        else{
-            setSharedPreference(context, SP_KEY_USE_SMS_TO_SEND_DATA,CANNOT_SEND_USING_SMS);
-        }
-    }
-
-    /**
-     * This method sends the string corresponding to a jsonObject or jsonArray to the server. Note that if string is not from the specified types of
-     * objects the server might not reply as expected.
-     * This method should only be called from within an asynchronous thread. Refer to android.os.AsyncTask
-     *
-     * @param context The context from where the data is being sent
-     * @param jsonString The string corresponding to either a jsonObject or a jsonArray
-     * @param appendedURL The page on the server to which the data is to be sent. All pages accessible from this app are specified in DataHandler
-     *                    eg DataHandler.FARMER_REGISTRATION_URL
-     * @param waitForResponse Set to true if UI will be waiting for a response from the server
-     *
-     * @return The response from the server
-     */
-    public static String sendDataToServer(Context context, String jsonString, String appendedURL, boolean waitForResponse) {
-        String response;
-        if(checkNetworkConnection(context)){
-            response = sendDataUsingHttpConnection(context, jsonString, appendedURL);
-        }
-        else{
-            //response = sendDataUsingSMS(context, jsonString, appendedURL, waitForResponse);
-            return null;
-        }
-        return response;
-    }
-
-    /**
-     * This method sends the string corresponding to a jsonObject or jsonArray to the server. Note that if string is not from the specified types of
-     * objects the server might not reply as expected. This function also caches the results from the server into the specified table and fetches
-     * data from the cache table if no response from the server.
-     * This method should only be called from within an asynchronous thread. Refer to android.os.AsyncTask
-     *
-     * @param context The context from where the data is being sent
-     * @param jsonString The string corresponding to either a jsonObject or a jsonArray
-     * @param appendedURL The page on the server to which the data is to be sent. All pages accessible from this app are specified in DataHandler
-     *                    eg DataHandler.FARMER_REGISTRATION_URL
-     * @param waitForResponse Set to true if UI will be waiting for a response from the server
-     * @param cacheTable The table to be used as a cache for the data obtained from the server
-     *
-     * @return The response from the server
-     */
-    public static String sendDataToServer(Context context, String jsonString, String appendedURL, boolean waitForResponse, String cacheTable) {
-        String response = null;
-        if(checkNetworkConnection(context)){//try to
-            response = sendDataUsingHttpConnection(context, jsonString, appendedURL);
-
-            cacheServerData(context, response, cacheTable);
-        }
-        if(response == null){//means that either there was no connection to the server or a null was returned
-            return getCachedServerData(context, cacheTable);
-        }
-        return response;
-    }
-
-    private static void cacheServerData(Context context, String serverResponse, String cacheTable){
-        if(serverResponse != null){
-            try{
-                DatabaseHelper databaseHelper = new DatabaseHelper(context);
-                SQLiteDatabase writableDatabase = databaseHelper.getWritableDatabase();
-
-                JSONArray serverData = new JSONArray(serverResponse);
-                String[] columns = null;
-
-                databaseHelper.runTruncateQuery(writableDatabase, cacheTable);//Delete the cache that was already in the database
-
-                for(int i = 0; i < serverData.length(); i++){
-                    JSONObject currentRow = serverData.getJSONObject(i);
-                    if(i == 0){//initialize the columns to be saved in the cache table
-                        List<String> tmpColumns = new ArrayList<String>();
-                        Iterator<String> keys = currentRow.keys();
-                        while(keys.hasNext()){
-                            tmpColumns.add(keys.next());
-                        }
-
-                        columns = tmpColumns.toArray(new String[tmpColumns.size()]);
-                        Log.d(TAG, "Columns for the cache table are "+String.valueOf(columns));
-                    }
-
-                    if(columns != null){
-                        String[] columnValues = new String[columns.length];
-                        for(int j = 0; j < columns.length; j++){
-                            columnValues[j] = currentRow.getString(columns[j]);
-                        }
-
-                        databaseHelper.runInsertQuery(cacheTable, columns, columnValues, -1, writableDatabase);
-                    }
-                }
-            }
-            catch (Exception e){
-                e.printStackTrace();
-            }
-        }
-    }
-
-    private static String getCachedServerData(Context context, String cacheTable){
-        try{
-            DatabaseHelper databaseHelper = new DatabaseHelper(context);
-            SQLiteDatabase readableDatabase = databaseHelper.getReadableDatabase();
-
-            String[] columns = databaseHelper.getAllColumns(cacheTable);
-            if(columns != null){
-                String[][] results = databaseHelper.runSelectQuery(readableDatabase, cacheTable, columns, null, null, null, null, null, null);
-                JSONArray jsonArray = new JSONArray();
-                for(int i = 0; i < results.length; i++){
-                    JSONObject currRow = new JSONObject();
-
-                    for(int j = 0; j < results[i].length; j++){
-                        currRow.put(columns[j], results[i][j]);
-                    }
-
-                    jsonArray.put(currRow);
-                }
-
-                return jsonArray.toString();
-            }
-        }
-        catch (Exception e){
-            e.printStackTrace();
-        }
-
-        return null;
-    }
-
-    /**
-     * This method sends data to the server using SMS
-     *
-     * @param context   The activity/service sending the data
-     * @param jsonString    The json string to be sent
-     * @param appendedURL   The page on the server to which the data is to be sent. All pages accessible from this app are specified in DataHandler
-     *                      eg DataHandler.FARMER_REGISTRATION_URL
-     * @param waitForResponse   Set to true if UI will be waiting for a response from the server
-     *
-     * @return  The response from the server
-     */
-    private static String sendDataUsingSMS(final Context context, String jsonString, String appendedURL, boolean waitForResponse){
-        if(getSharedPreference(context, SP_KEY_USE_SMS_TO_SEND_DATA,CANNOT_SEND_USING_SMS).equals(CAN_SEND_USING_SMS)){
-            //clear shared preference meant to store server's response
-            setSharedPreference(context, SP_KEY_SMS_RESPONSE, "");
-            setSharedPreference(context, SP_KEY_SMS_CACHE, "");
-
-            SmsManager smsManager = SmsManager.getDefault();
-            String message = appendedURL+SMS_DELIMITER+jsonString;
-            ArrayList<String> multipartMessage = smsManager.divideMessage(message);
-            int noOfParts = multipartMessage.size();
-
-
-            MistroSMSSentReceiver mistroSMSSentReceiver = new MistroSMSSentReceiver(message, noOfParts);
-            context.registerReceiver(mistroSMSSentReceiver, new IntentFilter(ACTION_SMS_SENT));
-            MistroSMSDeliveredReceiver mistroSMSDeliveredReceiver = new MistroSMSDeliveredReceiver(message, noOfParts);
-            context.registerReceiver(mistroSMSDeliveredReceiver, new IntentFilter(ACTION_SMS_DELIVERED));
-            if(waitForResponse){//method will be waiting for a response sms from the server
-                MistroSMSReceiver mistroSMSReceiver = new MistroSMSReceiver();
-                IntentFilter smsReceivedIntentFilter = new IntentFilter(ACTION_SMS_RECEIVED);
-                smsReceivedIntentFilter.addAction("android.provider.Telephony.SMS_RECEIVED");
-                context.registerReceiver(mistroSMSReceiver, smsReceivedIntentFilter);
-            }
-
-
-            //register a new sent and delivered intent for each of the parts
-            ArrayList<PendingIntent> sentPendingIntents = new ArrayList<PendingIntent>();
-            ArrayList<PendingIntent> deliveredPendingIntents = new ArrayList<PendingIntent>();
-            for(int i = 0; i<noOfParts; i++){
-                PendingIntent newSentPE = PendingIntent.getBroadcast(context, 0, new Intent(ACTION_SMS_SENT), 0);
-                sentPendingIntents.add(newSentPE);
-                PendingIntent newDeliveredPE = PendingIntent.getBroadcast(context, 0, new Intent(ACTION_SMS_DELIVERED), 0);
-                deliveredPendingIntents.add(newDeliveredPE);
-            }
-            smsManager.sendMultipartTextMessage(SMS_SERVER_ADDRESS, null, multipartMessage, sentPendingIntents, deliveredPendingIntents);
-
-            long startTime = System.currentTimeMillis();
-            if(waitForResponse){
-                while(true){
-                    long currTime = System.currentTimeMillis();
-                    long timeDiff = currTime - startTime;
-                    if(getSharedPreference(context, SP_KEY_SMS_RESPONSE,"").length()>0){
-                        return getSharedPreference(context, SP_KEY_SMS_RESPONSE,"");
-                    }
-                    else if(timeDiff>SMS_RESPONSE_TIMEOUT){
-                        Log.w(TAG, "SMS response timeout exceeded");
-                        return null;
-                    }
-                }
-            }
-            else{
-                return ACKNOWLEDGE_OK;
-            }
-        }
-        return null;
-    }
-
-    private static String sendDataUsingHttpConnection(Context context, String jsonString, String appendedURL) {
-        HttpParams httpParameters = new BasicHttpParams();
-        HttpConnectionParams.setConnectionTimeout(httpParameters, HTTP_POST_TIMEOUT);
-        HttpConnectionParams.setSoTimeout(httpParameters, HTTP_RESPONSE_TIMEOUT);
-        HttpClient httpClient=new DefaultHttpClient(httpParameters);
-        HttpPost httpPost=new HttpPost(BASE_URL+appendedURL);
-        try{
-            List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(1);
-            nameValuePairs.add(new BasicNameValuePair("json", jsonString));
-            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
-
-            HttpResponse httpResponse=httpClient.execute(httpPost);
-            if(httpResponse.getStatusLine().getStatusCode()==200)
-            {
-                HttpEntity httpEntity=httpResponse.getEntity();
-                if(httpEntity!=null)
-                {
-                    InputStream inputStream=httpEntity.getContent();
-                    String responseString=convertStreamToString(inputStream);
-                    return responseString.trim();
-                }
-            }
-            else
-            {
-                Log.e(TAG, "Status Code "+String.valueOf(httpResponse.getStatusLine().getStatusCode())+" passed");
-            }
-        }
-        catch (Exception e){
-            e.printStackTrace();
-            setSharedPreference(context, "http_error", e.getMessage());
-        }
-        if(isConnectedToServer(HTTP_POST_TIMEOUT)){
-            setSharedPreference(context, "http_error", "This application was unable to reach http://azizi.ilri.cgiar.org within "+String.valueOf(HTTP_POST_TIMEOUT/1000)+" seconds. Try resetting your network connection");
-        }
-        return  null;
-    }
-
-    private static boolean isConnectedToServer(int timeout) {
-        try{
-            URL myUrl = new URL("http://azizi.ilri.cgiar.org");
-            URLConnection connection = myUrl.openConnection();
-            connection.setConnectTimeout(timeout);
-            connection.connect();
-            return true;
-        } catch (Exception e) {
-            // Handle your exceptions
-            return false;
-        }
-    }
-
-    private static String convertStreamToString(InputStream inputStream)
-    {
-        BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream));
-        StringBuilder stringBuilder=new StringBuilder();
-        String line=null;
-        try
-        {
-            while((line=bufferedReader.readLine()) != null)
-            {
-                stringBuilder.append(line+"\n");
-            }
-        }
-        catch (Exception e)
-        {
-            e.printStackTrace();
-        }
-        finally
-        {
-            try
-            {
-                inputStream.close();
-
-            } catch (Exception e2)
-            {
-                e2.printStackTrace();
-            }
-        }
-        return stringBuilder.toString();
-    }
-
-    /**
-     * This method sets a shared preference to the specified value. Note that shared preferences can only handle strings
-     *
-     * @param context The context from where you want to set the value
-     * @param sharedPreferenceKey The key corresponding to the shared preference. All shared preferences accessible by this app are defined in
-     *                            DataHandler e.g DataHandler.SP_KEY_LOCALE
-     * @param value The value the sharedPreference is to be set to
-     */
-    public static void setSharedPreference(Context context, String sharedPreferenceKey, String value) {
-        SharedPreferences.Editor editor = context.getSharedPreferences(context.getString(R.string.app_name),Context.MODE_PRIVATE).edit();
-        editor.putString(sharedPreferenceKey,value);
-        editor.commit();
-        Log.d(TAG, sharedPreferenceKey+" shared preference saved as "+value);
-    }
-
-    /**
-     * Gets the vaule of a shared preference accessible by the context
-     *
-     * @param context Context e.g activity that is requesting for the shared preference
-     * @param sharedPreferenceKey The key corresponding to the shared preference. All shared preferences accessible by this app are defined in
-     *                            DataHandler e.g DataHandler.SP_KEY_LOCALE
-     * @param defaultValue What will be returned by this method if the sharedPreference is empty or unavailable
-     *
-     * @return The value of the sharedPreference or the default value specified if the sharedPreference is empty
-     */
-    public static String getSharedPreference(Context context, String sharedPreferenceKey, String defaultValue) {
-        SharedPreferences sharedPreferences = context.getSharedPreferences(context.getString(R.string.app_name), Context.MODE_PRIVATE);
-        //Log.d(TAG, "value of " + sharedPreferenceKey + " is " + sharedPreferences.getString(sharedPreferenceKey, defaultValue));
-        return sharedPreferences.getString(sharedPreferenceKey, defaultValue);
-    }
-
-    /**
-     * Responsible for handling errors that might occur while sms is sending
-     */
-    private static class MistroSMSSentReceiver extends BroadcastReceiver{
-
-        private final int noOfParts;
-        private final String originalMessage;
-        private int numberSent;
-        private int numberNotSent;
-
-        public MistroSMSSentReceiver(String originalMessage, int noOfParts){
-            this.noOfParts = noOfParts;
-            this.originalMessage = originalMessage;
-
-            numberSent = 0;
-            numberNotSent = 0;
-        }
-
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            //check if messages sent successfully
-            switch (getResultCode()){
-                case Activity.RESULT_OK:
-                    numberSent++;
-                    //do not put anything in the sharedPreference. Silence means everyting is A-Okay
-                    Log.d(TAG, "Message  "+String.valueOf(numberSent)+" of "+String.valueOf(noOfParts)+" successfully sent");
-                    break;
-                case SmsManager.RESULT_ERROR_GENERIC_FAILURE:
-                    numberNotSent++;
-                    if(getSharedPreference(context, SP_KEY_SMS_RESPONSE,"").length()==0){
-                        setSharedPreference(context, SP_KEY_SMS_RESPONSE, SMS_ERROR_GENERIC_FAILURE);
-                    }
-                    Log.e(TAG, "Message "+String.valueOf(numberNotSent)+" of "+String.valueOf(noOfParts)+" not sent due to GENERIC_FAILURE error");
-                    break;
-                case SmsManager.RESULT_ERROR_NO_SERVICE:
-                    numberNotSent++;
-                    if(getSharedPreference(context, SP_KEY_SMS_RESPONSE,"").length()==0){
-                        setSharedPreference(context, SP_KEY_SMS_RESPONSE, SMS_ERROR_NO_SERVICE);
-                    }
-                    Log.e(TAG, "Message "+String.valueOf(numberNotSent)+" of "+String.valueOf(noOfParts)+" not sent due to NO_SERVICE error");
-                    break;
-                case SmsManager.RESULT_ERROR_NULL_PDU:
-                    numberNotSent++;
-                    if(getSharedPreference(context, SP_KEY_SMS_RESPONSE,"").length()==0){
-                        setSharedPreference(context, SP_KEY_SMS_RESPONSE, SMS_ERROR_GENERIC_FAILURE);
-                    }
-                    Log.e(TAG, "Message "+String.valueOf(numberNotSent)+" of "+String.valueOf(noOfParts)+" not sent due to NULL_PDU error");
-                    break;
-                case SmsManager.RESULT_ERROR_RADIO_OFF:
-                    numberNotSent++;
-                    if(getSharedPreference(context, SP_KEY_SMS_RESPONSE,"").length()==0){
-                        setSharedPreference(context, SP_KEY_SMS_RESPONSE, SMS_ERROR_RADIO_OFF);
-                    }
-                    Log.e(TAG, "Message "+String.valueOf(numberNotSent)+" of "+String.valueOf(noOfParts)+" not sent due to RADIO_OFF error");
-                    break;
-            }
-        }
-    }
-
-    /**
-     * Handles errors that might occur when SMS has been sent and not yet received on the other side
-     */
-    private static class MistroSMSDeliveredReceiver extends BroadcastReceiver{
-
-        private final String originalMessage;
-        private final int noOfParts;
-        private int noDelivered;
-        private int noNotDelivered;
-
-        public MistroSMSDeliveredReceiver(String originalMessage, int noOfParts){
-            this.originalMessage = originalMessage;
-            this.noOfParts = noOfParts;
-
-            noDelivered = 0;
-            noNotDelivered = 0;
-        }
-
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            switch (getResultCode()) {
-                case Activity.RESULT_OK:
-                    noDelivered++;
-                    Log.d(TAG, "Message  "+String.valueOf(noDelivered)+" of "+String.valueOf(noOfParts)+" successfully sent");
-                    //do not insert anything into sharedPreferences, silence means everything is okay
-                    break;
-                case Activity.RESULT_CANCELED:
-                    noNotDelivered++;
-                    if(getSharedPreference(context, SP_KEY_SMS_RESPONSE,"").length()==0){
-                        setSharedPreference(context, SP_KEY_SMS_RESPONSE, SMS_ERROR_RESULT_CANCELLED);
-                    }
-                    Log.e(TAG, "Message "+String.valueOf(noNotDelivered)+" of "+String.valueOf(noOfParts)+" not sent due to RADIO_OFF error");
-                    break;
-            }
-        }
-    }
-
-    /**
-     * This method saves farmer details into a SQLite database.
-     * Run this method in a thread running asynchronously to the UI thread.
-     *
-     * @param context The activity/service from where you want to save the farmer details
-     * @param farmerData Data for the farmer represented as a JSONObject
-     */
-    public static void saveFarmerData(Context context, JSONObject farmerData){
-        DatabaseHelper databaseHelper = new DatabaseHelper(context);
-        SQLiteDatabase writableDB = databaseHelper.getWritableDatabase();
-
-
-        //insert farmer data
-        if(writableDB.isOpen()){
-            try{
-                //remove all the data associated to farmer
-                databaseHelper.runTruncateQuery(writableDB, databaseHelper.TABLE_FARMER);
-                databaseHelper.runTruncateQuery(writableDB, databaseHelper.TABLE_COW);
-                databaseHelper.runTruncateQuery(writableDB, databaseHelper.TABLE_MILK_PRODUCTION);
-                databaseHelper.runTruncateQuery(writableDB, databaseHelper.TABLE_EVENT);
-
-                String[] columns = new String[]{"id","name","mobile_no","location_county","location_district","gps_longitude", "gps_latitude", "date_added", "sim_card_sn"};
-                String[] columnValues = new String[columns.length];
-
-                columnValues[0] = farmerData.getString("id");
-                columnValues[1] = farmerData.getString("name");
-                columnValues[2] = farmerData.getString("mobile_no");
-                columnValues[3] = farmerData.getString("location_county");
-                columnValues[4] = farmerData.getString("location_district");
-                columnValues[5] = farmerData.getString("gps_longitude");
-                columnValues[6] = farmerData.getString("gps_latitude");
-                columnValues[7] = farmerData.getString("date_added");
-                columnValues[8] = farmerData.getString("sim_card_sn");
-
-                databaseHelper.runInsertQuery(databaseHelper.TABLE_FARMER, columns, columnValues, 0, writableDB);
-
-                //insert cow data
-                JSONArray cowData = farmerData.getJSONArray("cows");
-                for(int i = 0; i < cowData.length(); i++){
-                    JSONObject currCow = cowData.getJSONObject(i);
-                    columns = new String[]{"id", "farmer_id", "name", "ear_tag_number", "date_of_birth", "age", "age_type", "sex", "sire_id", "dam_id", "date_added", "service_type", "country_id", "bull_owner", "owner_name", "milking_status"};
-                    columnValues = new String[columns.length];
-
-                    columnValues[0] = currCow.getString("id");
-                    columnValues[1] = currCow.getString("farmer_id");
-                    columnValues[2] = currCow.getString("name");
-                    columnValues[3] = currCow.getString("ear_tag_number");
-                    columnValues[4] = currCow.getString("date_of_birth");
-                    columnValues[5] = currCow.getString("age");
-                    columnValues[6] = currCow.getString("age_type");
-                    columnValues[7] = currCow.getString("sex");
-                    columnValues[8] = currCow.getString("sire_id");
-                    columnValues[9] = currCow.getString("dam_id");
-                    columnValues[10] = currCow.getString("date_added");
-                    columnValues[11] = currCow.getString("service_type");
-                    columnValues[12] = currCow.getString("country_id");
-                    columnValues[13] = currCow.getString("bull_owner");
-                    columnValues[14] = currCow.getString("owner_name");
-                    columnValues[15] = currCow.getString("milking_status");
-
-                    databaseHelper.runInsertQuery(databaseHelper.TABLE_COW, columns, columnValues, 0, writableDB);
-
-                    JSONArray cowEvents = currCow.getJSONArray("events");
-                    for(int j = 0; j < cowEvents.length(); j++){
-                        JSONObject currEvent = cowEvents.getJSONObject(j);
-
-                        columns = new String[]{"id", "cow_id", "event_name", "remarks", "event_date", "birth_type", "parent_cow_event", "bull_id", "servicing_days", "cod", "no_of_live_births", "saved_on_server", "date_added"};
-                        columnValues = new String[columns.length];
-
-                        columnValues[0] = currEvent.getString("id");
-                        columnValues[1] = currEvent.getString("cow_id");
-                        columnValues[2] = currEvent.getString("event_name");
-                        columnValues[3] = currEvent.getString("remarks");
-                        columnValues[4] = currEvent.getString("event_date");
-                        columnValues[5] = currEvent.getString("birth_type");
-                        columnValues[6] = currEvent.getString("parent_cow_event");
-                        columnValues[7] = currEvent.getString("bull_id");
-                        columnValues[8] = currEvent.getString("servicing_days");
-                        columnValues[9] = currEvent.getString("cause_of_death");
-                        columnValues[10] = currEvent.getString("no_of_live_births");
-                        columnValues[11] = "1";
-                        columnValues[12] = currEvent.getString("date_added");
-
-                        databaseHelper.runInsertQuery(databaseHelper.TABLE_EVENT, columns, columnValues, 0, writableDB);
-                    }
-
-                    JSONArray cowMilkProduction = currCow.getJSONArray("milk_production");
-                    for(int j = 0; j < cowMilkProduction.length(); j++){
-                        JSONObject currMProduction = cowMilkProduction.getJSONObject(j);
-                        //(id INTEGER PRIMARY KEY, cow_id INTEGER, time TEXT, quantity INTEGER, date_added TEXT, date TEXT, quantity_type TEXT)");
-                        columns = new String[]{"id", "cow_id", "time", "quantity", "date_added", "date", "quantity_type"};
-
-                        columnValues = new String[columns.length];
-
-                        columnValues[0] = currMProduction.getString("id");
-                        columnValues[1] = currMProduction.getString("cow_id");
-                        columnValues[2] = currMProduction.getString("time");
-                        columnValues[3] = currMProduction.getString("quantity");
-                        columnValues[4] = currMProduction.getString("date_added");
-                        columnValues[5] = currMProduction.getString("date");
-                        columnValues[6] = currMProduction.getString("quantity_type");
-
-                        databaseHelper.runInsertQuery(databaseHelper.TABLE_MILK_PRODUCTION, columns, columnValues, 0, writableDB);
-
-                    }
-                }
-
-                JSONArray eventsConstraints = farmerData.getJSONArray("event_constraints");
-                for(int i = 0; i < eventsConstraints.length(); i++){
-                    JSONObject currConstraint = eventsConstraints.getJSONObject(i);
-
-                    //id INTEGER PRIMARY KEY, event TEXT, time INTEGER, time_units TEXT
-                    columns = new String[]{"id", "event", "time", "time_units"};
-                    columnValues = new String[columns.length];
-
-                    columnValues[0] = currConstraint.getString("id");
-                    columnValues[1] = currConstraint.getString("event");
-                    columnValues[2] = currConstraint.getString("time");
-                    columnValues[3] = currConstraint.getString("time_units");
-
-                    databaseHelper.runInsertQuery(databaseHelper.TABLE_EVENTS_CONSTRAINTS, columns, columnValues, 0, writableDB);
-                }
-            }
-            catch (Exception e){
-                e.printStackTrace();
-            }
-        }
-        else{
-            Log.e(TAG, "Writable database did not open. Was unable to save cow data into the SQLite DB");
-        }
-
-        //close the database
-        writableDB.close();
-        databaseHelper.close();
-    }
-
-    /**
-     * This method gets cached farmer data from the SQLite database
-     * @param context The activity/service from where you want to get the farmer data
-     *
-     * @return Returns null if something goes wrong or a farmer object if successful
-     */
-    public static Farmer getFarmerData(Context context){
-        Farmer farmer = null;
-        DatabaseHelper databaseHelper = new DatabaseHelper(context);
-        SQLiteDatabase readableDB = databaseHelper.getReadableDatabase();
-
-        //fetch farmer data
-        TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
-        String simCardSN = telephonyManager.getSimSerialNumber();
-
-        String[] columns = new String[]{"id","name","mobile_no","gps_longitude", "gps_latitude", "sim_card_sn"};
-        String selection  = "sim_card_sn='"+simCardSN+"'";
-        String[][] farmerResult = databaseHelper.runSelectQuery(readableDB,databaseHelper.TABLE_FARMER, columns, selection, null, null, null, null, null);
-        if(farmerResult.length == 1){//only one farmer should have this sim card sn
-
-            String farmerID = farmerResult[0][0];
-            farmer = new Farmer();
-            farmer.setFullName(farmerResult[0][1]);
-            farmer.setMobileNumber(farmerResult[0][2]);
-            farmer.setLongitude(farmerResult[0][3]);
-            farmer.setLatitude(farmerResult[0][4]);
-            farmer.setSimCardSN(farmerResult[0][5]);
-
-            //fetch cow data
-            columns = new String[]{"id", "name", "ear_tag_number", "date_of_birth", "age", "age_type", "sex", "sire_id", "dam_id", "date_added", "service_type", "country_id", "bull_owner", "owner_name", "milking_status"};
-            selection = "farmer_id="+farmerID;
-
-            String[][] cowResult = databaseHelper.runSelectQuery(readableDB, databaseHelper.TABLE_COW, columns, selection, null, null, null, null, null);
-            if(cowResult.length > 0){
-                for(int cowIndex = 0 ; cowIndex < cowResult.length; cowIndex++){
-                    Cow currCow = new Cow(true);
-
-                    String cowID = cowResult[cowIndex][0];
-                    currCow.setName(cowResult[cowIndex][1]);
-                    currCow.setEarTagNumber(cowResult[cowIndex][2]);
-                    Log.d(TAG, "Current cow's name and eartag number are "+cowResult[cowIndex][1]+ " " + cowResult[cowIndex][2]);
-                    currCow.setDateOfBirth(cowResult[cowIndex][3]); //TODO: not sure if this will work
-                    if(cowResult[cowIndex][4].length() > 0){
-                        currCow.setAge(Integer.parseInt(cowResult[cowIndex][4]));
-                    }
-                    currCow.setDateAdded(cowResult[cowIndex][9]);
-                    currCow.setAgeType(cowResult[cowIndex][5]);
-                    currCow.setSex(cowResult[cowIndex][6]);
-                    currCow.setServiceType(cowResult[cowIndex][10]);
-                    currCow.setMilkingStatus(cowResult[cowIndex][14]);
-
-                    //set sire
-                    if(cowResult[cowIndex][7].length() > 0){
-                        columns = new String[]{"id", "name", "ear_tag_number", "date_of_birth", "age", "age_type", "sex", "sire_id", "dam_id", "date_added", "service_type", "country_id", "bull_owner", "owner_name"};
-                        selection = "id="+cowResult[cowIndex][7];
-                        String[][] sireRes = databaseHelper.runSelectQuery(readableDB, databaseHelper.TABLE_COW, columns, selection, null, null, null, null, null);
-                        if(sireRes.length == 1){
-                            Sire sire = new Sire();
-                            sire.setName(sireRes[0][1]);
-                            sire.setEarTagNumber(sireRes[0][2]);
-                            sire.setDateAdded(sireRes[0][9]);
-
-                            currCow.setSire(sire);
-                        }
-                        else{
-                            Log.w(TAG, "No sire fetched for current cow");
-                            Log.w(TAG, " cow's id = "+cowResult[cowIndex][0]);
-                            Log.w(TAG, " sire's id = "+cowResult[cowIndex][7]);
-                        }
-                    }
-
-                    //set dam
-                    if(cowResult[cowIndex][8].length() > 0){
-                        columns = new String[]{"id", "name", "ear_tag_number", "date_of_birth", "age", "age_type", "sex", "sire_id", "dam_id", "date_added", "service_type", "country_id", "bull_owner", "owner_name"};
-                        selection = "id="+cowResult[cowIndex][8];
-                        String[][] damRes = databaseHelper.runSelectQuery(readableDB, databaseHelper.TABLE_COW, columns, selection, null, null, null, null, null);
-                        if(damRes.length == 1){
-                            Dam dam = new Dam();
-                            dam.setName(damRes[0][1]);
-                            dam.setEarTagNumber(damRes[0][2]);
-                            dam.setDateAdded(damRes[0][9]);
-
-                            currCow.setDam(dam);
-                        }
-                        else{
-                            Log.w(TAG, "No dam fetched for current cow");
-                            Log.w(TAG, " cow's id = "+cowResult[cowIndex][0]);
-                            Log.w(TAG, " dam's id = "+cowResult[cowIndex][8]);
-                        }
-                    }
-
-                    //fetch cow events
-                    columns = new String[] {"id", "cow_id", "event_name", "remarks", "event_date", "birth_type", "parent_cow_event", "bull_id", "servicing_days", "cod", "no_of_live_births", "saved_on_server", "date_added"};
-                    selection = "cow_id="+cowID;
-                    String[][] eventResult = databaseHelper.runSelectQuery(readableDB, databaseHelper.TABLE_EVENT, columns, selection, null, null, null, null, null);
-                    for(int eventIndex = 0; eventIndex < eventResult.length; eventIndex++){
-                        Event currEvent = new Event();
-
-                        currEvent.setId(Integer.parseInt(eventResult[eventIndex][0]));
-                        currEvent.setType(eventResult[eventIndex][2]);
-                        currEvent.setRemarks(eventResult[eventIndex][3]);
-                        currEvent.setEventDate(eventResult[eventIndex][4]);
-                        currEvent.setBirthType(eventResult[eventIndex][5]);
-                        if(eventResult[eventIndex][6].length() > 0)
-                            currEvent.setParentCowEventID(Integer.parseInt(eventResult[eventIndex][6]));
-                        if(eventResult[eventIndex][7].length() > 0)
-                            currEvent.setBullID(Integer.parseInt(eventResult[eventIndex][7]));
-                        if(eventResult[eventIndex][8].length() > 0)
-                            currEvent.setServicingDays(Integer.parseInt(eventResult[eventIndex][8]));
-                        currEvent.setCod(eventResult[eventIndex][9]);
-                        if(eventResult[eventIndex][10].length() > 0)
-                            currEvent.setNoOfLiveBirths(Integer.parseInt(eventResult[eventIndex][10]));
-                        if(eventResult[eventIndex][11].equals("1")){
-                            currEvent.setSavedOnServer(true);
-                        }
-                        else{
-                            currEvent.setSavedOnServer(false);
-                        }
-                        currEvent.setDateAdded(eventResult[eventIndex][12]);
-
-                        currCow.addEvent(currEvent);
-                    }
-
-                    //(id INTEGER PRIMARY KEY, cow_id INTEGER, time TEXT, quantity INTEGER, date_added TEXT, date TEXT, quantity_type TEXT)");
-                    columns = new String[] {"id", "cow_id", "time", "quantity", "date_added", "date", "quantity_type"};
-                    selection = "cow_id="+cowID;
-                    String[][] mpResult = databaseHelper.runSelectQuery(readableDB, databaseHelper.TABLE_MILK_PRODUCTION, columns, selection, null, null, null, null, null);
-                    for(int mpIndex = 0; mpIndex < mpResult.length; mpIndex++){
-                        MilkProduction currMP = new MilkProduction();
-
-                        currMP.setId(Integer.parseInt(mpResult[mpIndex][0]));
-                        currMP.setTime(mpResult[mpIndex][2]);
-                        currMP.setQuantity(Float.parseFloat(mpResult[mpIndex][3]));
-                        currMP.setDateAdded(mpResult[mpIndex][4]);
-                        currMP.setDate(mpResult[mpIndex][5]);
-                        currMP.setQuantityType(mpResult[mpIndex][6]);
-
-                        currCow.addMilkProduction(currMP);
-                    }
-                    farmer.addCow(currCow);
-                }
-            }
-            else{
-                Log.w(TAG, "No cows fetched from database");
-                Log.w(TAG, " farmer's id = "+farmerID);
-                Log.w(TAG, " farmer's name = "+farmer.getFullName());
-            }
-        }
-        else{
-            Log.e(TAG, "Unable to get cached farmer data. Might be because no farmer in has the provided simCardSN or more than one do");
-            Log.e(TAG, " SimcardSN = "+simCardSN);
-            Log.e(TAG, " Number of fetched farmers = "+String.valueOf(farmerResult.length));
-        }
-
-        return farmer;
-    }
-
-    public static List<EventConstraint> getEventConstraints(Context context){
-        List<EventConstraint> result = new ArrayList<EventConstraint>();
-        DatabaseHelper databaseHelper = new DatabaseHelper(context);
-        SQLiteDatabase readableDB = databaseHelper.getReadableDatabase();
-
-        String[] columns = new String[]{"id", "event", "time", "time_units"};
-        String[][] constraintResult = databaseHelper.runSelectQuery(readableDB,databaseHelper.TABLE_EVENTS_CONSTRAINTS, columns, null, null, null, null, null, null);
-        if(constraintResult.length > 0){
-            for(int i = 0; i < constraintResult.length; i++){
-                String[] currConstraint = constraintResult[i];
-                result.add(new EventConstraint(Integer.parseInt(currConstraint[0]), currConstraint[1], Integer.parseInt(currConstraint[2]), currConstraint[3]));
-            }
-        }
-
-        return result;
-    }
-
-    /**
-     * This method caches data that would have been sent to the server. Note that this method has an almost identical arguement
-     * signature similar to the sendDataToServer method.
-     *
-     * @param context   The activity/service from where you want to save cache the request
-     * @param jsonString    The valid json string containing data for the request as you would have sent it in a normal request
-     * @param appendedURL   The URI for the module on the server which you want the request to go to (eventually) e.g FARMER_ADD_COW_EVENT_URL
-     */
-    public static final boolean cacheRequest(Context context, String jsonString, String appendedURL){
-        //TODO: do stuff
-        DatabaseHelper databaseHelper = new DatabaseHelper(context);
-        SQLiteDatabase writableDB = databaseHelper.getWritableDatabase();
-        if(writableDB.isOpen()){
-            String[] columns = new String[]{"url", "json"};
-            String[] values = new String[columns.length];
-            values[0] = appendedURL;
-            values[1] = jsonString;
-
-            databaseHelper.runInsertQuery(databaseHelper.TABLE_CACHED_REQUESTS, columns, values, -1, writableDB);
-            return true;
-        }
-        else{
-            Log.e(TAG, "Writable database did not open. Was unable to cache request in the SQLite DB. Choosing to send the data to the server instead");
-            sendDataToServer(context, jsonString, appendedURL, false);
-        }
-        return false;
-    }
-
-    /**
-     * This method sends cached data to the server
-     *
-     * @param waitForResponse If set to true, this method will wait for the response from the server and returns it to the caller
-     * @param context   The activity/service from where you want to send the data to the server
-     */
-    public static final String sendCachedRequests(Context context, boolean waitForResponse){
-        Log.d(TAG, "Trying to send cached data to server");
-        //public static String sendDataToServer(Context context, String jsonString, String appendedURL, boolean waitForResponse) {
-        DatabaseHelper databaseHelper = new DatabaseHelper(context);
-        SQLiteDatabase writableDB = databaseHelper.getWritableDatabase();
-        if(writableDB.isOpen()){
-            String[] columns = new String[]{"id","url", "json"};
-            String[][] result = databaseHelper.runSelectQuery(writableDB, databaseHelper.TABLE_CACHED_REQUESTS, columns, null, null, null, null, null, null);
-            List<String> ids = new ArrayList<String>();
-            if(result != null){
-                try{
-                    JSONArray requests = new JSONArray();
-                    for(int requestIndex = 0; requestIndex < result.length; requestIndex++){
-                        JSONObject currRequest = new JSONObject();
-                        ids.add(result[requestIndex][0]);
-                        String currRequestURL = result[requestIndex][1];
-                        JSONObject currRequestData = new JSONObject(result[requestIndex][2]);
-                        currRequest.put("requestURL", currRequestURL);
-                        currRequest.put("requestData", currRequestData);
-                        requests.put(currRequest);
-                    }
-                    TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
-                    String simCardSN = telephonyManager.getSimSerialNumber();
-                    if(simCardSN!=null){
-                        JSONObject finalRequest = new JSONObject();
-                        finalRequest.put("simCardSN", simCardSN);
-                        finalRequest.put("pastRequests", requests);
-                        if(requests.length() > 0){
-                            Log.d(TAG, "Sending the following cached data "+finalRequest.toString());
-                            String response = sendDataToServer(context, finalRequest.toString(), FARMER_ADD_CACHED_DATA_URL, waitForResponse);
-                            if(response != null && !response.equals(CODE_USER_NOT_AUTHENTICATED)){
-                                //delete the saved data from cache
-                                databaseHelper.runTruncateQuery(writableDB, databaseHelper.TABLE_CACHED_REQUESTS);
-                                /*String[] idsArray = new String[ids.size()];
-                                idsArray = ids.toArray(idsArray);
-                                databaseHelper.runDeleteQuery(writableDB, databaseHelper.TABLE_CACHED_REQUESTS, "id", idsArray);*/
-                                Log.d(TAG, "Deleted cached requests from SQLite database");
-                            }
-                            return response;
-                        }
-                        else {
-                            Log.d(TAG, "No Cached data in database");
-                            return  NO_DATA;
-                        }
-                    }
-                }
-                catch (Exception e){
-                    e.printStackTrace();
-                }
-            }
-            else{
-                Log.w(TAG, "Did not get any cached requests in the SQLite database, exiting");
-            }
-        }
-        else{
-            Log.e(TAG, "Readable database did not open. Was una");
-        }
-        return null;
-    }
-
-    /**
-     * This broadcast receiver is responsible for watching for SMSs coming for the server and concatenating SMS fragments in SMSs that are
-     * longer than the standard SMS length
-     */
-    private static class MistroSMSReceiver extends BroadcastReceiver{
-
-        private final SmsManager smsManager;
-
-        public MistroSMSReceiver(){
-            smsManager = SmsManager.getDefault();
-        }
-
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            final Bundle bundle = intent.getExtras();
-            try{
-                if(bundle != null){
-                    final Object[] pdusObject = (Object[])bundle.get("pdus");
-                    for(int i = 0; i < pdusObject.length; i++){
-                        SmsMessage currentMessage = SmsMessage.createFromPdu((byte[]) pdusObject[i]);
-                        String phoneNumber = currentMessage.getDisplayOriginatingAddress();
-                        String message = currentMessage.getDisplayMessageBody();
-
-                        if(phoneNumber.equals(SMS_SERVER_ADDRESS)){
-                            Log.d(TAG, "SMS received from server");
-                            if(getSharedPreference(context, SP_KEY_SMS_RESPONSE,"").length()==0){
-                                if(isExpectedString(message)){
-                                    Log.d(TAG, "SMS is valid json saved to shared preferences");
-                                    setSharedPreference(context, SP_KEY_SMS_RESPONSE, message);
-                                }
-                                else{
-                                    String cachedMessage = getSharedPreference(context, SP_KEY_SMS_CACHE, "");
-                                    cachedMessage = cachedMessage + message;
-                                    if(isExpectedString(cachedMessage)){
-                                        Log.d(TAG, "cached message + SMS is valid json saved to shared preferences");
-                                        setSharedPreference(context, SP_KEY_SMS_RESPONSE, cachedMessage);
-                                    }
-                                    else{
-                                        Log.d(TAG, "cached message + SMS is invalid json, cached in shared preference and waiting for other messages");
-                                        setSharedPreference(context, SP_KEY_SMS_CACHE, cachedMessage);
-                                    }
-                                }
-                            }
-                        }
-                        else{
-                            Log.w(TAG, "Message received from "+phoneNumber+" which is not the servers address ("+SMS_SERVER_ADDRESS+")");
-                        }
-                    }
-                }
-                else{
-                    Log.w(TAG, "Bundle containing sms contains null. Skipping this one");
-                }
-            }
-            catch (Exception e){
-                Log.e(TAG, "Exception thrown while trying to receive message"+e);
-            }
-        }
-
-        private boolean isExpectedString(String test) {
-            boolean valid = false;
-
-            try{
-                new JSONObject(test);
-                valid = true;
-            }
-            catch (JSONException e){
-                valid = false;
-            }
-
-            if(valid==false){
-                try {
-                    new JSONArray(test);
-                    valid = true;
-                }
-                catch(JSONException ex) {
-                    valid = false;
-                }
-            }
-
-            if(valid==false && test!=null){
-                if(test.equals(ACKNOWLEDGE_OK)) valid = true;
-                else if(test.equals(DATA_ERROR)) valid = true;
-                else if(test.equals(NO_DATA)) valid = true;
-                else if(test.equals(CODE_SIM_CARD_REGISTERED)) valid = true;
-                else if(test.equals(CODE_NUMBER_IN_USE)) valid = true;
-            }
-
-            return valid;
-        }
-    }
-
-    public static boolean isNull(String string){
-        if(string == null || string.equals("NULL") || string.equals("null")){
-            return true;
-        }
-        else{
-            return false;
-        }
-    }
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/Locale.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/Locale.java
deleted file mode 100644
index e02b252..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/Locale.java
+++ /dev/null
@@ -1,222 +0,0 @@
-package org.cgiar.ilri.mistro.farmer.backend;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.util.Log;
-import org.cgiar.ilri.mistro.farmer.R;
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Created by jason on 9/5/13.
- */
-public class Locale {
-    private static final String TAG = "Locale";
-    public static final String LOCALE_ENGLISH="en";
-    public static final String LOCALE_SWAHILI="sw";
-    public static final String LOCALE_LUTSOTSO="lu";
-    public static final String LOCALE_NANDI="nn";
-    public static final String LOCALE_KIKABRAS="kr";
-    public static final String LOCALE_KIPSIGIS="kp";
-
-    //public static final String SHARED_PREFERENCES_KEY = "locale";
-    public static String getStringInLocale(String stringName, Context context) {
-        String localeCode = getLocaleCode(context);
-        String name = stringName+"_"+localeCode;
-        String value = null;
-        try {
-            Field field = R.string.class.getDeclaredField(name);
-            int id = field.getInt(field);
-            if(id != 0) {
-                value = context.getString(id);
-            }
-            else {
-                Log.e(TAG,"no field in class R.string with the name "+name);
-            }
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        return value;
-    }
-
-    public static String[] getArrayInLocale(String arrayName, Context context) {
-        String localeCode = getLocaleCode(context);
-        String name = arrayName+"_"+localeCode;
-        String[] value = null;
-        try {
-            Field field = R.array.class.getDeclaredField(name);
-            int id = field.getInt(field);
-            if(id != 0) {
-                value = context.getResources().getStringArray(id);
-            }
-            else {
-                Log.e(TAG,"no field in class R.string with the name "+name);
-            }
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        return value;
-    }
-
-    public static String[] getArrayInLocale(String arrayName, Context context, String localeCode) {
-        String name = arrayName+"_"+localeCode;
-        String[] value = null;
-        try {
-            Field field = R.array.class.getDeclaredField(name);
-            int id = field.getInt(field);
-            if(id != 0) {
-                value = context.getResources().getStringArray(id);
-            }
-            else {
-                Log.e(TAG,"no field in class R.string with the name "+name);
-            }
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        return value;
-    }
-
-    public static int getArrayIDInLocale(String arrayName, Context context) {
-        String localeCode = getLocaleCode(context);
-        String name = arrayName+"_"+localeCode;
-        int value = 0;
-        try {
-            Field field = R.array.class.getDeclaredField(name);
-            int id = field.getInt(field);
-            if(id != 0) {
-                value = id;
-            }
-            else {
-                Log.e(TAG,"no field in class R.string with the name "+name);
-            }
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        return value;
-    }
-
-    public static String[] translateArrayToEnglish(Context context, String arrayName, String[] arrayInLocale){
-        if(arrayInLocale != null){
-            //Log.d(TAG, "Trying to translate array to english");
-            String[] allStringsInEN = Locale.getArrayInLocale(arrayName, context, Locale.LOCALE_ENGLISH);
-            String[] allStringsInLocale = Locale.getArrayInLocale(arrayName, context);
-
-            String[] translatedArray = new String[arrayInLocale.length];
-            for(int i = 0; i < arrayInLocale.length; i++){
-                for(int j = 0; j < allStringsInLocale.length; j++){
-                    //Log.d(TAG, "Current actual string = "+arrayInLocale[i]);
-                    //Log.d(TAG, "Current string in english =  "+allStringsInEN[j]);
-                    //Log.d(TAG, "Current string in locale = "+allStringsInLocale[j]);
-                    if(arrayInLocale[i].equals(allStringsInLocale[j])){
-                        translatedArray[i] = allStringsInEN[j];
-                    }
-                }
-            }
-
-            return translatedArray;
-        }
-        return null;
-    }
-
-    public static String[] translateArrayToLocale(Context context, String arrayName, String[] arrayInEN){
-        if(arrayInEN != null){
-            //Log.d(TAG, "Trying to translate array to current locale");
-            String[] allStringsInEN = Locale.getArrayInLocale(arrayName, context, Locale.LOCALE_ENGLISH);
-            String[] allStringsInLocale = Locale.getArrayInLocale(arrayName, context);
-
-            String[] translatedArray = new String[arrayInEN.length];
-            for(int i = 0; i < arrayInEN.length; i++){
-                for(int j = 0; j < allStringsInEN.length; j++){
-                    //Log.d(TAG, "Current actual string = "+arrayInEN[i]);
-                    //Log.d(TAG, "Current string in english =  "+allStringsInEN[j]);
-                    //Log.d(TAG, "Current string in locale = "+allStringsInLocale[j]);
-                    if(arrayInEN[i].equals(allStringsInEN[j])){
-                        translatedArray[i] = allStringsInLocale[j];
-                    }
-                }
-            }
-
-            return translatedArray;
-        }
-        return null;
-    }
-
-    public static String translateStringToEnglish(Context context, String arrayName, String string){
-        if(string != null){
-            String[] allStringsInLocale = Locale.getArrayInLocale(arrayName, context);
-            String[] allStringsInEN = Locale.getArrayInLocale(arrayName, context, LOCALE_ENGLISH);
-
-            for(int i = 0; i < allStringsInLocale.length; i++){
-                if(string.equals(allStringsInLocale[i])){
-                    return allStringsInEN[i];
-                }
-            }
-        }
-        return null;
-    }
-
-    public static String translateStringToLocale(Context context, String arrayName, String string){
-        if(string != null){
-            String[] allStringsInLocale = Locale.getArrayInLocale(arrayName, context);
-            String[] allStringsInEN = Locale.getArrayInLocale(arrayName, context, LOCALE_ENGLISH);
-
-            for(int i = 0; i < allStringsInEN.length; i++){
-                if(string.equals(allStringsInEN[i])){
-                    return allStringsInLocale[i];
-                }
-            }
-        }
-        return null;
-    }
-
-    public static void switchLocale(String newLocaleCode, Context context) {
-        /*SharedPreferences.Editor editor = context.getSharedPreferences(context.getString(R.string.app_name),Context.MODE_PRIVATE).edit();
-        editor.putString(SHARED_PREFERENCES_KEY,newLocaleCode);
-        editor.commit();*/
-        DataHandler.setSharedPreference(context,DataHandler.SP_KEY_LOCALE,newLocaleCode);
-    }
-
-    public static String getLocaleCode(Context context) {
-        /*SharedPreferences sharedPreferences = context.getSharedPreferences(context.getString(R.string.app_name), Context.MODE_PRIVATE);
-        return sharedPreferences.getString(SHARED_PREFERENCES_KEY, LOCALE_ENGLISH);*/
-        return DataHandler.getSharedPreference(context, DataHandler.SP_KEY_LOCALE, LOCALE_ENGLISH);
-    }
-
-    public static String getLocaleCode(Context context, String language){
-        String code = "";
-        if(language.equals(context.getString(R.string.english))) code = LOCALE_ENGLISH;
-        else if(language.equals(context.getString(R.string.swahili))) code = LOCALE_SWAHILI;
-        else if(language.equals(context.getString(R.string.nandi))) code = LOCALE_NANDI;
-        else if(language.equals(context.getString(R.string.kipsigis))) code = LOCALE_KIPSIGIS;
-        else if(language.equals(context.getString(R.string.kikabrasi))) code = LOCALE_KIKABRAS;
-        else if(language.equals(context.getString(R.string.lutsotso))) code = LOCALE_LUTSOTSO;
-
-        return code;
-    }
-
-    public static String getLanguage(Context context, String localeCode){
-        String language = "";
-
-        if(localeCode.equals(LOCALE_ENGLISH)) language = context.getString(R.string.english);
-        if(localeCode.equals(LOCALE_SWAHILI)) language = context.getString(R.string.swahili);
-        if(localeCode.equals(LOCALE_NANDI)) language = context.getString(R.string.nandi);
-        if(localeCode.equals(LOCALE_KIPSIGIS)) language = context.getString(R.string.kipsigis);
-        if(localeCode.equals(LOCALE_KIKABRAS)) language = context.getString(R.string.kikabrasi);
-        if(localeCode.equals(LOCALE_LUTSOTSO)) language = context.getString(R.string.lutsotso);
-
-        return language;
-    }
-
-    public static List<String> getAllLanguages(Context context){
-        List<String> languages = new ArrayList<String>();
-        languages.add(context.getString(R.string.english));
-        languages.add(context.getString(R.string.swahili));
-        languages.add(context.getString(R.string.lutsotso));
-        languages.add(context.getString(R.string.kikabrasi));
-        languages.add(context.getString(R.string.nandi));
-        languages.add(context.getString(R.string.kipsigis));
-
-        return languages;
-    }
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/database/DatabaseHelper.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/database/DatabaseHelper.java
deleted file mode 100644
index 031233c..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/database/DatabaseHelper.java
+++ /dev/null
@@ -1,214 +0,0 @@
-package org.cgiar.ilri.mistro.farmer.backend.database;
-
-import android.content.ContentValues;
-import android.content.Context;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteOpenHelper;
-import android.util.Log;
-
-import java.io.Serializable;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-/**
- * This class handles transactions to the SQLite database
- * Please handle with care and always call methods herein in an asynchronous thread (asynchronous to the UI thread)
- *
- * Created by jrogena on 03/04/14.
- */
-public class DatabaseHelper extends SQLiteOpenHelper implements Serializable{
-
-    public static final String DB_NAME = "ngombe_planner";
-    public static final int DB_VERSION = 13;
-    public static final String TABLE_FARMER = "farmer";
-    public static final String TABLE_COW = "cow";
-    public static final String TABLE_EVENT = "event";
-    public static final String TABLE_CACHED_REQUESTS = "cached_requests";
-    public static final String TABLE_MILK_PRODUCTION = "milk_production";
-    public static final String TABLE_EVENTS_CONSTRAINTS = "events_constraints";
-    public static final String TABLE_EXTENSION_PERSONNEL = "extension_personnel";
-
-    public static final String[] COLUMNS_EXTENSION_PERSONNEL = {"id", "name", "mobile_no", "date_added"};
-
-    private final Map<String, String[]> tableColumns = new HashMap<String, String[]>();
-
-    private static final String TAG = "DatabaseHelper";
-
-    /**
-     * Constructor for the DatabaseHelper class
-     *
-     * @param context   Context e.g activity/service requesting for the data
-     */
-    public DatabaseHelper(Context context){
-        super(context, DB_NAME, null, DB_VERSION);
-        Log.d(TAG, "Database version = "+DB_VERSION);
-
-        tableColumns.put(TABLE_EXTENSION_PERSONNEL, COLUMNS_EXTENSION_PERSONNEL);
-    }
-
-    public String[] getAllColumns(String table){
-        return tableColumns.get(table);
-    }
-
-    /**
-     * This should be called only when the database does not exist or a new version of the database has been defined
-     *
-     * @param db    The writable database
-     */
-    @Override
-    public void onCreate(SQLiteDatabase db) {
-        db.execSQL("CREATE TABLE " + TABLE_FARMER + " (id INTEGER PRIMARY KEY, name TEXT, mobile_no TEXT, location_county TEXT, location_district TEXT, gps_longitude TEXT, gps_latitude TEXT, date_added TEXT, sim_card_sn TEXT);");
-		db.execSQL("CREATE TABLE " + TABLE_COW + " (id INTEGER PRIMARY KEY, farmer_id INTEGER, name TEXT, ear_tag_number TEXT, date_of_birth TEXT, age INTEGER, age_type TEXT, sex TEXT, sire_id INTEGER, dam_id INTEGER, date_added TEXT, service_type TEXT, country_id INTEGER, bull_owner TEXT, owner_name TEXT, milking_status TEXT);");
-        db.execSQL("CREATE TABLE " + TABLE_EVENT + " (id INTEGER PRIMARY KEY, cow_id INTEGER, event_name TEXT, remarks TEXT, event_date TEXT, birth_type TEXT, parent_cow_event INTEGER, bull_id INTEGER, servicing_days INTEGER, cod TEXT, no_of_live_births INTEGER, saved_on_server INTEGER, date_added TEXT)");
-        db.execSQL("CREATE TABLE " + TABLE_CACHED_REQUESTS + " (id INTEGER PRIMARY KEY AUTOINCREMENT, url TEXT, json TEXT)");
-        db.execSQL("CREATE TABLE " + TABLE_MILK_PRODUCTION + " (id INTEGER PRIMARY KEY, cow_id INTEGER, time TEXT, quantity INTEGER, date_added TEXT, date TEXT, quantity_type TEXT)");
-        db.execSQL("CREATE TABLE " + TABLE_EVENTS_CONSTRAINTS + " (id INTEGER PRIMARY KEY, event TEXT, time INTEGER, time_units TEXT)");
-        db.execSQL("CREATE TABLE " + TABLE_EXTENSION_PERSONNEL + " (id INTEGER PRIMARY KEY, name TEXT, mobile_no TEXT, date_added TEXT)");
-        //insert any static data to the db now
-    }
-
-    /**
-     * Called when a new version of the database is detected
-     *      (i.e when the constructor is called with an updated version number)
-     *
-     * @param db    the writable database
-     * @param oldVersion    the old version number for the database
-     * @param newVersion    the new version number for the database
-     */
-    @Override
-    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
-        Log.w(TAG, "About to update the database. All data will be lost");
-        db.execSQL("DROP TABLE IF EXISTS " + TABLE_COW);
-        db.execSQL("DROP TABLE IF EXISTS " + TABLE_FARMER);
-        db.execSQL("DROP TABLE IF EXISTS " + TABLE_EVENT);
-        db.execSQL("DROP TABLE IF EXISTS " + TABLE_CACHED_REQUESTS);
-        db.execSQL("DROP TABLE IF EXISTS " + TABLE_MILK_PRODUCTION);
-        db.execSQL("DROP TABLE IF EXISTS " + TABLE_EVENTS_CONSTRAINTS);
-        db.execSQL("DROP TABLE IF EXISTS " + TABLE_EXTENSION_PERSONNEL);
-
-        //recreate the database
-        onCreate(db);
-    }
-
-    /**
-     * This method is use dto run select queries to the database
-     *
-     * @param db    The readable database
-     * @param table The name of the table where the select query is to be run
-     * @param columns   An array of column names to be fetched in the query
-     * @param selection The selection criteria in the form column=value
-     * @param selectionArgs You may include ?s in selection, which will be replaced by the values from selectionArgs, in order that they appear in the selection. The values will be bound as Strings.
-     * @param groupBy   A filter declaring how to group rows, formatted as an SQL GROUP BY clause (excluding the GROUP BY itself). Passing null will cause the rows to not be grouped.
-     * @param having    A filter declare which row groups to include in the cursor, if row grouping is being used, formatted as an SQL HAVING clause (excluding the HAVING itself). Passing null will cause all row groups to be included, and is required when row grouping is not being used.
-     * @param orderBy   How to order the rows, formatted as an SQL ORDER BY clause (excluding the ORDER BY itself). Passing null will use the default sort order, which may be unordered.
-     * @param limit Limits the number of rows returned by the query, formatted as LIMIT clause. Passing null denotes no LIMIT clause.
-     *
-     * @return  A multidimensional array in the form array[selected_rows][selected_columns]
-     */
-    public String[][] runSelectQuery(SQLiteDatabase db, String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy, String limit) {
-
-        Log.d(TAG, "About to run select query on " + table + " table");
-        Cursor cursor=db.query(table, columns, selection, selectionArgs, groupBy, having, orderBy, limit);
-        if(cursor.getCount()!=-1) {
-            String[][] result=new String[cursor.getCount()][columns.length];
-            Log.d(TAG, "number of rows " + String.valueOf(cursor.getCount()));
-            int c1=0;
-            cursor.moveToFirst();
-            while(c1<cursor.getCount()) {
-                int c2=0;
-                while(c2<columns.length) {
-                    String currResult = cursor.getString(c2);
-                    if(currResult == null || currResult.equals("null"))
-                        currResult = "";//nulls from server not handled well by json. Set 'null' and null to empty string
-
-                    result[c1][c2] = currResult;
-                    c2++;
-                }
-                if(c1!=cursor.getCount()-1) {//is not the last row
-                    cursor.moveToNext();
-                }
-                c1++;
-            }
-            cursor.close();
-
-            return result;
-        }
-        else {
-            return null;
-        }
-    }
-
-    /**
-     * This method deletes rows form a table
-     *
-     * @param db    The writable database
-     * @param table The table from which rows are to be deleted
-     * @param referenceColumn   Column to be used as a reference for the delete
-     * @param columnValues   The values of the reference column. All rows with these values will be deleted
-     */
-    public void runDeleteQuery(SQLiteDatabase db, String table, String referenceColumn, String[] columnValues) {
-        Log.d(TAG, "About to run delete query on "+table+" table");
-
-        db.delete(table, referenceColumn+"=?", columnValues);
-    }
-
-    /**
-     * This method Runs an insert query (duh)
-     *
-     * @param table The table where you want to insert the data
-     * @param columns   An array of the columns to be inserted
-     * @param values    An array of the column values. Should correspond to the array of column names
-     * @param uniqueColumnIndex Index of the unique key (primary key). Set this to -1 if none
-     * @param db    The writable database
-     */
-    public void runInsertQuery(String table,String[] columns,String[] values, int uniqueColumnIndex,SQLiteDatabase db) {
-        Log.d(TAG, "About to run insert query on "+table+" table");
-        if(columns.length==values.length) {
-            ContentValues cv=new ContentValues();
-            int count=0;
-            while(count<columns.length) {
-                cv.put(columns[count], values[count]);
-                count++;
-            }
-
-            //delete row with same unique key
-            if(uniqueColumnIndex != -1){
-                Log.w(TAG, "About to delete any row with "+columns[uniqueColumnIndex]+" = "+values[uniqueColumnIndex]);
-                runDeleteQuery(db, table, columns[uniqueColumnIndex], new String[]{values[uniqueColumnIndex]});
-            }
-
-            db.insert(table, null, cv);
-
-            cv.clear();
-        }
-    }
-
-    /**
-     * This method deletes all data in a table. Please be careful, this method will delete all the data in that table
-     *
-     * @param db    The writable database
-     * @param table The table to truncate
-     */
-    public void runTruncateQuery(SQLiteDatabase db, String table){
-        Log.w(TAG, "About to truncate table "+table);
-        String query = "DELETE FROM "+table;
-        runQuery(db, query);
-    }
-
-    /**
-     * This method runs a generic query in the database.
-     * If you want to run:
-     *      select queries, please use runSelectQuery()
-     *      insert queries, please use runInsertQuery()
-     *      delete queries, please use runDeleteQuery()
-     *
-     * @param db    The readable/writable database to use depending on whether you need to write into the database
-     * @param query The query that you want to run. Please use SQLite friendly queries
-     */
-    public void runQuery(SQLiteDatabase db, String query) {//non return queries
-        Log.d(TAG, "about to run generic query on the database");
-        db.execSQL(query);
-    }
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Cow.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Cow.java
deleted file mode 100644
index 6c537e2..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Cow.java
+++ /dev/null
@@ -1,711 +0,0 @@
-package org.cgiar.ilri.mistro.farmer.carrier;
-
-import android.content.Context;
-import android.os.Parcel;
-import android.os.Parcelable;
-import android.util.Log;
-
-import org.cgiar.ilri.mistro.farmer.backend.DataHandler;
-import org.cgiar.ilri.mistro.farmer.backend.Locale;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.Serializable;
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Date;
-import java.util.List;
-import java.util.jar.JarInputStream;
-
-/**
- * Created by jason on 8/5/13.
- */
-public class Cow implements Parcelable, Serializable {
-    public static final String PARCELABLE_KEY = "thisCow";
-    private static final String DEFAULT_DOB = "0000-00-00 00:00:00";
-    private static final String DOB_FORMAT = "yyyy-MM-dd HH:mm:ss";
-    private static final String OTHER_BREED = "Another Breed";
-    public static final String TAG = "Cow";
-    public static final String SEX_MALE = "Male";
-    public static final String SEX_FEMALE = "Female";
-    public static final String AGE_TYPE_DAY = "Days";
-    public static final String AGE_TYPE_MONTH = "Months";
-    public static final String AGE_TYPE_YEAR = "Years";
-    public static final String MODE_ADULT_COW_REGISTRATION = "adultCowRegistration";
-    public static final String MODE_BORN_CALF_REGISTRATION = "bornCalfRegistration";
-    public static final String SERVICE_TYPE_BULL = "Bull";
-    public static final String SERVICE_TYPE_AI = "AI";
-    public static final String SERVICE_TYPE_ET = "ET";
-
-    public static final String MILKING_S_HEIFER = "heifer";
-    public static final String MILKING_S_ADULT_MILKING = "adult_milking";
-    public static final String MILKING_S_ADULT_NOT_MILKING = "adult_not_milking";
-
-    public static final String COW_IN_CALF = "In calf";
-    public static final String COW_NOT_IN_CALF = "Not in calf";
-
-    private int id;
-    private String name;
-    private String earTagNumber;
-    private String dateOfBirth;
-    private String dateAdded;
-    private int age;
-    private String ageType;
-    private List<String> breeds;
-    private String sex;
-    private List<String> deformities;
-    private Sire sire;
-    private Dam dam;
-    private String countryOfOrigin;
-    private boolean isNotDamOrSire;
-    private String mode;
-    private String serviceType;
-    private String otherDeformity;
-    private String otherBreed;
-    private String piggyBack;
-    private List<Event> events;
-    private List<MilkProduction> milkProduction;
-    private String milkingStatus;
-    private boolean inCalf;
-
-
-    public Cow(boolean isNotDamOrSire) {
-        name = "";
-        earTagNumber = "";
-        dateOfBirth = "";
-        dateAdded = "";
-        age = -1;
-        ageType = "";
-        this.breeds = new ArrayList<String>();
-        sex = "";
-        this.deformities = new ArrayList<String>();
-        this.isNotDamOrSire = isNotDamOrSire;
-        if (isNotDamOrSire)//LOL, brings StackOverflowError if you init sire object inside sire object
-        {
-            sire = new Sire();
-            dam = new Dam();
-        }
-        mode = "";
-        countryOfOrigin = "";
-        serviceType = "";
-        otherDeformity = "";
-        otherBreed = "";
-        piggyBack = "";
-        this.events = new ArrayList<Event>();
-        this.milkProduction = new ArrayList<MilkProduction>();
-        milkingStatus = "";
-        inCalf = false;
-        id = -1;
-    }
-
-    public Cow(Parcel in) {
-        this(true);
-        readFromParcel(in);
-    }
-
-    public Cow(JSONArray allCows, int index){
-        try {
-            JSONObject thisCow = allCows.getJSONObject(index);
-            initFromJSON(thisCow);
-
-            int sireID = (DataHandler.isNull(thisCow.getString("sire_id"))) ? -1 : thisCow.getInt("sire_id");
-            int damID = (DataHandler.isNull(thisCow.getString("dam_id"))) ? -1 : thisCow.getInt("dam_id");
-
-            if(sireID != -1){
-                for(int i = 0; i < allCows.length(); i++){
-                    JSONObject possibleSire = allCows.getJSONObject(i);
-                    if(possibleSire.getInt("id") == sireID){
-                        Sire sire = new Sire();
-                        sire.setName(possibleSire.getString("name"));
-                        sire.setEarTagNumber(possibleSire.getString("ear_tag_number"));
-                        sire.setOwner((DataHandler.isNull(possibleSire.getString("owner_name"))) ? "" : possibleSire.getString("owner_name"));
-                        sire.setOwnerType((DataHandler.isNull(possibleSire.getString("bull_owner"))) ? "" : possibleSire.getString("owner_name"));
-
-                        this.sire = sire;
-                    }
-                }
-            }
-            this.sire.setStrawNumber((DataHandler.isNull(thisCow.getString("straw"))) ? "" : thisCow.getString("straw"));
-
-            if(damID != -1){
-                for(int i = 0; i < allCows.length(); i++){
-                    JSONObject possibleDam = allCows.getJSONObject(i);
-                    if(possibleDam.getInt("id") == damID){
-                        Dam dam = new Dam();
-                        dam.setName(possibleDam.getString("name"));
-                        dam.setEarTagNumber(possibleDam.getString("ear_tag_number"));
-
-                        this.dam = dam;
-                    }
-                }
-            }
-            this.dam.setEmbryoNumber((DataHandler.isNull(thisCow.getString("embryo"))) ? "" : thisCow.getString("embryo"));
-        }
-        catch (Exception e){
-            e.printStackTrace();
-        }
-    }
-
-    public int getId(){
-        return this.id;
-    }
-
-    private void initFromJSON(JSONObject jsonObject){
-        try {
-            id = jsonObject.getInt("id");
-            name = jsonObject.getString("name");
-            earTagNumber = jsonObject.getString("ear_tag_number");
-            dateOfBirth = (DataHandler.isNull(jsonObject.getString("date_of_birth"))) ? "" : jsonObject.getString("date_of_birth");
-            dateAdded = jsonObject.getString("date_added");
-            age = (DataHandler.isNull(jsonObject.getString("age"))) ? -1 : jsonObject.getInt("age");
-            ageType = (DataHandler.isNull(jsonObject.getString("age_type"))) ? "" : jsonObject.getString("age_type");
-
-            JSONArray breedArray = jsonObject.getJSONArray("breed");
-            this.breeds = new ArrayList<String>(breedArray.length());
-            for(int i = 0; i < breedArray.length(); i++){
-                this.breeds.add(breedArray.getString(i));
-            }
-
-            sex = jsonObject.getString("sex");
-
-            JSONArray deformityArray = jsonObject.getJSONArray("deformity");
-            this.deformities = new ArrayList<String>(deformityArray.length());
-            for(int i = 0; i < deformityArray.length(); i++){
-                this.deformities.add(deformityArray.getString(i));
-            }
-            otherDeformity = jsonObject.getString("other_deformity");
-
-            sire = new Sire();
-            dam = new Dam();
-
-            mode = "";
-            countryOfOrigin = jsonObject.getString("country");
-            serviceType = (DataHandler.isNull(jsonObject.getString("service_type"))) ? "" : jsonObject.getString("service_type");
-            otherBreed = "";
-            piggyBack = "";
-            this.events = new ArrayList<Event>();
-            this.milkProduction = new ArrayList<MilkProduction>();
-            if(this.sex.equals(SEX_MALE)){
-                milkingStatus = "";
-                inCalf = false;
-            }
-            else if(this.sex.equals(SEX_FEMALE)){
-                milkingStatus = (DataHandler.isNull(jsonObject.getString("milking_status"))) ? MILKING_S_ADULT_MILKING : jsonObject.getString("milking_status");
-                if(jsonObject.getString("in_calf").equals("1")){
-                    inCalf = true;
-                }
-                else{
-                    inCalf = false;
-                }
-            }
-        }
-        catch (Exception e){
-            e.printStackTrace();
-        }
-    }
-
-    /**
-     * This method returns the milking status of cow in english
-     *
-     * @return Milking status in English or a blank string if unable to
-     *          convert milking status to english text
-     */
-    public String getMilkingStatus() {
-        if(milkingStatus.equals(MILKING_S_HEIFER)){
-            return "Heifer";
-        }
-        else if(milkingStatus.equals(MILKING_S_ADULT_MILKING)){
-            return "Cow being milked";
-        }
-        else if(milkingStatus.equals(MILKING_S_ADULT_NOT_MILKING)){
-            return "Cow not being milked";
-        }
-        return "";
-    }
-
-    /**
-     * This method sets the milking status for the cow
-     *
-     * @param milkingStatus The milking status text (not code) in english
-     * @param context The activity/service you are calling this method from
-     */
-    public void setMilkingStatus(String milkingStatus, Context context) {
-        if(milkingStatus.equals("Heifer")){
-            this.milkingStatus = MILKING_S_HEIFER;
-        }
-        else if(milkingStatus.equals("Cow being milked")){
-            this.milkingStatus = MILKING_S_ADULT_MILKING;
-        }
-        else if(milkingStatus.equals("Cow not being milked")){
-            this.milkingStatus = MILKING_S_ADULT_NOT_MILKING;
-        }
-
-        Log.d(TAG, " ****************** Milking status now is  "+this.milkingStatus);
-    }
-
-    public void setMilkingStatus(String milkingStatus){
-        this.milkingStatus = milkingStatus;
-    }
-
-    /**
-     * This method returns the milking status code for the cow
-     * Compare with Cow.MILKING_S_HEIFER etc
-     *
-     * @return
-     */
-    public String getMilkingStatusCode() {
-        return this.milkingStatus;
-    }
-
-    public boolean isInCalf() {
-        return inCalf;
-    }
-
-    public void setInCalf(boolean inCalf) {
-        this.inCalf = inCalf;
-    }
-
-    public void setMode(String mode) {
-        this.mode = mode;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public void setEarTagNumber(String earTagNumber) {
-        this.earTagNumber = earTagNumber;
-    }
-
-    public void setDateOfBirth(String dateOfBirth) {
-        this.dateOfBirth = dateOfBirth;
-    }
-
-    public void setDateAdded(String dateAdded){
-        this.dateAdded = dateAdded;
-    }
-
-    public String getDateAdded(){
-        return dateAdded;
-    }
-
-    public void setAge(int age) {
-        this.age = age;
-    }
-
-    public void setAgeType(String ageType) {
-        this.ageType = ageType;
-    }
-
-    public void setBreeds(String[] breeds, Context context, boolean commonBreeds) {
-        if(breeds.length == 1){//might mean that there were no breeds
-            if(breeds[0].length() == 0){
-                Log.w(TAG, "Appears like the user did not specify any breed, Setting size of breed array to 0");
-                breeds = new String[0];
-            }
-        }
-
-        Log.d(TAG, "***** size of breeds = "+String.valueOf(breeds.length));
-        //translate breeds to english
-        String[] translatedBreeds  = null;
-        if(commonBreeds){
-            translatedBreeds =  Locale.translateArrayToEnglish(context, "c_breeds_array", breeds);//assuming that the breeds array is a member of c_breeds_array
-        }
-        else{
-            translatedBreeds =  Locale.translateArrayToEnglish(context, "breeds_array", breeds);//assuming that the breeds array is a member of c_breeds_array
-        }
-
-        this.breeds = new ArrayList<String>();
-        for (int i = 0; i < translatedBreeds.length; i++) {
-            this.breeds.add(translatedBreeds[i]);
-        }
-    }
-
-    public void setPiggyBack(String piggyBack) {
-        this.piggyBack = piggyBack;
-    }
-
-    public void setServiceType(String serviceType) {
-        this.serviceType = serviceType;
-    }
-
-    public void setOtherDeformity(String otherDeformity) {
-        this.otherDeformity = otherDeformity;
-        Log.d(TAG, "other deformity set to "+otherDeformity);
-    }
-
-    public void setOtherBreed(Context context, String otherBreed){
-        //translate to english
-        String translatedBreed = Locale.translateStringToEnglish(context, "breeds_array", otherBreed);
-        this.otherBreed = translatedBreed;
-    }
-
-    public String getOtherBreed(Context context){
-        //other breed stored here is in english
-        String translatedBreed = Locale.translateStringToLocale(context, "breeds_array", otherBreed);
-
-        return translatedBreed;
-    }
-
-    public void addBreed(Context context, String breed) {
-        //translate to english
-
-        String translatedString = Locale.translateStringToEnglish(context, "breeds_array", breed);//assuming here that breed is not going to be 'Other breed' string
-        this.breeds.add(translatedString);
-    }
-
-    public void setSex(String sex) {
-        this.sex = sex;
-    }
-
-    public void setDeformities(String[] deformities, Context context) {
-        if(deformities.length == 1){//might mean that there were no breeds
-            if(deformities[0].length() == 0){
-                Log.w(TAG, "Appears like user did not specify any deformity, setting size of deformity array to 0");
-                deformities = new String[0];
-            }
-        }
-
-        //translate to english
-        String[] translatedDeformities = Locale.translateArrayToEnglish(context, "deformities_array", deformities);
-
-        this.deformities = new ArrayList<String>();
-        for (int i = 0; i < translatedDeformities.length; i++) {
-            this.deformities.add(translatedDeformities[i]);
-        }
-    }
-
-    public void addDeformity(Context context, String deformity) {
-        //translate to english
-        String translatedDeformity = Locale.translateStringToEnglish(context, "deformities_array", deformity);
-
-        this.deformities.add(translatedDeformity);
-    }
-
-    public void setSire(Sire sire) {
-        this.sire = sire;
-    }
-
-    public void setDam(Dam dam) {
-        this.dam = dam;
-    }
-
-    public void setCountryOfOrigin(String countryOfOrigin) {
-        this.countryOfOrigin = countryOfOrigin;
-    }
-
-    public void addEvent(Event event){
-        this.events.add(event);
-    }
-
-    public void setEvents(List<Event> events){
-        this.events = events;
-    }
-
-    public void addMilkProduction(MilkProduction milkProduction){
-        this.milkProduction.add(milkProduction);
-    }
-
-    public void setMilkProduction(List<MilkProduction> milkProduction){
-        this.milkProduction = milkProduction;
-    }
-
-    public List<MilkProduction> getMilkProduction(){
-        return this.milkProduction;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public String getMode() {
-        return mode;
-    }
-
-    public String getEarTagNumber() {
-        return earTagNumber;
-    }
-
-    public String getDateOfBirth() {
-        return dateOfBirth;
-    }
-
-    public int getAge() {
-        return age;
-    }
-
-    public String getPiggyBack() {
-        return piggyBack;
-    }
-
-    public String getAgeType() {
-        return ageType;
-    }
-
-    public String getServiceType() {
-        return serviceType;
-    }
-
-    public String getOtherDeformity() {
-        Log.d(TAG,"other deformity is = "+otherDeformity);
-        return otherDeformity;
-    }
-
-    public List<String> getBreeds(Context context) {
-        //breeds stored in this object are in english, translate them to current locale
-        String[] stringArray = Locale.translateArrayToLocale(context, "c_breeds_array", breeds.toArray(new String[breeds.size()]));
-
-        List<String> translatedBreeds = new ArrayList<String>(Arrays.asList(stringArray));
-
-        return translatedBreeds;
-    }
-
-    public String getSex() {
-        return sex;
-    }
-
-    public List<String> getDeformities(Context context) {
-        //deformities are in english. translate them to current locale
-        String[] deformitiesInLocale = Locale.translateArrayToLocale(context, "deformities_array", deformities.toArray(new String[deformities.size()]));//TODO: not sure that will work
-
-        List<String> translatedDeformities = new ArrayList<String>(Arrays.asList(deformitiesInLocale));
-
-        return translatedDeformities;
-    }
-
-    public Sire getSire() {
-        return sire;//TODO: handle nullpointerexception
-    }
-
-    public Dam getDam() {
-        if (dam == null) {
-            Log.d(TAG, "dam is null");
-        }
-        return dam;
-    }
-
-    public String getCountryOfOrigin() {
-        return countryOfOrigin;
-    }
-
-    public List<Event> getEvents(){
-        return this.events;
-    }
-
-    public long getAgeMilliseconds(){
-        SimpleDateFormat dateFormat = new SimpleDateFormat(DOB_FORMAT);
-
-        long ageFromDOB = 0l;
-        if(!dateOfBirth.equals(DEFAULT_DOB)){
-            try {
-
-                Date dob=dateFormat.parse(this.dateOfBirth);
-                long dobMilliseconds = dob.getTime();
-
-                Date today = new Date();
-                ageFromDOB = today.getTime() - dobMilliseconds;
-            }
-            catch (ParseException e) {
-                e.printStackTrace();
-            }
-        }
-
-        long ageFromAge = 0l;
-        long ageUnits = 0l;
-        if(ageType.equals(AGE_TYPE_DAY)) ageUnits = 86400000l;
-        else if(ageType.equals(AGE_TYPE_MONTH)) ageUnits = 86400000l * 30;
-        else if(ageType.equals(AGE_TYPE_YEAR)) ageUnits = 86400000l * 365;
-
-        ageFromAge = ageUnits * this.age;
-        try {
-            Date dateAdded = dateFormat.parse(this.dateAdded);
-            long dateAddedMill = dateAdded.getTime();
-
-            Date today = new Date();
-
-            ageFromAge = ageFromAge + (today.getTime() - dateAddedMill);
-        }
-        catch (ParseException e) {
-            e.printStackTrace();
-        }
-
-
-
-        if(ageFromAge>ageFromDOB) {
-            Log.d(TAG, "We might want to use the cows age instead of date of birth");
-            Log.d(TAG, "Cows age "+this.ageType+" = "+String.valueOf(this.age));
-            Log.d(TAG, "Cows date of birth = "+this.dateOfBirth);
-            Log.d(TAG, "Age in milliseconds = "+String.valueOf(ageFromAge));
-            Log.d(TAG, "Alternate age = "+String.valueOf(ageFromDOB));
-            return ageFromAge;
-        }
-        else {
-            Log.d(TAG, "We might want to use the cows date of birth instead of age");
-            Log.d(TAG, "Cows age "+this.ageType+" = "+String.valueOf(this.age));
-            Log.d(TAG, "Cows date of birth = "+this.dateOfBirth);
-            Log.d(TAG, "Age in milliseconds = "+String.valueOf(ageFromDOB));
-            Log.d(TAG, "Alternate age = "+String.valueOf(ageFromAge));
-            return ageFromDOB;
-        }
-    }
-
-    public MilkProduction getLastMilking(String milkingTime){
-        MilkProduction lastMP = new MilkProduction();
-
-        long latestTime = 0;
-        int latestMPIndex = -1;
-        for(int i = 0; i < milkProduction.size(); i++){
-            MilkProduction currMP = milkProduction.get(i);
-            if(currMP.getTime().equals(milkingTime) && currMP.getDateMilliseconds() > latestTime){
-                latestTime = currMP.getDateMilliseconds();
-                latestMPIndex = i;
-            }
-        }
-
-        if(latestMPIndex != -1){
-            lastMP = milkProduction.get(latestMPIndex);
-        }
-
-        return lastMP;
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags) {
-        dest.writeInt(id);
-        dest.writeString(name);
-        dest.writeString(earTagNumber);
-        dest.writeString(dateOfBirth);
-        dest.writeInt(age);
-        dest.writeString(ageType);
-        dest.writeStringList(breeds);
-        dest.writeString(sex);
-        dest.writeStringList(deformities);
-        if (isNotDamOrSire) {
-            dest.writeInt(1);
-            dest.writeSerializable(sire);
-            dest.writeSerializable(dam);
-        } else {
-            dest.writeInt(0);
-        }
-
-        dest.writeString(countryOfOrigin);
-        dest.writeString(mode);
-        dest.writeString(serviceType);
-        dest.writeString(otherDeformity);
-        dest.writeString(otherBreed);
-        dest.writeString(piggyBack);
-        dest.writeString(milkingStatus);
-        if(isInCalf()){
-            dest.writeInt(1);
-        }
-        else{
-            dest.writeInt(0);
-        }
-    }
-
-    public void readFromParcel(Parcel in) {
-        id = in.readInt();
-        name = in.readString();
-        earTagNumber = in.readString();
-        dateOfBirth = in.readString();
-        age = in.readInt();
-        ageType = in.readString();
-        in.readStringList(breeds);
-        sex = in.readString();
-        in.readStringList(deformities);
-        int x = in.readInt();
-        if (x == 1)//isnotsireordam
-        {
-            this.isNotDamOrSire = true;
-            sire = (Sire) in.readSerializable();
-            dam = (Dam) in.readSerializable();
-        } else {
-            this.isNotDamOrSire = false;
-        }
-
-        countryOfOrigin = in.readString();
-        mode = in.readString();
-        serviceType = in.readString();
-        otherDeformity = in.readString();
-        otherBreed = in.readString();
-        piggyBack = in.readString();
-        milkingStatus = in.readString();
-        int inCalf = in.readInt();
-        if(inCalf == 1){
-            this.inCalf = true;
-        }
-        else{
-            this.inCalf = false;
-        }
-    }
-
-    public static final Creator<Cow> CREATOR = new Creator<Cow>() {
-        @Override
-        public Cow createFromParcel(Parcel source) {
-            return new Cow(source);
-        }
-
-        @Override
-        public Cow[] newArray(int size) {
-            return new Cow[size];
-        }
-    };
-
-    public JSONObject getJsonObject() {
-        JSONObject jsonObject = new JSONObject();
-        try {
-            jsonObject.put("id", id);
-            jsonObject.put("name", ((name == null) ? "" : name));
-            jsonObject.put("earTagNumber", ((earTagNumber == null) ? "" : earTagNumber));
-            jsonObject.put("dateOfBirth", ((dateOfBirth == null) ? "" : dateOfBirth));
-            jsonObject.put("age", age);
-            jsonObject.put("ageType", ageType);
-            JSONArray breedJsonArray = new JSONArray();
-            for (int i = 0; i < breeds.size(); i++) {
-                if(breeds.get(i).equals(OTHER_BREED)){
-                    breedJsonArray.put(i, otherBreed);//replace the value of 'other breed' with actual breed
-                }
-                else {
-                    breedJsonArray.put(i, breeds.get(i));
-                }
-            }
-
-            jsonObject.put("breeds", breedJsonArray);
-            jsonObject.put("sex", sex);
-            JSONArray deformityJsonArray = new JSONArray();
-            for (int i = 0; i < deformities.size(); i++) {
-                deformityJsonArray.put(i, deformities.get(i));
-            }
-            jsonObject.put("deformities", deformityJsonArray);
-            jsonObject.put("mode", ((mode == null) ? "" : mode));
-            jsonObject.put("serviceType", ((serviceType == null) ? "" : serviceType));
-            jsonObject.put("otherDeformity", ((otherDeformity == null) ? "" : otherDeformity));
-            jsonObject.put("countryOfOrigin", ((countryOfOrigin == null) ? "" : countryOfOrigin));
-            if (isNotDamOrSire) {
-                jsonObject.put("type", "cow");
-                jsonObject.put("sire", ((sire == null) ? "" : sire.getJsonObject()));
-                jsonObject.put("dam", ((dam == null) ? "" : dam.getJsonObject()));
-            }
-            if(piggyBack!=null && piggyBack.length()>0) {
-                jsonObject.put("piggyBack",piggyBack);
-            }
-            int inCalf = 0;
-            if(this.inCalf){
-                inCalf = 1;
-            }
-            jsonObject.put("inCalf", inCalf);
-            jsonObject.put("milkingStatus", milkingStatus);
-        } catch (JSONException e) {
-            e.printStackTrace();
-        }
-        return jsonObject;
-    }
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Dam.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Dam.java
deleted file mode 100644
index 65f18ec..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Dam.java
+++ /dev/null
@@ -1,84 +0,0 @@
-package org.cgiar.ilri.mistro.farmer.carrier;
-
-import android.os.Parcel;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.Serializable;
-
-/**
- * Created by jason on 8/5/13.
- */
-public class Dam extends Cow implements Serializable
-{
-    private String embryoNumber;
-
-    public Dam()
-    {
-        super(false);
-        setSex(SEX_FEMALE);
-        embryoNumber="";
-    }
-
-    public Dam(Parcel source)
-    {
-        this();
-        readFromParcel(source);
-    }
-
-    public void setEmbryoNumber(String embryoNumber)
-    {
-        this.embryoNumber = embryoNumber;
-    }
-
-    public String getEmbryoNumber() {
-        return embryoNumber;
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags)
-    {
-        super.writeToParcel(dest, flags);
-        dest.writeString(embryoNumber);
-    }
-
-
-    @Override
-    public void readFromParcel(Parcel in)
-    {
-        super.readFromParcel(in);
-        embryoNumber=in.readString();
-    }
-
-    public static final Creator<Dam> CREATOR = new Creator<Dam>()
-    {
-        @Override
-        public Dam createFromParcel(Parcel source)
-        {
-            return new Dam(source);
-        }
-
-        @Override
-        public Dam[] newArray(int size)
-        {
-            return new Dam[size];
-        }
-    };
-
-    @Override
-    public JSONObject getJsonObject()
-    {
-        JSONObject jsonObject=super.getJsonObject();
-        try
-        {
-            jsonObject.put("type","dam");
-            jsonObject.put("embryoNumber",((embryoNumber==null) ? "":embryoNumber));
-        }
-        catch (JSONException e)
-        {
-            e.printStackTrace();
-        }
-        return jsonObject;
-    }
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Event.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Event.java
deleted file mode 100644
index 86779d7..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Event.java
+++ /dev/null
@@ -1,151 +0,0 @@
-package org.cgiar.ilri.mistro.farmer.carrier;
-
-import android.util.Log;
-
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-
-/**
- * Created by jrogena on 09/04/14.
- */
-public class Event {
-    private static final String TAG = "Event";
-    private static final String DATE_FORMAT = "YYYY-MM-dd HH:mm:ss";
-    private int id;
-    private String eventDate;
-    private String birthType;
-    private int parentCowEventID;
-    private int bullID;
-    private int servicingDays;
-    private String cod;
-    private int noOfLiveBirths;
-    private String type;
-    private String remarks;
-    private boolean savedOnServer;
-    private String dateAdded;
-
-    public Event(){
-
-    }
-
-    public int getId() {
-        return id;
-    }
-
-    public void setId(int id) {
-        this.id = id;
-    }
-
-    public String getType(){
-        return this.type;
-    }
-
-    public void setType(String type){
-        this.type = type;
-    }
-
-    public String getRemarks(){
-        return this.remarks;
-    }
-
-    public void setRemarks(String remarks){
-        this.remarks = remarks;
-    }
-
-    public String getEventDate() {
-        return eventDate;
-    }
-
-    public void setDateAdded(String dateAdded){
-        this.dateAdded = dateAdded;
-    }
-
-    public String getDateAdded(){
-        return  dateAdded;
-    }
-
-    public long getDateAddedMillisecods(){
-        SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT);
-
-        long result = 0;
-
-        try {
-            Date dateAdded = dateFormat.parse(this.dateAdded);
-            result = dateAdded.getTime();
-        } catch (ParseException e) {
-            e.printStackTrace();
-        }
-
-        Log.d(TAG, "Event date added in milliseconds = "+String.valueOf(result));
-
-        return result;
-    }
-
-    public void setEventDate(String eventDate) {
-        this.eventDate = eventDate;
-    }
-
-    public String getBirthType() {
-        return birthType;
-    }
-
-    public void setBirthType(String birthType) {
-        this.birthType = birthType;
-    }
-
-    public int getParentCowEventID() {
-        return parentCowEventID;
-    }
-
-    public void setParentCowEventID(int parentCowEventID) {
-        this.parentCowEventID = parentCowEventID;
-    }
-
-    public int getBullID() {
-        return bullID;
-    }
-
-    public void setBullID(int bullID) {
-        this.bullID = bullID;
-    }
-
-    public int getServicingDays() {
-        return servicingDays;
-    }
-
-    public void setServicingDays(int servicingDays) {
-        this.servicingDays = servicingDays;
-    }
-
-    public boolean isServicingEvent(){
-        if(type.equals("Artificial Insemination") || type.equals("Bull Servicing")){
-            return true;
-        }
-        return false;
-    }
-
-    public void setSavedOnServer(boolean savedOnServer){
-        this.savedOnServer = savedOnServer;
-    }
-
-    public boolean getSavedOnServer(){
-        return savedOnServer;
-    }
-
-    public String getCod() {
-        return cod;
-    }
-
-    public void setCod(String cod) {
-        this.cod = cod;
-    }
-
-    public int getNoOfLiveBirths() {
-        return noOfLiveBirths;
-    }
-
-    public void setNoOfLiveBirths(int noOfLiveBirths) {
-        this.noOfLiveBirths = noOfLiveBirths;
-    }
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/EventConstraint.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/EventConstraint.java
deleted file mode 100644
index ea262c4..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/EventConstraint.java
+++ /dev/null
@@ -1,90 +0,0 @@
-package org.cgiar.ilri.mistro.farmer.carrier;
-
-import android.util.Log;
-
-import java.util.Date;
-
-/**
- * Created by jrogena on 21/05/14.
- */
-public class EventConstraint {
-    private final String TAG = "EventConstraint";
-    private final String UNIT_DAY = "Days";
-    private final String UNIT_MONTH = "Months";
-    private final String UNIT_YEAR = "Years";
-
-    public static final String CONSTRAINT_MATURITY = "Maturity";
-    public static final String CONSTRAINT_BIRTH_TO_LACTATION = "MaxTimeBirthLactation";
-    public static final String CONSTRAINT_MILKING = "Milking";
-    public static final String CONSTRAINT_CALVING = "Calving";
-    public static final String CONSTRAINT_MILK_FLACTUATION = "DeltaMilk";
-    public static final String CONSTRAINT_MILK_MAX_SITTING = "MaxMilkSitting";
-    public static final String CONSTRAINT_MILK_MAX_COMBINED = "MaxMilkCombined";
-
-    private int id;
-    private String event;
-    private int time;
-    private String timeUnits;
-
-    public EventConstraint(int id, String event, int time, String timeUnits) {
-        this.id = id;
-        this.event = event;
-        this.time = time;
-        this.timeUnits = timeUnits;
-    }
-
-    public int getId() {
-        return id;
-    }
-
-    public void setId(int id) {
-        this.id = id;
-    }
-
-    public String getEvent() {
-        return event;
-    }
-
-    public void setEvent(String event) {
-        this.event = event;
-    }
-
-    public int getTime() {
-        return time;
-    }
-
-    public void setTime(int time) {
-        this.time = time;
-    }
-
-    public String getTimeUnits() {
-        return timeUnits;
-    }
-
-    public void setTimeUnits(String timeUnits) {
-        this.timeUnits = timeUnits;
-    }
-
-    public long getTimeMilliseconds(){
-        long result = 0l;
-
-        long timeUnits = 0l;
-        if(this.timeUnits.equals(UNIT_DAY)) timeUnits = 86400000l;
-        else if(this.timeUnits.equals(UNIT_MONTH)) timeUnits = 86400000l * 30;//get number of milliseconds in a month
-        else if(this.timeUnits.equals(UNIT_YEAR)) timeUnits = 86400000l * 365;//get number of milliseconds in a year
-
-        result = timeUnits * this.time;
-
-        Log.d(TAG, "Event constraint Time milliseconds = "+String.valueOf(result));
-
-        return result;
-    }
-
-    public int getValue(){
-        return this.time;
-    }
-
-    public String getUnits(){
-        return this.timeUnits;
-    }
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Farmer.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Farmer.java
deleted file mode 100644
index c623dac..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Farmer.java
+++ /dev/null
@@ -1,351 +0,0 @@
-package org.cgiar.ilri.mistro.farmer.carrier;
-
-import android.os.Parcel;
-import android.os.Parcelable;
-import android.util.Log;
-
-import org.cgiar.ilri.mistro.farmer.backend.DataHandler;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Created by jason on 8/5/13.
- */
-public class Farmer implements Parcelable, Serializable
-{
-    public static final String TAG="Farmer";
-    public static final String PARCELABLE_KEY="farmer";
-    public static final String MODE_INITIAL_REGISTRATION = "initialRegistration";
-    public static final String MODE_NEW_COW_REGISTRATION = "newCowRegistration";
-    public static final String MODE_EDIT_FARMER = "editFarmer";
-    public static final String MODE_EDIT_COW = "editCow";
-    private int id;
-    private String fullName;
-    private String extensionPersonnel;
-    private String mobileNumber;
-    private List<Cow> cows;
-    private String longitude;
-    private String latitude;
-    private String simCardSN;
-    private String mode;
-    private String preferredLocale;
-    private boolean isInFarm;
-    private String site;
-    private boolean isActive;
-
-    public Farmer()
-    {
-        fullName="";
-        extensionPersonnel="";
-        mobileNumber="";
-        this.cows=new ArrayList<Cow>();
-        longitude="";
-        latitude="";
-        simCardSN ="";
-        mode = "";
-        preferredLocale = "";
-        isInFarm = false;
-        id = -1;
-        site = "";
-        isActive = true;
-    }
-
-    public Farmer(Parcel source)
-    {
-        this();
-        readFromParcel(source);
-    }
-
-    public Farmer(JSONObject farmerJsonObject){
-        try{
-            //Log.d(TAG, "Json for this farmer = "+farmerJsonObject.toString());
-            id = farmerJsonObject.getInt("id");
-            fullName = farmerJsonObject.getString("name");
-            this.extensionPersonnel = (DataHandler.isNull(farmerJsonObject.getString("extension_personnel"))) ? "" : farmerJsonObject.getString("extension_personnel");
-            mobileNumber = farmerJsonObject.getString("mobile_no");
-            longitude = farmerJsonObject.getString("gps_longitude");
-            latitude = farmerJsonObject.getString("gps_latitude");
-            simCardSN = farmerJsonObject.getString("sim_card_sn");
-            preferredLocale = farmerJsonObject.getString("pref_locale");
-            site = (DataHandler.isNull(farmerJsonObject.getString("location_district"))) ? "" : farmerJsonObject.getString("location_district");
-            if(farmerJsonObject.getInt("is_active") == 1){
-                isActive = true;
-            }
-            else{
-                isActive = false;
-            }
-            isInFarm = false;
-        }
-        catch (Exception e){
-            e.printStackTrace();
-        }
-    }
-
-    public int getId(){
-        return id;
-    }
-
-    public void setCows(JSONArray cowArray){
-        cows = new ArrayList<Cow>(cowArray.length());
-        for(int i = 0; i < cowArray.length(); i++){
-            Cow currCow = new Cow(cowArray, i);
-            cows.add(currCow);
-        }
-    }
-
-    public void setFullName(String fullName)
-    {
-        this.fullName = fullName;
-    }
-
-    public void setMode(String mode) {
-        this.mode = mode;
-    }
-
-    public void setExtensionPersonnel(String extensionPersonnel)
-    {
-        this.extensionPersonnel = extensionPersonnel;
-    }
-
-    public void setMobileNumber(String mobileNumber)
-    {
-        this.mobileNumber = mobileNumber;
-    }
-
-    public int getCowNumber()
-    {
-        return cows.size();
-    }
-
-    public String getMode() {
-        return this.mode;
-    }
-
-    /**
-     * This methods inits the number of cows the farmer has.
-     * Be warned that calling this function when this farmer object
-     * already has cows will invalidate the previous cows.
-     *
-     * @param number    The number of cows
-     */
-    public void setCowNumber(int number)
-    {
-        this.cows=new ArrayList<Cow>();
-        for (int i=0;i<number;i++)
-        {
-            cows.add(new Cow(true));
-        }
-    }
-
-    public void setCows(List<Cow> cows)
-    {
-        this.cows = cows;
-    }
-    public void setCow(Cow cow, int index)
-    {
-        if(index<cows.size())
-        {
-            cows.set(index,cow);
-        }
-        else
-        {
-            Log.e(TAG,"Trying to add cow in index greater than size of Cow list");
-        }
-    }
-
-    public String getPreferredLocale() {
-        return preferredLocale;
-    }
-
-    public void setPreferredLocale(String preferredLocale) {
-        this.preferredLocale = preferredLocale;
-    }
-
-    public void addCow(Cow cow)
-    {
-        this.cows.add(cow);
-    }
-
-    public void setLongitude(String longitude)
-    {
-        this.longitude = longitude;
-    }
-
-    public void setLatitude(String latitude)
-    {
-        this.latitude = latitude;
-    }
-
-    public void setSimCardSN(String simCardSN)
-    {
-        this.simCardSN = simCardSN;
-    }
-
-    public String getFullName() {
-        return fullName;
-    }
-
-    public String getExtensionPersonnel() {
-        return extensionPersonnel;
-    }
-
-    public String getMobileNumber() {
-        return mobileNumber;
-    }
-
-    public List<Cow> getCows() {
-        return cows;
-    }
-
-    public boolean isInFarm(){
-        return isInFarm;
-    }
-
-    public String getSite() {
-        return site;
-    }
-
-    public void setSite(String site) {
-        this.site = site;
-    }
-
-    public boolean isActive() {
-        return isActive;
-    }
-
-    public void setActive(boolean isActive) {
-        this.isActive = isActive;
-    }
-
-    public List<Cow> getCows(String sex){
-        List<Cow> newCowList = new ArrayList<Cow>();
-
-        //get all cows with the specific sex
-        for(int i = 0; i < cows.size(); i++){
-            if(cows.get(i).getSex().equals(sex))
-                newCowList.add(cows.get(i));
-        }
-        return newCowList;
-    }
-
-    public Cow getCow(int index)
-    {
-        if(index<cows.size())
-            return cows.get(index);
-        else
-            return null;
-    }
-
-    public String getLongitude() {
-        return longitude;
-    }
-
-    public String getLatitude() {
-        return latitude;
-    }
-
-    public String getSimCardSN()
-    {
-        return simCardSN;
-    }
-
-    @Override
-    public int describeContents()
-    {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags)
-    {
-        dest.writeInt(id);
-        dest.writeString(fullName);
-        dest.writeString(extensionPersonnel);
-        dest.writeString(mobileNumber);
-        dest.writeTypedList(cows);
-        dest.writeString(longitude);
-        dest.writeString(latitude);
-        dest.writeString(simCardSN);
-        dest.writeString(mode);
-        if(isInFarm) dest.writeInt(1);
-        else dest.writeInt(0);
-        dest.writeString(preferredLocale);
-        dest.writeString(site);
-        if(isActive) dest.writeInt(1);
-        else dest.writeInt(0);
-    }
-
-    public void readFromParcel(Parcel in)
-    {
-        this.id = in.readInt();
-        this.fullName=in.readString();
-        this.extensionPersonnel=in.readString();
-        this.mobileNumber=in.readString();
-        in.readTypedList(cows,Cow.CREATOR);
-        this.longitude=in.readString();
-        this.latitude=in.readString();
-        this.simCardSN =in.readString();
-        this.mode = in.readString();
-
-        int isInFarm = in.readInt();
-        if(isInFarm == 1) this.isInFarm = true;
-        else this.isInFarm = false;
-        this.preferredLocale = in.readString();
-        this.site = in.readString();
-        int isActive = in.readInt();
-        if(isActive == 1 ) this.isActive = true;
-        else this.isActive = false;
-    }
-
-    public static final Creator<Farmer> CREATOR=new Creator<Farmer>()
-    {
-        @Override
-        public Farmer createFromParcel(Parcel source)
-        {
-            return new Farmer(source);
-        }
-
-        @Override
-        public Farmer[] newArray(int size)
-        {
-            return new Farmer[size];
-        }
-    };
-
-    public JSONObject getJsonObject()
-    {
-        JSONObject jsonObject=new JSONObject();
-        try
-        {
-            jsonObject.put("id", id);
-            jsonObject.put("fullName",((fullName==null) ? "":fullName));
-            jsonObject.put("extensionPersonnel",((extensionPersonnel==null) ? "":extensionPersonnel));
-            jsonObject.put("mobileNumber",((mobileNumber==null) ? "":mobileNumber));
-            JSONArray cowsJsonArray=new JSONArray();
-            for (int i=0;i<cows.size();i++)
-            {
-                cowsJsonArray.put(i,cows.get(i).getJsonObject());
-            }
-            jsonObject.put("cows",cowsJsonArray);
-            jsonObject.put("longitude",((longitude==null) ? "":longitude));
-            jsonObject.put("latitude",((latitude==null) ? "":latitude));
-            jsonObject.put("simCardSN",((simCardSN ==null) ? "": simCardSN));
-            jsonObject.put("mode",((mode ==null) ? "": mode));
-            jsonObject.put("preferredLocale", preferredLocale);
-            jsonObject.put("site", site);
-            int isActive = 1;
-            if(this.isActive == false) isActive = 0;
-            jsonObject.put("isActive", isActive);
-        }
-        catch (JSONException e)
-        {
-            e.printStackTrace();
-        }
-        return  jsonObject;
-    }
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/MilkProduction.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/MilkProduction.java
deleted file mode 100644
index c303aae..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/MilkProduction.java
+++ /dev/null
@@ -1,95 +0,0 @@
-package org.cgiar.ilri.mistro.farmer.carrier;
-
-import java.text.SimpleDateFormat;
-
-/**
- * Created by jason on 4/28/14.
- */
-public class MilkProduction {
-    private static final String TAG = "MilkProduction";
-    public static final String TIME_MORNING = "Morning";
-    public static final String TIME_AFTERNOON = "Afternoon";
-    public static final String TIME_EVENING = "Evening";
-    public static final String TIME_COMBINED = "Combined";
-    public static final String QUANTITY_TYPE_LITRES = "Litres";
-    public static final String QUANTITY_TYPE_KGS = "KGs";
-    private static final String DATE_FORMAT = "yyyy-MM-dd";
-    private int id;
-    private String time;
-    private float quantity;
-    private String dateAdded;
-    private String date;
-    private String quantityType;
-
-
-    public MilkProduction(){
-        id = -1;
-        time = "";
-        quantity = -1;
-        dateAdded = "";
-        date = "";
-        quantityType = "";
-    }
-
-    public int getId() {
-        return id;
-    }
-
-    public void setId(int id) {
-        this.id = id;
-    }
-
-    public String getTime() {
-        return time;
-    }
-
-    public void setTime(String time) {
-        this.time = time;
-    }
-
-    public float getQuantity() {
-        return quantity;
-    }
-
-    public void setQuantity(float quantity) {
-        this.quantity = quantity;
-    }
-
-    public String getDateAdded() {
-        return dateAdded;
-    }
-
-    public void setDateAdded(String dateAdded) {
-        this.dateAdded = dateAdded;
-    }
-
-    public String getDate() {
-        return date;
-    }
-
-    public void setDate(String date) {
-        this.date = date;
-    }
-
-    public long getDateMilliseconds(){
-        long result = 0;
-
-        try{
-            SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT);
-            result = dateFormat.parse(this.date).getTime();
-        }
-        catch (Exception e){
-            e.printStackTrace();
-        }
-
-        return result;
-    }
-
-    public String getQuantityType() {
-        return quantityType;
-    }
-
-    public void setQuantityType(String quantityType) {
-        this.quantityType = quantityType;
-    }
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Sire.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Sire.java
deleted file mode 100644
index d5aa4c2..0000000
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Sire.java
+++ /dev/null
@@ -1,109 +0,0 @@
-package org.cgiar.ilri.mistro.farmer.carrier;
-
-import android.os.Parcel;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.Serializable;
-
-/**
- * Created by jason on 8/5/13.
- */
-public class Sire extends Cow implements Serializable
-{
-    public static final String SIRE_OWNER_OWN_BULL = "";
-    private String strawNumber;
-    private String owner;
-    private String ownerType;
-
-    public Sire()
-    {
-        super(false);
-        setSex(SEX_MALE);
-        strawNumber="";
-        owner = "";
-        ownerType = "";
-    }
-
-    public Sire(Parcel source) {
-        this();
-        readFromParcel(source);
-    }
-
-    public void setStrawNumber(String strawNumber)
-    {
-        this.strawNumber = strawNumber;
-    }
-
-    public String getStrawNumber() {
-        return strawNumber;
-    }
-
-    public void setOwner(String owner){
-        this.owner = owner;
-    }
-
-    public String getOwner(){
-        return this.owner;
-    }
-
-    public String getOwnerType() {
-        return ownerType;
-    }
-
-    public void setOwnerType(String ownerType) {
-        this.ownerType = ownerType;
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags)
-    {
-        super.writeToParcel(dest, flags);
-        dest.writeString(strawNumber);
-        dest.writeString(owner);
-        dest.writeString(ownerType);
-    }
-
-    @Override
-    public void readFromParcel(Parcel in)
-    {
-        super.readFromParcel(in);
-        strawNumber=in.readString();
-        owner=in.readString();
-        ownerType=in.readString();
-    }
-
-    public static final Creator<Sire> CREATOR=new Creator<Sire>()
-    {
-        @Override
-        public Sire createFromParcel(Parcel source)
-        {
-            return new Sire(source);
-        }
-
-        @Override
-        public Sire[] newArray(int size)
-        {
-            return new Sire[size];
-        }
-    };
-
-    @Override
-    public JSONObject getJsonObject()
-    {
-        JSONObject jsonObject=super.getJsonObject();
-        try
-        {
-            jsonObject.put("type","sire");
-            jsonObject.put("strawNumber",((strawNumber==null) ? "":strawNumber));
-            jsonObject.put("owner", owner);
-            jsonObject.put("ownerType", ownerType);
-        }
-        catch (JSONException e)
-        {
-            e.printStackTrace();
-        }
-        return jsonObject;
-    }
-}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/AddEventActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/AddEventActivity.java
new file mode 100644
index 0000000..5395fc3
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/AddEventActivity.java
@@ -0,0 +1,1110 @@
+package org.cgiar.ilri.np.farmer;
+
+import android.app.AlertDialog;
+import android.app.DatePickerDialog;
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.telephony.TelephonyManager;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.AutoCompleteTextView;
+import android.widget.Button;
+import android.widget.DatePicker;
+import android.widget.EditText;
+import android.widget.Spinner;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.actionbarsherlock.app.SherlockActivity;
+import com.actionbarsherlock.view.Menu;
+import com.actionbarsherlock.view.MenuInflater;
+import com.actionbarsherlock.view.MenuItem;
+
+import org.cgiar.ilri.np.farmer.backend.DataHandler;
+import org.cgiar.ilri.np.farmer.backend.Locale;
+import org.cgiar.ilri.np.farmer.carrier.Cow;
+import org.cgiar.ilri.np.farmer.carrier.Dam;
+import org.cgiar.ilri.np.farmer.carrier.Event;
+import org.cgiar.ilri.np.farmer.carrier.EventConstraint;
+import org.cgiar.ilri.np.farmer.carrier.Farmer;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+import java.util.List;
+
+public class AddEventActivity extends SherlockActivity implements NPActivity, View.OnClickListener,View.OnFocusChangeListener,DatePickerDialog.OnDateSetListener, Spinner.OnItemSelectedListener
+{
+    private Boolean cacheData;
+
+    public  final String TAG="AddEventActivity";
+    private final String dateFormat="dd/MM/yyyy";
+
+    public static final String KEY_MODE="mode";
+    public static final String MODE_SERVICING="Servicing";
+    public static final String MODE_CALVING="Birth";
+    public static final String KEY_SERVICING_TYPE="servicingType";
+
+    private EditText phantomET;
+    private Menu menu;
+    private TextView cowIdentifierTV;
+    private Spinner cowIdentifierS;
+    private TextView dateTV;
+    private EditText dateET;
+    private TextView eventTypeTV;
+    private Spinner eventTypeS;
+    private TextView eventSubtypeTV;
+    private Spinner eventSubtypeS;
+    private TextView remarksTV;
+    private EditText remarksET;
+    private Button okayB;
+    private Button cancelB;
+    private DatePickerDialog datePickerDialog;
+    private TextView strawNumberTV;
+    private EditText strawNumberET;
+    private TextView vetUsedTV;
+    private EditText vetUsedET;
+    private TextView bullNameTV;
+    private AutoCompleteTextView bullNameACTV;
+    private TextView bullOwnerTV;
+    private Spinner bullOwnerS;
+    private TextView specBullOwnerTV;
+    private EditText specBullOwnerET;
+
+    /*private TextView bullETNTV;
+    private AutoCompleteTextView bullETNACTV;*/
+    private TextView noOfServicingDaysTV;
+    private EditText noOfServicingDaysET;
+    private TextView servicingTV;
+    private Spinner servicingS;
+    private TextView causeOfDeathTV;
+    private Spinner causeOfDeathS;
+    /*private TextView liveBirthsTV;
+    private EditText liveBirthsET;*/
+
+    private String[] cowNameArray;
+    private String[] cowEarTagNumberArray;
+    private String[] cowSexArray;
+    private String enterDate;
+    private String dateInFuture;
+    private String eventRecorded;
+    private String sendUnsuccessfulWarning;
+    private String loadingPleaseWait;
+    private List<Integer> servicingIDs;
+    private List<String> servicingTypes;
+    private List<EventConstraint> eventConstraints;
+    private Farmer farmer;
+
+    private String presetMode;
+    private String presetServicingType;
+    @Override
+    protected void onCreate(Bundle savedInstanceState)
+    {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_add_event);
+        //DataHandler.requestPermissionToUseSMS(this);
+
+        cacheData = true;
+
+        phantomET = (EditText) this.findViewById(R.id.phantom_et);
+        phantomET.requestFocus();
+        cowIdentifierTV=(TextView)findViewById(R.id.cow_identifier_tv);
+        cowIdentifierS=(Spinner)findViewById(R.id.cow_identifier_s);
+        dateTV=(TextView)findViewById(R.id.date_tv);
+        dateET=(EditText)findViewById(R.id.date_et);
+        dateET.setOnFocusChangeListener(this);
+        dateET.setOnClickListener(this);
+        eventTypeTV=(TextView)findViewById(R.id.event_type_tv);
+        eventTypeS=(Spinner)findViewById(R.id.event_type_s);
+        eventTypeS.setOnItemSelectedListener(this);
+        eventSubtypeTV=(TextView)findViewById(R.id.event_subtype_tv);
+        eventSubtypeS=(Spinner)findViewById(R.id.event_subtype_s);
+        servicingTV = (TextView)findViewById(R.id.servicing_tv);
+        servicingS = (Spinner)findViewById(R.id.servicing_s);
+        strawNumberTV = (TextView)findViewById(R.id.straw_number_tv);
+        strawNumberET = (EditText)findViewById(R.id.straw_number_et);
+        vetUsedTV = (TextView)findViewById(R.id.vet_used_tv);
+        vetUsedET = (EditText)findViewById(R.id.vet_used_et);
+        causeOfDeathTV = (TextView)findViewById(R.id.cause_of_death_tv);
+        causeOfDeathS = (Spinner)findViewById(R.id.cause_of_death_s);
+        bullNameTV = (TextView)findViewById(R.id.bull_name_tv);
+        bullNameACTV = (AutoCompleteTextView)findViewById(R.id.bull_name_actv);
+        bullOwnerTV = (TextView)findViewById(R.id.bull_owner_tv);
+        bullOwnerS = (Spinner)findViewById(R.id.bull_owner_s);
+        bullOwnerS.setOnItemSelectedListener(this);
+        specBullOwnerTV = (TextView)findViewById(R.id.spec_bull_owner_tv);
+        specBullOwnerET = (EditText)findViewById(R.id.spec_bull_owner_et);
+        /*bullETNTV = (TextView)findViewById(R.id.bull_etn_tv);
+        bullETNACTV = (AutoCompleteTextView)findViewById(R.id.bull_etn_actv);*/
+        noOfServicingDaysTV = (TextView)findViewById(R.id.no_of_servicing_days_tv);
+        noOfServicingDaysET = (EditText)findViewById(R.id.no_of_servicing_days_et);
+        remarksTV=(TextView)findViewById(R.id.remarks_tv);
+        remarksET=(EditText)findViewById(R.id.remarks_et);
+        /*liveBirthsTV = (TextView)findViewById(R.id.live_births_tv);
+        liveBirthsET = (EditText)findViewById(R.id.live_births_et);*/
+        okayB=(Button)findViewById(R.id.okay_b);
+        okayB.setOnClickListener(this);
+        cancelB = (Button)findViewById(R.id.cancel_b);
+        cancelB.setOnClickListener(this);
+
+        initTextInViews();
+        fetchCowIdentifiers();
+        fetchServicingEvents();
+
+        Bundle bundle = this.getIntent().getExtras();
+        if(bundle!=null) {
+            presetMode = bundle.getString(KEY_MODE);
+            if(presetMode.equals(MODE_SERVICING)){
+                presetServicingType = bundle.getString(KEY_SERVICING_TYPE);
+            }
+            modeSet();
+        }
+    }
+
+    private void cacheEditTextData(){
+        if(cacheData) {
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_DATE, dateET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_REMARKS, remarksET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_STRAW_NUMBER, strawNumberET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_VET_USED, vetUsedET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_BULL_NAME, bullNameACTV.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_BULL_OWNER, specBullOwnerET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_NO_SERVICING_DAYS, noOfServicingDaysET.getText().toString());
+        }
+    }
+
+    private void restoreEditTextData(){
+        dateET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_AEA_DATE, ""));
+        remarksET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_AEA_REMARKS, ""));
+        strawNumberET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_AEA_STRAW_NUMBER, ""));
+        vetUsedET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_AEA_VET_USED, ""));
+        bullNameACTV.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_AEA_BULL_NAME, ""));
+        specBullOwnerET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_AEA_BULL_OWNER, ""));
+        noOfServicingDaysET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_AEA_NO_SERVICING_DAYS, ""));
+    }
+
+    private void clearEditTextDataCache(){
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_DATE, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_REMARKS, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_STRAW_NUMBER, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_VET_USED, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_BULL_NAME, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_BULL_OWNER, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_NO_SERVICING_DAYS, "");
+
+        cacheData = false;
+    }
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+
+        cacheEditTextData();
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        restoreEditTextData();
+    }
+
+    public boolean onCreateOptionsMenu(Menu menu) {
+        MenuInflater inflater = getSupportMenuInflater();
+        inflater.inflate(R.menu.add_event, menu);
+        this.menu = menu;
+        initMenuText();
+        return true;
+    }
+
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle item selection
+        if(Language.processLanguageMenuItemSelected(this, this, item)){
+            return true;
+        }
+        else if(item.getItemId() == R.id.action_back_main_menu) {
+            DialogInterface.OnClickListener onClickListener = new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialog, int which) {
+                    if(which==DialogInterface.BUTTON_POSITIVE){
+                        dialog.dismiss();
+
+                        clearEditTextDataCache();
+
+                        Intent intent = new Intent(AddEventActivity.this, MainMenu.class);
+                        intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_FARMER);
+                        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+                        startActivity(intent);
+                    }
+                    else{
+                        dialog.cancel();
+                    }
+                }
+            };
+            AlertDialog mainMenuDialog = Utils.createMainMenuDialog(this, onClickListener);
+            mainMenuDialog.show();
+        }
+        return false;
+    }
+
+    private void modeSet(){
+        if(presetMode.equals(MODE_CALVING)){
+            String[] eventTypesInEN = Locale.getArrayInLocale("cow_event_types",this);
+            for(int i = 0; i < eventTypesInEN.length; i++){
+                if(eventTypesInEN[i].equals("Birth")){
+                    eventTypeS.setSelection(i);
+                    break;
+                }
+            }
+
+            eventTypeSelected();
+
+            this.setTitle(Locale.getStringInLocale("calving",this));
+            eventTypeTV.setVisibility(TextView.GONE);
+            eventTypeS.setVisibility(Spinner.GONE);
+            servicingTV.setVisibility(TextView.GONE);
+            servicingS.setVisibility(Spinner.GONE);
+        }
+        else if(presetMode.equals(MODE_SERVICING)){
+            if(presetServicingType.equals(Cow.SERVICE_TYPE_BULL)){
+                String[] eventTypesInEN = Locale.getArrayInLocale("cow_event_types",this);
+                for(int i = 0; i < eventTypesInEN.length; i++){
+                    if(eventTypesInEN[i].equals("Bull Servicing")){
+                        eventTypeS.setSelection(i);
+                        break;
+                    }
+                }
+
+                eventTypeSelected();
+
+                this.setTitle(Locale.getStringInLocale("bull_servicing",this));
+                dateTV.setText(Locale.getStringInLocale("date_served", this));
+                eventTypeTV.setVisibility(TextView.GONE);
+                eventTypeS.setVisibility(Spinner.GONE);
+                noOfServicingDaysTV.setVisibility(TextView.GONE);
+                noOfServicingDaysET.setVisibility(EditText.GONE);
+                bullNameTV.setVisibility(TextView.VISIBLE);
+                bullNameACTV.setVisibility(AutoCompleteTextView.VISIBLE);
+                bullOwnerTV.setVisibility(TextView.VISIBLE);
+                bullOwnerS.setVisibility(Spinner.VISIBLE);
+                //specBullOwnerTV.setVisibility(TextView.VISIBLE);
+                //specBullOwnerET.setVisibility(EditText.VISIBLE);
+                /*bullETNTV.setVisibility(TextView.VISIBLE);
+                bullETNACTV.setVisibility(AutoCompleteTextView.VISIBLE);*/
+                remarksTV.setVisibility(TextView.GONE);
+                remarksET.setVisibility(EditText.GONE);
+            }
+            else if(presetServicingType.equals(Cow.SERVICE_TYPE_AI)){
+                String[] eventTypesInEN = Locale.getArrayInLocale("cow_event_types",this);
+                for(int i = 0; i < eventTypesInEN.length; i++){
+                    if(eventTypesInEN[i].equals("Artificial Insemination")){
+                        eventTypeS.setSelection(i);
+                        break;
+                    }
+                }
+
+                eventTypeSelected();
+
+                this.setTitle(Locale.getStringInLocale("artificial_inseminamtion",this));
+                dateTV.setText(Locale.getStringInLocale("date_of_insemination", this));
+                eventTypeTV.setVisibility(TextView.GONE);
+                eventTypeS.setVisibility(Spinner.GONE);
+                bullNameTV.setVisibility(TextView.GONE);
+                bullNameACTV.setVisibility(AutoCompleteTextView.GONE);
+                bullOwnerTV.setVisibility(TextView.GONE);
+                bullOwnerS.setVisibility(Spinner.GONE);
+                specBullOwnerTV.setVisibility(TextView.GONE);
+                specBullOwnerET.setVisibility(EditText.GONE);
+                /*bullETNTV.setVisibility(TextView.GONE);
+                bullETNACTV.setVisibility(AutoCompleteTextView.GONE);*/
+                remarksTV.setVisibility(TextView.GONE);
+                remarksET.setVisibility(EditText.GONE);
+            }
+        }
+    }
+
+    @Override
+    public void initTextInViews() {
+        setTitle(Locale.getStringInLocale("add_an_event",this));
+        cowIdentifierTV.setText(Locale.getStringInLocale("cow",this));
+        dateTV.setText(Locale.getStringInLocale("date",this));
+        eventTypeTV.setText(Locale.getStringInLocale("event",this));
+
+        int eventTypeArrayID = Locale.getArrayIDInLocale("cow_event_types",this);
+        if(eventTypeArrayID !=0) {
+            ArrayAdapter<CharSequence> eventTypeArrayAdapter=ArrayAdapter.createFromResource(this, eventTypeArrayID, android.R.layout.simple_spinner_item);
+            eventTypeArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+            eventTypeS.setAdapter(eventTypeArrayAdapter);
+        }
+        strawNumberTV.setText(Locale.getStringInLocale("straw_number",this));
+        vetUsedTV.setText(Locale.getStringInLocale("vet_used",this));
+        causeOfDeathTV.setText(Locale.getStringInLocale("cause_of_death",this));
+        int causesOfDeathID = Locale.getArrayIDInLocale("causes_of_death",this);
+        if(causesOfDeathID != 0) {
+            ArrayAdapter<CharSequence> causesOfDeathArrayAdapter=ArrayAdapter.createFromResource(this, causesOfDeathID, android.R.layout.simple_spinner_item);
+            causesOfDeathArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+            causeOfDeathS.setAdapter(causesOfDeathArrayAdapter);
+        }
+        bullNameTV.setText(Locale.getStringInLocale("servicing_bull_name",this));
+        bullNameACTV.setHint(Locale.getStringInLocale("servicing_bull_identifier_hint", this));
+        bullOwnerTV.setText(Locale.getStringInLocale("bull_owner", this));
+
+        int bullOwnersID = Locale.getArrayIDInLocale("bull_owners", this);
+        if(bullOwnersID != 0){
+            ArrayAdapter<CharSequence> bullOwnerArrayAdapter = ArrayAdapter.createFromResource(this, bullOwnersID, android.R.layout.simple_spinner_item);
+            bullOwnerArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+            bullOwnerS.setAdapter(bullOwnerArrayAdapter);
+        }
+
+        specBullOwnerTV.setText(Locale.getStringInLocale("name_bull_owner", this));
+        specBullOwnerET.setHint(Locale.getStringInLocale("name_of_other_farmer_or_group", this));
+
+        //bullETNTV.setText(Locale.getStringInLocale("servicing_bull_ear_tag_number",this));
+        noOfServicingDaysTV.setText(Locale.getStringInLocale("no_of_days_in_servicing",this));
+        remarksTV.setText(Locale.getStringInLocale("remarks",this));
+        okayB.setText(Locale.getStringInLocale("okay",this));
+        enterDate=Locale.getStringInLocale("enter_date",this);
+        dateInFuture=Locale.getStringInLocale("date_in_future",this);
+        eventRecorded=Locale.getStringInLocale("event_successfully_recorded",this);
+        sendUnsuccessfulWarning=Locale.getStringInLocale("something_went_wrong_try_again",this);
+        loadingPleaseWait = Locale.getStringInLocale("loading_please_wait",this);
+        servicingTV.setText(Locale.getStringInLocale("associated_servicing",this));
+        //liveBirthsTV.setText(Locale.getStringInLocale("previous_live_births",this));
+
+        cancelB.setText(Locale.getStringInLocale("cancel", this));
+
+        initMenuText();
+    }
+
+    private void initMenuText(){
+        if(this.menu != null){
+            MenuItem mainMenuMI = menu.findItem(R.id.action_back_main_menu);
+            mainMenuMI.setTitle(Locale.getStringInLocale("back_to_main_menu", this));
+        }
+    }
+
+    private void fetchCowIdentifiers()
+    {
+        CowIdentifierThread cowIdentifierThread=new CowIdentifierThread();
+        TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
+        cowIdentifierThread.execute(telephonyManager.getSimSerialNumber());
+    }
+
+    private void setCowIdentifiers(String[] cowIdentifiers)
+    {
+        if(cowIdentifierS!=null)
+        {
+            ArrayAdapter<String> cowsArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_dropdown_item,cowIdentifiers);
+            cowsArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+            cowIdentifierS.setAdapter(cowsArrayAdapter);
+        }
+    }
+
+    @Override
+    public void onClick(View view)
+    {
+        if(view==okayB)
+        {
+            sendEvent();
+        }
+        else if(view==dateET)
+        {
+            dateETClicked();
+        }
+        else if(view == cancelB){
+            Intent intent;
+
+            clearEditTextDataCache();
+
+            if(presetMode != null && (presetMode.equals(MODE_CALVING) || presetMode.equals(MODE_SERVICING))){
+                intent = new Intent(this, FertilityActivity.class);
+            }
+            else{
+                intent = new Intent(this, EventsActivity.class);
+            }
+            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+            startActivity(intent);
+        }
+    }
+
+    private void eventTypeSelected(){
+        okayB.setText(Locale.getStringInLocale("okay",this));
+        dateTV.setText(Locale.getStringInLocale("date",this));
+        eventSubtypeTV.setVisibility(TextView.GONE);
+        eventSubtypeS.setVisibility(Spinner.GONE);
+        strawNumberTV.setVisibility(TextView.GONE);
+        strawNumberET.setVisibility(EditText.GONE);
+        vetUsedTV.setVisibility(TextView.GONE);
+        vetUsedET.setVisibility(EditText.GONE);
+        bullNameTV.setVisibility(TextView.GONE);
+        bullNameACTV.setVisibility(AutoCompleteTextView.GONE);
+        bullOwnerTV.setVisibility(TextView.GONE);
+        bullOwnerS.setVisibility(Spinner.GONE);
+        specBullOwnerTV.setVisibility(TextView.GONE);
+        specBullOwnerET.setVisibility(EditText.GONE);
+        /*bullETNTV.setVisibility(TextView.GONE);
+        bullETNACTV.setVisibility(AutoCompleteTextView.GONE);*/
+        remarksTV.setVisibility(TextView.GONE);
+        remarksET.setVisibility(EditText.GONE);
+        cowIdentifierS.setVisibility(Spinner.GONE);
+        cowIdentifierTV.setVisibility(TextView.GONE);
+        noOfServicingDaysTV.setVisibility(TextView.GONE);
+        noOfServicingDaysET.setVisibility(EditText.GONE);
+        servicingTV.setVisibility(TextView.GONE);
+        servicingS.setVisibility(Spinner.GONE);
+        causeOfDeathTV.setVisibility(TextView.GONE);
+        causeOfDeathS.setVisibility(Spinner.GONE);
+        /*liveBirthsTV.setVisibility(TextView.GONE);
+        liveBirthsET.setVisibility(EditText.GONE);*/
+        String[] eventTypesEN = Locale.getArrayInLocale("cow_event_types", this, Locale.LOCALE_ENGLISH);
+        if(eventTypesEN[eventTypeS.getSelectedItemPosition()].equals("Birth")) {
+            birthEventSelected();
+            eventSubtypeTV.setVisibility(TextView.VISIBLE);
+            eventSubtypeS.setVisibility(Spinner.VISIBLE);
+            servicingTV.setVisibility(TextView.VISIBLE);
+            servicingS.setVisibility(Spinner.VISIBLE);
+            cowIdentifierS.setVisibility(Spinner.VISIBLE);
+            cowIdentifierTV.setVisibility(TextView.VISIBLE);
+            okayB.setText(Locale.getStringInLocale("next",this));
+            /*liveBirthsTV.setVisibility(TextView.VISIBLE);
+            liveBirthsET.setVisibility(EditText.VISIBLE);*/
+        }
+        else if(eventTypesEN[eventTypeS.getSelectedItemPosition()].equals("Abortion")) {
+            servicingTV.setVisibility(TextView.VISIBLE);
+            servicingS.setVisibility(Spinner.VISIBLE);
+            remarksTV.setVisibility(TextView.VISIBLE);
+            remarksET.setVisibility(EditText.VISIBLE);
+            cowIdentifierS.setVisibility(Spinner.VISIBLE);
+            cowIdentifierTV.setVisibility(TextView.VISIBLE);
+        }
+        else if(eventTypesEN[eventTypeS.getSelectedItemPosition()].equals("Acquisition")) {
+            okayB.setText(Locale.getStringInLocale("next",this));
+        }
+        else if(eventTypesEN[eventTypeS.getSelectedItemPosition()].equals("Artificial Insemination")) {
+            dateTV.setText(Locale.getStringInLocale("date_of_insemination", this));
+            strawNumberTV.setVisibility(TextView.VISIBLE);
+            strawNumberET.setVisibility(EditText.VISIBLE);
+            vetUsedTV.setVisibility(TextView.VISIBLE);
+            vetUsedET.setVisibility(EditText.VISIBLE);
+            remarksTV.setVisibility(TextView.VISIBLE);
+            remarksET.setVisibility(EditText.VISIBLE);
+            cowIdentifierS.setVisibility(Spinner.VISIBLE);
+            cowIdentifierTV.setVisibility(TextView.VISIBLE);
+        }
+        else if(eventTypesEN[eventTypeS.getSelectedItemPosition()].equals("Bull Servicing")) {
+            dateTV.setText(Locale.getStringInLocale("date_served", this));
+            bullNameTV.setVisibility(TextView.VISIBLE);
+            bullNameACTV.setVisibility(AutoCompleteTextView.VISIBLE);
+            bullOwnerTV.setVisibility(TextView.VISIBLE);
+            bullOwnerS.setVisibility(Spinner.VISIBLE);
+            specBullOwnerTV.setVisibility(TextView.VISIBLE);
+            specBullOwnerET.setVisibility(EditText.VISIBLE);
+            /*bullETNTV.setVisibility(TextView.VISIBLE);
+            bullETNACTV.setVisibility(AutoCompleteTextView.VISIBLE);*/
+            remarksTV.setVisibility(TextView.VISIBLE);
+            remarksET.setVisibility(EditText.VISIBLE);
+            cowIdentifierS.setVisibility(Spinner.VISIBLE);
+            cowIdentifierTV.setVisibility(TextView.VISIBLE);
+            noOfServicingDaysTV.setVisibility(TextView.VISIBLE);
+            noOfServicingDaysET.setVisibility(EditText.VISIBLE);
+            dateTV.setText(Locale.getStringInLocale("start_date", this));
+        }
+        else if(eventTypesEN[eventTypeS.getSelectedItemPosition()].equals("Death")) {
+            causeOfDeathTV.setVisibility(TextView.VISIBLE);
+            causeOfDeathS.setVisibility(Spinner.VISIBLE);
+            remarksTV.setVisibility(TextView.VISIBLE);
+            remarksET.setVisibility(EditText.VISIBLE);
+            cowIdentifierS.setVisibility(Spinner.VISIBLE);
+            cowIdentifierTV.setVisibility(TextView.VISIBLE);
+        }
+        else {
+            remarksTV.setVisibility(TextView.VISIBLE);
+            remarksET.setVisibility(EditText.VISIBLE);
+            cowIdentifierS.setVisibility(Spinner.VISIBLE);
+            cowIdentifierTV.setVisibility(TextView.VISIBLE);
+        }
+    }
+
+    @Override
+    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
+        if(parent == eventTypeS) {
+            eventTypeSelected();
+        }
+        else if(parent == bullOwnerS){
+            String[] bullOwnersInEN = Locale.getArrayInLocale("bull_owners", this, Locale.LOCALE_ENGLISH);
+            if(bullOwnersInEN[bullOwnerS.getSelectedItemPosition()].equals("Own bull")){
+                specBullOwnerET.setVisibility(EditText.GONE);
+                specBullOwnerTV.setVisibility(TextView.GONE);
+            }
+            else{
+                specBullOwnerET.setVisibility(EditText.VISIBLE);
+                specBullOwnerTV.setVisibility(TextView.VISIBLE);
+            }
+        }
+    }
+
+    private void birthEventSelected() {
+        eventSubtypeTV.setText(Locale.getStringInLocale("type_of_birth",this));
+        int eventSubtypeArrayID = Locale.getArrayIDInLocale("birth_types",this);
+        if(eventSubtypeArrayID != 0) {
+            ArrayAdapter<CharSequence> eventSubtypeArrayAdapter=ArrayAdapter.createFromResource(this, eventSubtypeArrayID, android.R.layout.simple_spinner_item);
+            eventSubtypeArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+            eventSubtypeS.setAdapter(eventSubtypeArrayAdapter);
+        }
+    }
+
+    @Override
+    public void onNothingSelected(AdapterView<?> parent) {
+
+    }
+
+    private boolean validateInput()
+    {
+
+        String[] eventTypesInEN = Locale.getArrayInLocale("cow_event_types",this, Locale.LOCALE_ENGLISH);
+        String selectedEvent = eventTypesInEN[eventTypeS.getSelectedItemPosition()];
+        if(dateET.getText().toString()==null||dateET.getText().toString().length()==0) {
+            Toast.makeText(this,enterDate,Toast.LENGTH_LONG).show();
+            return false;
+        }
+        else {
+            if(!validateDate()){
+                return false;
+            }
+        }
+        if(selectedEvent.length() == 0){
+            Toast.makeText(this,Locale.getStringInLocale("select_an_event",this),Toast.LENGTH_LONG).show();
+            return false;
+        }
+        if(selectedEvent.equals("Abortion") || selectedEvent.equals("Birth") || selectedEvent.equals("Start of Lactation") || selectedEvent.equals("Dry Off") || selectedEvent.equals("Artificial Insemination") || selectedEvent.equals("Bull Servicing")) {
+            if(cowSexArray != null && cowSexArray[cowIdentifierS.getSelectedItemPosition()].equals(Cow.SEX_MALE)) {
+                Toast.makeText(this,Locale.getStringInLocale("event_only_for_female_cattle",this),Toast.LENGTH_LONG).show();
+                return false;
+            }
+        }
+        if(selectedEvent.equals("Birth")){
+            /*if(liveBirthsET.getText().toString()==null || liveBirthsET.getText().toString().trim().length()==0){
+                Toast.makeText(this,Locale.getStringInLocale("enter_previous_live_births",this),Toast.LENGTH_LONG).show();
+                return false;
+            }*/
+        }
+
+        Cow selectedCow = farmer.getCows().get(cowIdentifierS.getSelectedItemPosition());
+        if(selectedCow != null){
+            if(selectedEvent.equals("Birth")){
+                for(int i = 0; i < eventConstraints.size(); i++){
+                    EventConstraint currConstraint = eventConstraints.get(i);
+                    if(currConstraint.getEvent().equals(EventConstraint.CONSTRAINT_CALVING)){
+                        if(selectedCow.getAgeMilliseconds()<currConstraint.getTimeMilliseconds()){
+                            Toast.makeText(this,Locale.getStringInLocale("cow_too_young", this),Toast.LENGTH_LONG).show();
+                            return false;
+                        }
+                    }
+                }
+            }
+            else if(selectedEvent.equals("Start of Lactation")){
+                for(int i = 0; i < eventConstraints.size(); i++){
+                    EventConstraint currConstraint = eventConstraints.get(i);
+                    if(currConstraint.getEvent().equals(EventConstraint.CONSTRAINT_MILKING)){
+                        if(selectedCow.getAgeMilliseconds()<currConstraint.getTimeMilliseconds()){
+                            Toast.makeText(this,Locale.getStringInLocale("cow_too_young", this),Toast.LENGTH_LONG).show();
+                            return false;
+                        }
+                    }
+                }
+            }
+            else if(selectedEvent.equals("Artificial Insemination") || selectedEvent.equals("Bull Servicing") || selectedEvent.equals("Signs of Heat")){
+                for(int i = 0; i < eventConstraints.size(); i++){
+                    EventConstraint currConstraint = eventConstraints.get(i);
+                    if(currConstraint.getEvent().equals(EventConstraint.CONSTRAINT_MATURITY)){
+                        if(selectedCow.getAgeMilliseconds()<currConstraint.getTimeMilliseconds()){
+                            Toast.makeText(this,Locale.getStringInLocale("cow_too_young", this),Toast.LENGTH_LONG).show();
+                            return false;
+                        }
+                    }
+                }
+            }
+
+        }
+
+        return true;
+    }
+
+    private boolean validateDate() {
+        try
+        {
+            Date dateEntered=new SimpleDateFormat(dateFormat, java.util.Locale.ENGLISH).parse(dateET.getText().toString());
+            Date today=new Date();
+            long milisecondDifference = today.getTime() - dateEntered.getTime();
+            long days = milisecondDifference / 86400000;
+            if((today.getTime()-dateEntered.getTime())<0)
+            {
+                Toast.makeText(this,dateInFuture,Toast.LENGTH_LONG).show();
+                return false;
+            }
+            else if(days > 15) {//more than 15 days
+                Toast.makeText(this,Locale.getStringInLocale("event_too_old",this),Toast.LENGTH_LONG).show();
+                return false;
+            }
+            else {
+                return true;
+            }
+        }
+        catch (ParseException e)
+        {
+            e.printStackTrace();
+            return false;
+        }
+    }
+
+    private void sendEvent()
+    {
+        if(validateInput()){
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_DATE, "");
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_REMARKS, "");
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_STRAW_NUMBER, "");
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_VET_USED, "");
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_BULL_NAME, "");
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_BULL_OWNER, "");
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AEA_NO_SERVICING_DAYS, "");
+
+            String[] eventTypes = Locale.getArrayInLocale("cow_event_types",this,Locale.LOCALE_ENGLISH);
+            String selectedEvent = eventTypes[eventTypeS.getSelectedItemPosition()];
+            String[] eventSubtypes = Locale.getArrayInLocale("birth_types",this,Locale.LOCALE_ENGLISH);
+            if(selectedEvent.equals("Birth") && (eventSubtypes[eventSubtypeS.getSelectedItemPosition()].equals("Normal") || eventSubtypes[eventSubtypeS.getSelectedItemPosition()].equals("Premature"))) {
+                AlertDialog cowRegistrationAlertDialog = constructCalfRegistrationDialog();
+                cowRegistrationAlertDialog.show();
+            }
+            else if(selectedEvent.equals("Acquisition")) {
+                AlertDialog cowRegistrationAlertDialog = constructCowRegistrationDialog();
+                cowRegistrationAlertDialog.show();
+            }
+            else {
+                String selectedCowETN = cowEarTagNumberArray[cowIdentifierS.getSelectedItemPosition()];
+                String selectedCowName = cowNameArray[cowIdentifierS.getSelectedItemPosition()];
+                TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
+                String serialNumber = telephonyManager.getSimSerialNumber();
+                JSONObject jsonObject = new JSONObject();
+                try
+                {
+                    String[] causesOfDeathInEN = Locale.getArrayInLocale("causes_of_death",AddEventActivity.this,Locale.LOCALE_ENGLISH);
+                    jsonObject.put("simCardSN", serialNumber);
+                    jsonObject.put("cowEarTagNumber", selectedCowETN);
+                    jsonObject.put("cowName", selectedCowName);
+                    jsonObject.put("date", dateET.getText().toString());
+                    jsonObject.put("eventType", selectedEvent);
+                    jsonObject.put("remarks", remarksET.getText().toString());
+                    jsonObject.put("strawNumber", strawNumberET.getText().toString());
+                    jsonObject.put("vetUsed", vetUsedET.getText().toString());
+                    //jsonObject.put("bullName", bullNameACTV.getText().toString());
+
+                    //check if hint put as value of bullNameACTV
+                    String bullEarTagNo = bullNameACTV.getText().toString();
+                    if(bullEarTagNo.equals(Locale.getStringInLocale("servicing_bull_identifier_hint", AddEventActivity.this)))
+                        bullEarTagNo = "";
+                    jsonObject.put("bullEarTagNo", bullEarTagNo);
+
+                    if(selectedEvent.equals("Bull Servicing")){
+                        String[] bullOwnersInEN = Locale.getArrayInLocale("bull_owners", AddEventActivity.this, Locale.LOCALE_ENGLISH);
+                        jsonObject.put("bullOwner", bullOwnersInEN[bullOwnerS.getSelectedItemPosition()]);
+
+                        //check if hint put as value of EditText
+                        String bullOwnerName = specBullOwnerET.getText().toString();
+                        if(bullOwnerName.equals(Locale.getStringInLocale("name_of_other_farmer_or_group", AddEventActivity.this)))
+                            bullOwnerName = "";
+                        jsonObject.put("bullOwnerName", bullOwnerName);
+                    }
+                    //jsonObject.put("bullEarTagNo", bullETNACTV.getText().toString());
+                    jsonObject.put("noOfServicingDays", noOfServicingDaysET.getText().toString());
+                    if(servicingIDs != null && servicingS.getSelectedItemPosition() != -1) {
+                        jsonObject.put("parentEvent", servicingIDs.get(servicingS.getSelectedItemPosition()));
+                    }
+                    if(selectedEvent.equals("Birth")){
+                        String[] birthTypesInEN = Locale.getArrayInLocale("birth_types", AddEventActivity.this, Locale.LOCALE_ENGLISH);
+                        jsonObject.put("birthType", birthTypesInEN[eventSubtypeS.getSelectedItemPosition()]);
+                        //jsonObject.put("liveBirths", liveBirthsET.getText().toString());
+                    }
+                    jsonObject.put("causeOfDeath", causesOfDeathInEN[causeOfDeathS.getSelectedItemPosition()]);
+                    CowEventAdditionThread cowEventAdditionThread=new CowEventAdditionThread();
+                    cowEventAdditionThread.execute(jsonObject);
+                }
+                catch (JSONException e)
+                {
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+
+    private AlertDialog constructCalfRegistrationDialog() {
+        AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(this);
+        alertDialogBuilder.setTitle(Locale.getStringInLocale("calf_registration", this));
+        alertDialogBuilder
+                .setMessage(Locale.getStringInLocale("next_screen_is_calf_registration",AddEventActivity.this))
+                .setCancelable(false)
+                .setPositiveButton(Locale.getStringInLocale("next", AddEventActivity.this), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        int numberOfCows = 1;
+                        Farmer farmer = new Farmer();
+                        farmer.setCowNumber(numberOfCows);
+                        farmer.setMode(Farmer.MODE_NEW_COW_REGISTRATION);
+                        TelephonyManager telephonyManager = (TelephonyManager) AddEventActivity.this.getSystemService(Context.TELEPHONY_SERVICE);
+                        farmer.setSimCardSN(telephonyManager.getSimSerialNumber());
+                        Cow thisCalf = new Cow(true);
+                        Dam calfDam = new Dam();
+                        calfDam.setEarTagNumber(cowEarTagNumberArray[cowIdentifierS.getSelectedItemPosition()]);
+                        calfDam.setName(cowNameArray[cowIdentifierS.getSelectedItemPosition()]);
+                        thisCalf.setDam(calfDam);
+                        JSONObject jsonObject = new JSONObject();
+                        String[] birthTypesInEN = Locale.getArrayInLocale("birth_types", AddEventActivity.this, Locale.LOCALE_ENGLISH);
+                        try {
+                            String selectedCowETN = cowEarTagNumberArray[cowIdentifierS.getSelectedItemPosition()];
+                            String selectedCowName = cowNameArray[cowIdentifierS.getSelectedItemPosition()];
+
+                            jsonObject.put("motherETN", selectedCowETN);
+                            jsonObject.put("motherName", selectedCowName);
+                            jsonObject.put("birthType", birthTypesInEN[eventSubtypeS.getSelectedItemPosition()]);
+                            if(servicingIDs != null && servicingS.getSelectedItemPosition() != -1) {
+                                jsonObject.put("parentEvent", servicingIDs.get(servicingS.getSelectedItemPosition()));
+                            }
+                            //jsonObject.put("liveBirths", liveBirthsET.getText().toString());
+
+                            thisCalf.setPiggyBack(jsonObject.toString());
+                        } catch (JSONException e) {
+                            e.printStackTrace();
+                        }
+                        if(servicingTypes != null && servicingS.getSelectedItemPosition() != -1) {
+                            if (servicingTypes.get(servicingS.getSelectedItemPosition()).equals("Artificial Insemination")) {
+                                thisCalf.setServiceType(Cow.SERVICE_TYPE_AI);
+                            } else if (servicingTypes.get(servicingS.getSelectedItemPosition()).equals("Bull Servicing")) {
+                                thisCalf.setServiceType(Cow.SERVICE_TYPE_BULL);
+                            }
+                        }
+                        thisCalf.setDateOfBirth(dateET.getText().toString());
+                        thisCalf.setMode(Cow.MODE_BORN_CALF_REGISTRATION);
+
+                        farmer.setCow(thisCalf, 0);
+
+                        clearEditTextDataCache();
+
+                        Intent intent = new Intent(AddEventActivity.this, CowRegistrationActivity.class);
+                        //intent.putExtra(CowRegistrationActivity.KEY_MODE,CowRegistrationActivity.MODE_COW);
+                        intent.putExtra(CowRegistrationActivity.KEY_INDEX, 0);
+                        intent.putExtra(CowRegistrationActivity.KEY_NUMBER_OF_COWS, numberOfCows);
+                        Bundle bundle = new Bundle();
+                        bundle.putParcelable(Farmer.PARCELABLE_KEY, farmer);
+                        intent.putExtras(bundle);
+                        startActivity(intent);
+                    }
+                })
+                .setNegativeButton(Locale.getStringInLocale("cancel", AddEventActivity.this), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        dialog.cancel();
+                    }
+                });
+        AlertDialog alertDialog=alertDialogBuilder.create();
+        return alertDialog;
+    }
+
+    private AlertDialog constructCowRegistrationDialog() {
+        AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(this);
+        alertDialogBuilder.setTitle(Locale.getStringInLocale("cow_registration_proper", this));
+        alertDialogBuilder
+                .setMessage(Locale.getStringInLocale("next_screen_is_cow_registration",AddEventActivity.this))
+                .setCancelable(false)
+                .setPositiveButton(Locale.getStringInLocale("next", AddEventActivity.this), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        int numberOfCows = 1;
+                        Farmer farmer = new Farmer();
+                        farmer.setCowNumber(numberOfCows);
+                        farmer.setMode(Farmer.MODE_NEW_COW_REGISTRATION);
+                        TelephonyManager telephonyManager = (TelephonyManager) AddEventActivity.this.getSystemService(Context.TELEPHONY_SERVICE);
+                        farmer.setSimCardSN(telephonyManager.getSimSerialNumber());
+                        Cow thisCow = new Cow(true);
+                        JSONObject jsonObject = new JSONObject();
+                        try {
+                            jsonObject.put("remarks", remarksET.getText().toString());
+                            thisCow.setPiggyBack(jsonObject.toString());
+                        } catch (JSONException e) {
+                            e.printStackTrace();
+                        }
+                        thisCow.setMode(Cow.MODE_ADULT_COW_REGISTRATION);
+                        farmer.setCow(thisCow, 0);
+
+                        clearEditTextDataCache();
+
+                        Intent intent = new Intent(AddEventActivity.this, CowRegistrationActivity.class);
+                        //intent.putExtra(CowRegistrationActivity.KEY_MODE,CowRegistrationActivity.MODE_COW);
+                        intent.putExtra(CowRegistrationActivity.KEY_INDEX, 0);
+                        intent.putExtra(CowRegistrationActivity.KEY_NUMBER_OF_COWS, numberOfCows);
+                        Bundle bundle = new Bundle();
+                        bundle.putParcelable(Farmer.PARCELABLE_KEY, farmer);
+                        intent.putExtras(bundle);
+                        startActivity(intent);
+                    }
+                })
+                .setNegativeButton(Locale.getStringInLocale("cancel", AddEventActivity.this), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        dialog.cancel();
+                    }
+                });
+        AlertDialog alertDialog=alertDialogBuilder.create();
+        return alertDialog;
+    }
+
+    private class CowEventAdditionThread extends AsyncTask<JSONObject, Integer, Boolean>
+    {
+        private ProgressDialog progressDialog;
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(AddEventActivity.this, "",loadingPleaseWait, true);
+        }
+
+        @Override
+        protected Boolean doInBackground(JSONObject... params) {
+            //public static final void cacheRequest(Context context, String jsonString, String appendedURL){
+            boolean response = DataHandler.cacheRequest(AddEventActivity.this, params[0].toString(), DataHandler.FARMER_ADD_COW_EVENT_URL);
+            return response;
+        }
+
+        @Override
+        protected void onPostExecute(Boolean result)
+        {
+            super.onPostExecute(result);
+            progressDialog.dismiss();
+            if(result == null || result == false){
+                Toast.makeText(AddEventActivity.this, sendUnsuccessfulWarning, Toast.LENGTH_LONG).show();
+            }
+            else if(result == true) {
+                Toast.makeText(AddEventActivity.this, eventRecorded, Toast.LENGTH_LONG).show();
+                Intent intent;
+
+                clearEditTextDataCache();
+
+                if(presetMode != null && (presetMode.equals(MODE_SERVICING) || presetMode.equals(MODE_CALVING))){
+                    intent = new Intent(AddEventActivity.this, FertilityActivity.class);
+                    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+                }
+                else{
+                    intent = new Intent(AddEventActivity.this, EventsActivity.class);
+                    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+                }
+                startActivity(intent);
+            }
+        }
+    }
+
+    @Override
+    public void onFocusChange(View view, boolean hasFocus)
+    {
+        if(view==dateET && hasFocus)
+        {
+            dateETClicked();
+        }
+    }
+
+    private void dateETClicked()
+    {
+        Date date=null;
+
+        if(dateET.getText().toString().length()>0)
+        {
+            try
+            {
+                date=new SimpleDateFormat(dateFormat, java.util.Locale.ENGLISH).parse(dateET.getText().toString());
+            }
+            catch (ParseException e)
+            {
+                e.printStackTrace();
+            }
+        }
+        if(date==null)
+        {
+            date=new Date();
+        }
+
+        Calendar calendar=new GregorianCalendar();
+        calendar.setTime(date);
+        datePickerDialog=new DatePickerDialog(this,this,calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH));
+        //datePickerDialog=createDialogWithoutDateField(this,calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH));
+        datePickerDialog.show();
+    }
+
+    @Override
+    public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth)
+    {
+        String dateString=String.valueOf(dayOfMonth)+"/"+String.valueOf(monthOfYear+1)+"/"+String.valueOf(year);
+        dateET.setText(dateString);
+        if(!validateDate()){
+            dateET.setText("");
+        }
+    }
+
+    private class CowIdentifierThread extends AsyncTask<String,Integer,Farmer> {
+
+        private ProgressDialog progressDialog;
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(AddEventActivity.this, "",loadingPleaseWait, true);
+        }
+
+        @Override
+        protected Farmer doInBackground(String... params) {
+            Farmer farmer = DataHandler.getFarmerData(AddEventActivity.this);
+            eventConstraints = DataHandler.getEventConstraints(AddEventActivity.this);
+            return farmer;
+        }
+
+        @Override
+        protected void onPostExecute(Farmer farmer) {
+            super.onPostExecute(farmer);
+            progressDialog.dismiss();
+
+            if(farmer == null){
+                Toast.makeText(AddEventActivity.this, Locale.getStringInLocale("unable_to_fetch_cached_data", AddEventActivity.this),Toast.LENGTH_LONG).show();
+            }
+            else{
+                AddEventActivity.this.farmer = farmer;
+                List<Cow> cows = farmer.getCows();
+                String[] cowArray=new String[cows.size()];
+                String[] earTagArray=new String[cows.size()];
+                String[] sexArray=new String[cows.size()];
+
+                for(int i=0;i<cows.size();i++) {
+                    cowArray[i]=cows.get(i).getName();
+                    earTagArray[i]=cows.get(i).getEarTagNumber();
+                    sexArray[i]=cows.get(i).getSex();
+                }
+
+                if(cowArray.length==0) {
+                    Toast.makeText(AddEventActivity.this, Locale.getStringInLocale("you_do_not_have_cows", AddEventActivity.this),Toast.LENGTH_LONG).show();
+                }
+                AddEventActivity.this.cowNameArray =cowArray;
+                AddEventActivity.this.cowEarTagNumberArray=earTagArray;
+                AddEventActivity.this.cowSexArray = sexArray;
+                String[] identifierArray=new String[cowArray.length];
+                for (int i=0;i<cowArray.length;i++)
+                {
+                    if(cowArray[i]!=null&&!cowArray[i].equals(""))
+                    {
+                        identifierArray[i]=cowArray[i];
+                    }
+                    else
+                    {
+                        identifierArray[i]=earTagArray[i];
+                    }
+                }
+                setCowIdentifiers(identifierArray);
+            }
+        }
+    }
+
+    private void fetchServicingEvents() {
+        TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
+        CowEventHistoryThread cowEventHistoryThread =new CowEventHistoryThread();
+        cowEventHistoryThread.execute(telephonyManager.getSimSerialNumber());
+    }
+
+    private class CowEventHistoryThread extends AsyncTask<String, Integer, Farmer> {
+
+        ProgressDialog progressDialog;
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(AddEventActivity.this, "",Locale.getStringInLocale("loading_please_wait",AddEventActivity.this), true);
+        }
+
+        @Override
+        protected Farmer doInBackground(String... params) {
+            /*String result = null;
+            JSONObject jsonObject = new JSONObject();
+            try {
+                jsonObject.put("simCardSN",params[0]);
+                result = DataHandler.sendDataToServer(AddEventActivity.this, jsonObject.toString(),DataHandler.FARMER_FETCH_COW_SERVICING_EVENTS_URL, true);
+            }
+            catch (JSONException e) {
+                e.printStackTrace();
+            }*/
+
+            Farmer farmer = DataHandler.getFarmerData(AddEventActivity.this);
+            return farmer;
+        }
+
+        @Override
+        protected void onPostExecute(Farmer farmer) {
+            super.onPostExecute(farmer);
+            progressDialog.dismiss();
+            if(farmer == null) {
+                Toast.makeText(AddEventActivity.this, Locale.getStringInLocale("unable_to_fetch_cached_data",AddEventActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else {
+                /*try {
+                    JSONObject jsonObject = new JSONObject(result);
+                    JSONArray historyArray = jsonObject.getJSONArray("history");
+                    List<String> servicingNames = new ArrayList<String>();
+                    servicingIDs = new ArrayList<Integer>();
+                    servicingTypes = new ArrayList<String>();
+                    for(int i = 0; i < historyArray.length(); i++) {
+                        JSONObject currentServicing = historyArray.getJSONObject(i);
+                        servicingIDs.add(currentServicing.getInt("id"));
+                        servicingNames.add(currentServicing.getString("event_date")+" ("+currentServicing.getString("ear_tag_number")+")");
+                        servicingTypes.add(currentServicing.getString("event_name"));
+                    }
+                    ArrayAdapter<String> servicingsArrayAdapter=new ArrayAdapter<String>(AddEventActivity.this,android.R.layout.simple_spinner_dropdown_item,servicingNames);
+                    servicingsArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+                    servicingS.setAdapter(servicingsArrayAdapter);
+
+                }
+                catch (JSONException e) {
+                    e.printStackTrace();
+                }*/
+
+                List<Cow> allCows = farmer.getCows();
+                List<String> servicingNames = new ArrayList<String>();
+                servicingIDs = new ArrayList<Integer>();
+                servicingTypes = new ArrayList<String>();
+                for(int cowIndex = 0; cowIndex < allCows.size(); cowIndex++){
+                    //get all the events associated with this cow
+                    Cow currentCow = allCows.get(cowIndex);
+                    List<Event> cowEvents = currentCow.getEvents();
+                    for(int eventIndex = 0; eventIndex < cowEvents.size(); eventIndex++){
+                        Event currentEvent = cowEvents.get(eventIndex);
+                        if(currentEvent.isServicingEvent()){
+                            servicingIDs.add(currentEvent.getId());
+                            servicingTypes.add(currentEvent.getType());
+                            String name = currentCow.getEarTagNumber();
+                            if(name == null || name.length() == 0){
+                                name = currentCow.getName();
+                            }
+                            servicingNames.add(currentEvent.getEventDate()+" (" + name + ")");
+                        }
+                    }
+                }
+
+                ArrayAdapter<String> servicingsArrayAdapter=new ArrayAdapter<String>(AddEventActivity.this,android.R.layout.simple_spinner_dropdown_item,servicingNames);
+                servicingsArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+                servicingS.setAdapter(servicingsArrayAdapter);
+            }
+        }
+    }
+    
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/AddMilkProductionActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/AddMilkProductionActivity.java
new file mode 100644
index 0000000..8bf6154
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/AddMilkProductionActivity.java
@@ -0,0 +1,616 @@
+package org.cgiar.ilri.np.farmer;
+
+import android.app.AlertDialog;
+import android.app.DatePickerDialog;
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.telephony.TelephonyManager;
+import android.util.Log;
+import com.actionbarsherlock.view.Menu;
+import android.view.View;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.DatePicker;
+import android.widget.EditText;
+import android.widget.Spinner;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.actionbarsherlock.app.SherlockActivity;
+import com.actionbarsherlock.view.MenuInflater;
+import com.actionbarsherlock.view.MenuItem;
+
+import org.cgiar.ilri.np.farmer.backend.DataHandler;
+import org.cgiar.ilri.np.farmer.backend.Locale;
+import org.cgiar.ilri.np.farmer.carrier.Cow;
+import org.cgiar.ilri.np.farmer.carrier.EventConstraint;
+import org.cgiar.ilri.np.farmer.carrier.Farmer;
+import org.cgiar.ilri.np.farmer.carrier.MilkProduction;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+import java.util.List;
+
+public class AddMilkProductionActivity extends SherlockActivity implements NPActivity, View.OnClickListener, DatePickerDialog.OnDateSetListener {
+
+    private final String dateFormat="dd/MM/yyyy";
+    private static final String TAG="AddMilkProductionActivity";
+
+    private boolean cacheData;
+
+    private TextView cowTV;
+    private Spinner cowS;
+    private TextView dateTV;
+    private EditText dateET;
+    private TextView timeTV;
+    private Spinner timeS;
+    private TextView quantityTV;
+    private EditText quantityET;
+    private TextView quantityTypeTV;
+    private Spinner quantityTypeS;
+    private Button addMilkProductionAddB;
+    private Button cancelB;
+    /*private TextView noMilkingTV;
+    private EditText noMilkingET;
+    private TextView calfSucklingTV;
+    private Spinner calfSucklingS;*/
+    private DatePickerDialog datePickerDialog;
+    private Menu menu;
+
+    private Farmer farmer;
+    private String[] cowNameArray;
+    private String[] cowEarTagNumberArray;
+    private String[] quantityTypes;
+    private String[] calfSucklingTypes;
+    private List<EventConstraint> eventConstraints;
+    private boolean milkQuantityFine;
+    private boolean milkFluctuation;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_add_milk_production);
+        //DataHandler.requestPermissionToUseSMS(this);
+
+        cacheData = true;
+        milkQuantityFine = false;
+        milkFluctuation = false;
+
+        cowTV=(TextView)this.findViewById(R.id.cow_tv);
+        cowS=(Spinner)this.findViewById(R.id.cow_s);
+        dateTV=(TextView)this.findViewById(R.id.date_tv);
+        dateET=(EditText)this.findViewById(R.id.date_et);
+
+        InputMethodManager inputMethodManager = (InputMethodManager) this.getSystemService(Context.INPUT_METHOD_SERVICE);
+        inputMethodManager.hideSoftInputFromWindow(dateET.getWindowToken(), 0);
+
+        dateET.setOnClickListener(this);
+        timeTV=(TextView)this.findViewById(R.id.time_tv);
+        timeS=(Spinner)this.findViewById(R.id.time_s);
+        quantityTV=(TextView)this.findViewById(R.id.quantity_tv);
+        quantityET=(EditText)this.findViewById(R.id.quantity_et);
+        quantityTypeTV=(TextView)this.findViewById(R.id.quantity_type_tv);
+        quantityTypeS=(Spinner)this.findViewById(R.id.quantity_type_s);
+        addMilkProductionAddB=(Button)this.findViewById(R.id.dialog_add_milk_add_b);
+        /*noMilkingTV = (TextView)this.findViewById(R.id.no_milking_tv);
+        noMilkingET = (EditText)this.findViewById(R.id.no_milking_et);
+        calfSucklingTV = (TextView)this.findViewById(R.id.calf_suckling_tv);
+        calfSucklingS = (Spinner)this.findViewById(R.id.calf_suckling_s);*/
+        addMilkProductionAddB.setOnClickListener(this);
+        cancelB = (Button)this.findViewById(R.id.cancel_b);
+        cancelB.setOnClickListener(this);
+
+        initTextInViews();
+        fetchCowIdentifiers();
+    }
+
+    private void cacheEditTextData(){
+        if(cacheData){
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AMPA_DATE, dateET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AMPA_QUANTITY, quantityET.getText().toString());
+        }
+    }
+
+    private void restoreEditTextData(){
+        dateET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_AMPA_DATE, ""));
+        quantityET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_AMPA_QUANTITY, ""));
+    }
+
+    private void clearEditTextDataCache(){
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AMPA_DATE, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AMPA_QUANTITY, "");
+
+        cacheData = false;
+    }
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+
+        cacheEditTextData();
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        restoreEditTextData();
+    }
+
+    public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu) {
+        MenuInflater inflater = getSupportMenuInflater();
+        inflater.inflate(R.menu.milk_production, menu);
+        this.menu = menu;
+        initMenuText();
+        return true;
+    }
+
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle item selection
+        if(Language.processLanguageMenuItemSelected(this, this, item)){
+            return true;
+        }
+        else if(item.getItemId() == R.id.action_back_main_menu) {
+            DialogInterface.OnClickListener onClickListener = new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialog, int which) {
+                    if(which==DialogInterface.BUTTON_POSITIVE){
+                        dialog.dismiss();
+
+                        clearEditTextDataCache();
+
+                        Intent intent = new Intent(AddMilkProductionActivity.this, MainMenu.class);
+                        intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_FARMER);
+                        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+                        startActivity(intent);
+                    }
+                    else{
+                        dialog.cancel();
+                    }
+                }
+            };
+            AlertDialog mainMenuDialog = Utils.createMainMenuDialog(this, onClickListener);
+            mainMenuDialog.show();
+        }
+        return false;
+    }
+
+    @Override
+    public void initTextInViews() {
+        this.setTitle(Locale.getStringInLocale("add_production",this));
+
+        cowTV.setText(Locale.getStringInLocale("cow",this));
+        dateTV.setText(Locale.getStringInLocale("date",this));
+        timeTV.setText(Locale.getStringInLocale("time",this));
+        quantityTV.setText(Locale.getStringInLocale("quantity",this));
+        addMilkProductionAddB.setText(Locale.getStringInLocale("add",this));
+        int milkingTimesArrayID = Locale.getArrayIDInLocale("milking_times",this);
+        if(milkingTimesArrayID != 0) {
+            ArrayAdapter<CharSequence> milkingTimesArrayAdapter=ArrayAdapter.createFromResource(this, milkingTimesArrayID, android.R.layout.simple_spinner_item);
+            milkingTimesArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+            timeS.setAdapter(milkingTimesArrayAdapter);
+        }
+
+        quantityTypeTV.setText(Locale.getStringInLocale("measurement_type",this));
+
+        quantityTypes = Locale.getArrayInLocale("quantity_types",this);
+        int defaultQuantityTypeIndex = 0;
+        if(quantityTypes == null ) {
+            quantityTypes = new String[1];
+            quantityTypes[0] = "";
+        }
+        else {
+            defaultQuantityTypeIndex = Integer.parseInt(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_MILK_QUANTITY_TYPE,"0"));
+        }
+        ArrayAdapter<String> quantityTypesArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,quantityTypes);
+        quantityTypesArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        quantityTypeS.setAdapter(quantityTypesArrayAdapter);
+        if(defaultQuantityTypeIndex < quantityTypes.length)
+            quantityTypeS.setSelection(defaultQuantityTypeIndex);
+
+        cancelB.setText(Locale.getStringInLocale("cancel", this));
+
+        //noMilkingTV.setText(Locale.getStringInLocale("no_times_milked_in_a_day",this));
+        //calfSucklingTV.setText(Locale.getStringInLocale("calf_suckling",this));
+
+        /*calfSucklingTypes = Locale.getArrayInLocale("calf_suckling_types",this);
+        ArrayAdapter<String> calfSucklingTypesArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,calfSucklingTypes);
+        calfSucklingTypesArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        calfSucklingS.setAdapter(calfSucklingTypesArrayAdapter);*/
+
+        initMenuText();
+    }
+
+    private void initMenuText(){
+        if(this.menu != null){
+            MenuItem mainMenuMI = menu.findItem(R.id.action_back_main_menu);
+            mainMenuMI.setTitle(Locale.getStringInLocale("back_to_main_menu", this));
+        }
+    }
+
+    @Override
+    public void onClick(View view) {
+        if(view==addMilkProductionAddB) {
+            sendMilkProductionData();
+        }
+        else if(view==dateET) {
+            dateETClicked();
+        }
+        else if(view == cancelB){
+
+            clearEditTextDataCache();
+
+            Intent intent = new Intent(this, MilkProductionActivity.class);
+            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+            startActivity(intent);
+        }
+    }
+
+    private void dateETClicked() {
+        Date date=new Date();
+        Calendar calendar=new GregorianCalendar();
+        calendar.setTime(date);
+        datePickerDialog=new DatePickerDialog(this,this,calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH));
+        //datePickerDialog=createDialogWithoutDateField(this,calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH));
+        datePickerDialog.show();
+    }
+
+    @Override
+    public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
+        String dateString=String.valueOf(dayOfMonth)+"/"+String.valueOf(monthOfYear+1)+"/"+String.valueOf(year);
+        dateET.setText(dateString);
+        if(!validateDate()) {
+            dateET.setText("");
+        }
+    }
+
+    private void sendMilkProductionData()
+    {
+        if(validateInput())
+        {
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AMPA_DATE, "");
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_AMPA_QUANTITY, "");
+
+            TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
+            MilkProductionDataAdditionThread milkProductionDataAdditionThread=new MilkProductionDataAdditionThread();
+            String[] quantityTypesInEN = Locale.getArrayInLocale("quantity_types",this,Locale.LOCALE_ENGLISH);
+            String[] milkingTimesInEN = Locale.getArrayInLocale("milking_times", this, Locale.LOCALE_ENGLISH);
+            String quantityType = "";
+            if(quantityTypesInEN.length == quantityTypes.length) {
+                DataHandler.setSharedPreference(AddMilkProductionActivity.this, DataHandler.SP_KEY_MILK_QUANTITY_TYPE, String.valueOf(quantityTypeS.getSelectedItemPosition()));
+                quantityType = quantityTypesInEN[quantityTypeS.getSelectedItemPosition()];
+            }
+            String milkingTime = "";
+            if(milkingTimesInEN.length > 0){
+                milkingTime = milkingTimesInEN[timeS.getSelectedItemPosition()];
+            }
+
+            /*String[] calfSucklingTypesInEN = Locale.getArrayInLocale("calf_suckling_types",this,Locale.LOCALE_ENGLISH);
+            String calfSucklingType = calfSucklingTypesInEN[calfSucklingS.getSelectedItemPosition()];*/
+            //milkProductionDataAdditionThread.execute(telephonyManager.getSimSerialNumber(),cowNameArray[cowS.getSelectedItemPosition()],cowEarTagNumberArray[cowS.getSelectedItemPosition()],milkingTime,quantityET.getText().toString(),quantityType,dateET.getText().toString(),noMilkingET.getText().toString(),calfSucklingType);
+            milkProductionDataAdditionThread.execute(telephonyManager.getSimSerialNumber(),cowNameArray[cowS.getSelectedItemPosition()],cowEarTagNumberArray[cowS.getSelectedItemPosition()],milkingTime,quantityET.getText().toString(),quantityType,dateET.getText().toString(), Boolean.toString(milkFluctuation));
+        }
+    }
+
+    private boolean validateInput()
+    {
+        String[] quantityTypesInEN = Locale.getArrayInLocale("quantity_types",this,Locale.LOCALE_ENGLISH);
+        String quantityType = quantityTypesInEN[quantityTypeS.getSelectedItemPosition()];
+        if(cowS.getSelectedItemPosition() == -1 || cowNameArray == null || cowNameArray.length == 0 || cowEarTagNumberArray.length == 0){
+            Toast.makeText(this, Locale.getStringInLocale("you_do_not_have_female_cows", this), Toast.LENGTH_LONG).show();
+            return false;
+        }
+        if(quantityET.getText().toString()==null) {
+            Toast.makeText(this, Locale.getStringInLocale("enter_quantity_of_milk_produced",this), Toast.LENGTH_LONG).show();
+            return false;
+        }
+        else if(quantityET.getText().toString().length()<=0) {
+            Toast.makeText(this, Locale.getStringInLocale("enter_quantity_of_milk_produced",this), Toast.LENGTH_LONG).show();
+            return false;
+        }
+        else if(dateET.getText().toString()==null||dateET.getText().toString().length()==0) {
+            Toast.makeText(this,Locale.getStringInLocale("enter_date",this),Toast.LENGTH_LONG).show();
+            return false;
+        }
+        else if(!validateDate()) {
+            return false;
+        }
+        else if(quantityType.equals("Litres") || quantityType.equals("KGs")) {
+            String[] milkingTimesInEN = Locale.getArrayInLocale("milking_times", this, Locale.LOCALE_ENGLISH);
+            if(milkingTimesInEN[timeS.getSelectedItemPosition()].equals("Combined")){
+                for(int i = 0; i < eventConstraints.size(); i++){
+                    EventConstraint currConstraint = eventConstraints.get(i);
+                    if(currConstraint.getEvent().equals(EventConstraint.CONSTRAINT_MILK_MAX_COMBINED)){
+                        if(Integer.parseInt(quantityET.getText().toString()) > currConstraint.getValue()){
+                            Toast.makeText(this, Locale.getStringInLocale("milk_too_much",this),Toast.LENGTH_LONG).show();
+                            return false;
+                        }
+                    }
+                }
+            }
+            else{
+                for(int i = 0; i < eventConstraints.size(); i++){
+                    EventConstraint currConstraint = eventConstraints.get(i);
+                    if(currConstraint.getEvent().equals(EventConstraint.CONSTRAINT_MILK_MAX_SITTING)){
+                        if(Float.parseFloat(quantityET.getText().toString()) > currConstraint.getValue()){
+                            Toast.makeText(this, Locale.getStringInLocale("milk_too_much",this),Toast.LENGTH_LONG).show();
+                            return false;
+                        }
+                    }
+                }
+            }
+
+            /*if(Integer.parseInt(quantityET.getText().toString()) > 30) {
+                Toast.makeText(this, Locale.getStringInLocale("milk_too_much",this),Toast.LENGTH_LONG).show();
+                return false;
+            }*/
+        }
+        /*else if(quantityType.equals("Cups")) {
+            if(Integer.parseInt(quantityET.getText().toString()) > (30*3.3)) {
+                Toast.makeText(this, Locale.getStringInLocale("milk_too_much",this),Toast.LENGTH_LONG).show();
+                return false;
+            }
+        }*/
+
+        if(cowS.getSelectedItemPosition() != -1){
+            Cow selectedCow = farmer.getCows(Cow.SEX_FEMALE).get(cowS.getSelectedItemPosition());
+            if(selectedCow != null){
+
+                for(int i = 0; i < eventConstraints.size(); i++) {
+                    EventConstraint currConstraint = eventConstraints.get(i);
+                    //enforce age constraint
+                    if (currConstraint.getEvent().equals(EventConstraint.CONSTRAINT_MILKING)) {
+                        if (selectedCow.getAgeMilliseconds() < currConstraint.getTimeMilliseconds()) {
+                            Toast.makeText(this, Locale.getStringInLocale("cow_too_young", this), Toast.LENGTH_LONG).show();
+                            return false;
+                        }
+                    }
+                }
+
+                for(int i = 0; i < eventConstraints.size(); i++){
+                    EventConstraint currConstraint = eventConstraints.get(i);
+                    if(currConstraint.getEvent().equals(EventConstraint.CONSTRAINT_MILK_FLACTUATION) && !milkQuantityFine){
+                        //TODO: convert units to whatever farmer uses to measure milk e.g cups
+                        int threshold = currConstraint.getValue();
+                        String thresholdUnits = currConstraint.getUnits();
+
+                        String[] milkingTimesInEN = Locale.getArrayInLocale("milking_times", this, Locale.LOCALE_ENGLISH);
+                        MilkProduction lastMP = selectedCow.getLastMilking(milkingTimesInEN[timeS.getSelectedItemPosition()]);
+                        if(lastMP.getDate().length()>0){//date set. means this object is not an empty object
+                            try {
+                                long lastMilking = lastMP.getDateMilliseconds();
+                                Date currMilkingDate = new SimpleDateFormat(dateFormat, java.util.Locale.ENGLISH).parse(dateET.getText().toString());
+                                long currMilking = currMilkingDate.getTime();
+
+                                int dayDiff = (int)Math.abs((currMilking - lastMilking)/86400000);
+                                float yieldDiff = Math.abs(Float.parseFloat(quantityET.getText().toString()) - lastMP.getQuantity());
+
+                                if(dayDiff != 0) {
+                                    float diff = yieldDiff / dayDiff;//spread the difference in yield among the days passed
+
+                                    if(diff  > threshold){
+                                        DialogInterface.OnClickListener onClickListener = new DialogInterface.OnClickListener() {
+                                            @Override
+                                            public void onClick(DialogInterface dialog, int which) {
+                                                if(which==DialogInterface.BUTTON_POSITIVE){
+                                                    dialog.dismiss();
+                                                    milkQuantityFine = true;
+                                                    milkFluctuation = true;
+                                                    Toast.makeText(AddMilkProductionActivity.this, Locale.getStringInLocale("press_add_again", AddMilkProductionActivity.this), Toast.LENGTH_LONG).show();
+                                                }
+                                                else{
+                                                    dialog.cancel();
+                                                    milkFluctuation = false;
+                                                    milkQuantityFine = false;
+                                                }
+                                            }
+                                        };
+                                        AlertDialog milkFluctuationDialog = Utils.createMilkFluctuationDialog(this, onClickListener);
+                                        milkFluctuationDialog.show();
+                                        return false;
+                                    }
+                                }
+                            }
+                            catch (Exception e){
+                                e.printStackTrace();
+                            }
+                        }
+                        milkQuantityFine = true;
+                    }
+                    //check for drastic flactuation in milk production
+                }
+            }
+        }
+
+       /* if(noMilkingET.getText().toString()==null || noMilkingET.getText().toString().trim().length()==0) {
+            Toast.makeText(this, Locale.getStringInLocale("enter_number_times_cow_milked",this),Toast.LENGTH_LONG).show();
+            return false;
+        }
+        else if(Integer.parseInt(noMilkingET.getText().toString())>10) {
+            Toast.makeText(this, Locale.getStringInLocale("milking_times_too_much",this), Toast.LENGTH_LONG).show();
+            return false;
+        }*/
+        return true;
+    }
+
+    private boolean validateDate() {
+        try {
+            Date dateEntered=new SimpleDateFormat(dateFormat, java.util.Locale.ENGLISH).parse(dateET.getText().toString());
+            Date today=new Date();
+            long milisecondDifference = today.getTime() - dateEntered.getTime();
+            long days = milisecondDifference / 86400000;
+            if((today.getTime()-dateEntered.getTime())<0) {
+                Toast.makeText(this,Locale.getStringInLocale("date_in_future",this),Toast.LENGTH_LONG).show();
+                return false;
+            }
+            else if(days > 15) {//more than 15 days
+                Toast.makeText(this,Locale.getStringInLocale("milk_data_too_old",this),Toast.LENGTH_LONG).show();
+                return false;
+            }
+            else {
+                return true;
+            }
+        }
+        catch (ParseException e) {
+            e.printStackTrace();
+            return false;
+        }
+    }
+
+    private void fetchCowIdentifiers() {
+        CowIdentifierThread cowIdentifierThread=new CowIdentifierThread();
+        TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
+        cowIdentifierThread.execute(telephonyManager.getSimSerialNumber());
+    }
+
+    private void setCowIdentifiers(String[] cowArray) {
+        if(cowS!=null)
+        {
+            ArrayAdapter<String> cowsArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_dropdown_item,cowArray);
+            cowsArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+            cowS.setAdapter(cowsArrayAdapter);
+        }
+    }
+
+    private class MilkProductionDataAdditionThread extends AsyncTask<String, Integer, Boolean>
+    {
+        private ProgressDialog progressDialog;
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(AddMilkProductionActivity.this, "",Locale.getStringInLocale("loading_please_wait",AddMilkProductionActivity.this), true);
+        }
+
+        @Override
+        protected Boolean doInBackground(String... params) {
+            Log.d(TAG, "at milkProductionDataAdditionThread");
+            JSONObject jsonObject=new JSONObject();
+            try
+            {
+                jsonObject.put("simCardSN",params[0]);
+                jsonObject.put("cowName",params[1]);
+                jsonObject.put("cowEarTagNumber",params[2]);
+                jsonObject.put("time",params[3]);
+                jsonObject.put("quantity",params[4]);
+                jsonObject.put("quantityType",params[5]);
+                jsonObject.put("date", params[6]);
+                jsonObject.put("fluctuation", params[7]);
+                /*jsonObject.put("noMilkingTimes",params[7]);
+                jsonObject.put("calfSuckling",params[8]);*/
+                //String result=DataHandler.sendDataToServer(AddMilkProductionActivity.this, jsonObject.toString(),DataHandler.FARMER_ADD_MILK_PRODUCTION_URL, true);
+                boolean result=DataHandler.cacheRequest(AddMilkProductionActivity.this, jsonObject.toString(),DataHandler.FARMER_ADD_MILK_PRODUCTION_URL);
+                Log.d(TAG,"data sent to server, result = "+result);
+                return result;
+            }
+            catch (JSONException e)
+            {
+                e.printStackTrace();
+            }
+            return null;
+        }
+
+        @Override
+        protected void onPostExecute(Boolean result)
+        {
+            super.onPostExecute(result);
+            progressDialog.dismiss();
+            if(result==null || result == false) {
+                Toast.makeText(AddMilkProductionActivity.this, Locale.getStringInLocale("something_went_wrong_try_again", AddMilkProductionActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result == true) {
+                Toast.makeText(AddMilkProductionActivity.this,Locale.getStringInLocale("event_successfully_recorded", AddMilkProductionActivity.this), Toast.LENGTH_LONG).show();
+
+                clearEditTextDataCache();
+
+                Intent intent = new Intent(AddMilkProductionActivity.this, MilkProductionActivity.class);
+                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+                startActivity(intent);
+            }
+            /*else if(result.equals(DataHandler.DATA_ERROR)) {
+                Toast.makeText(AddMilkProductionActivity.this, Locale.getStringInLocale("production_for_time_already_exists", AddMilkProductionActivity.this), Toast.LENGTH_LONG).show();
+            }*/
+        }
+    }
+
+    private class CowIdentifierThread extends AsyncTask<String,Integer,Farmer>
+    {
+        private ProgressDialog progressDialog;
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(AddMilkProductionActivity.this, "",Locale.getStringInLocale("loading_please_wait", AddMilkProductionActivity.this), true);
+        }
+
+        @Override
+        protected Farmer doInBackground(String... params)
+        {
+            Farmer farmer = DataHandler.getFarmerData(AddMilkProductionActivity.this);
+            eventConstraints = DataHandler.getEventConstraints(AddMilkProductionActivity.this);
+            return farmer;
+        }
+
+        @Override
+        protected void onPostExecute(Farmer farmer)
+        {
+            super.onPostExecute(farmer);
+            progressDialog.dismiss();
+            if(farmer == null ){
+                Toast.makeText(AddMilkProductionActivity.this, Locale.getStringInLocale("unable_to_fetch_cached_data", AddMilkProductionActivity.this),Toast.LENGTH_LONG).show();
+            }
+            else{
+                AddMilkProductionActivity.this.farmer = farmer;
+
+                //get cow names and ear tag numbers
+                List<Cow> allCows = farmer.getCows(Cow.SEX_FEMALE);
+                List<Cow> cows = new ArrayList<Cow>();
+                for(int i = 0; i < allCows.size(); i++){
+                    Cow currCow = allCows.get(i);
+                    if(currCow.getMilkingStatusCode().equals(Cow.MILKING_S_ADULT_MILKING)){
+                        cows.add(currCow);
+                    }
+                }
+
+                String[] cowArray=new String[cows.size()];
+                String[] earTagArray=new String[cows.size()];
+                for(int i=0;i<cows.size();i++) {
+                    cowArray[i]=cows.get(i).getName();
+                    earTagArray[i]=cows.get(i).getEarTagNumber();
+                }
+
+                if(cowArray.length==0) {
+                    Toast.makeText(AddMilkProductionActivity.this, Locale.getStringInLocale("you_do_not_have_female_cows", AddMilkProductionActivity.this),Toast.LENGTH_LONG).show();
+                }
+
+                AddMilkProductionActivity.this.cowNameArray =cowArray;
+                AddMilkProductionActivity.this.cowEarTagNumberArray=earTagArray;
+                String[] identifierArray=new String[cowArray.length];
+                for (int i=0;i<cowArray.length;i++)
+                {
+                    if(cowArray[i]!=null&&!cowArray[i].equals(""))
+                    {
+                        identifierArray[i]=cowArray[i];
+                    }
+                    else
+                    {
+                        identifierArray[i]=earTagArray[i];
+                    }
+                }
+                setCowIdentifiers(identifierArray);
+            }
+
+        }
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/CowRegistrationActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/CowRegistrationActivity.java
new file mode 100644
index 0000000..8480e80
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/CowRegistrationActivity.java
@@ -0,0 +1,1534 @@
+package org.cgiar.ilri.np.farmer;
+
+import android.app.DatePickerDialog;
+import android.app.Dialog;
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.Intent;
+import android.location.Criteria;
+import android.location.Location;
+import android.location.LocationListener;
+import android.location.LocationManager;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.telephony.TelephonyManager;
+import android.util.Log;
+import android.util.SparseBooleanArray;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.AutoCompleteTextView;
+import android.widget.Button;
+import android.widget.CheckBox;
+import android.widget.CompoundButton;
+import android.widget.DatePicker;
+import android.widget.EditText;
+import android.widget.ListView;
+import android.widget.ScrollView;
+import android.widget.Spinner;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.actionbarsherlock.app.SherlockActivity;
+import com.actionbarsherlock.view.Menu;
+import com.actionbarsherlock.view.MenuInflater;
+import com.actionbarsherlock.view.MenuItem;
+
+import org.cgiar.ilri.np.farmer.backend.DataHandler;
+import org.cgiar.ilri.np.farmer.backend.Locale;
+import org.cgiar.ilri.np.farmer.carrier.Cow;
+import org.cgiar.ilri.np.farmer.carrier.Dam;
+import org.cgiar.ilri.np.farmer.carrier.Farmer;
+import org.cgiar.ilri.np.farmer.carrier.Sire;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+import java.util.List;
+
+public class CowRegistrationActivity extends SherlockActivity implements NPActivity,
+        View.OnClickListener, DatePickerDialog.OnDateSetListener, ListView.OnItemClickListener,
+        Spinner.OnItemSelectedListener, View.OnFocusChangeListener, LocationListener, CheckBox.OnCheckedChangeListener, View.OnLongClickListener
+{
+    private boolean cacheData;
+
+    public static final String TAG="CowRegistrationActivity";
+    public static final String KEY_INDEX="index";
+    public static final String KEY_NUMBER_OF_COWS="numberOfCows";
+    private final String dateFormat="dd/MM/yyyy";
+    private TextView nameETNHintTV;
+    private TextView nameTV;
+    private EditText nameET;
+    private TextView earTagNumberTV;
+    private EditText earTagNumberET;
+    private TextView ageOrDOBHintTV;
+    private TextView ageTV;
+    private Spinner ageS;
+    private EditText ageET;
+    private TextView dateOfBirthTV;
+    private EditText dateOfBirthET;
+    private TextView breedTV;
+    private EditText breedET;
+    private TextView anotherBreedTV;
+    private AutoCompleteTextView breedACTV;
+    private TextView sexTV;
+    private Spinner sexS;
+    private TextView milkingStatusTV;
+    private Spinner milkingStatusS;
+    private TextView inCalfStatusTV;
+    private Spinner inCalfStatusS;
+    private TextView deformityTV;
+    private EditText deformityET;
+    private TextView serviceTypeTV;
+    private Spinner serviceTypeS;
+    private TextView sireTV;
+    private Spinner sireS;
+    private AutoCompleteTextView sireACTV;
+    private TextView sireOwnerTV;
+    private Spinner sireOwnerS;
+    private TextView sireOwnerNameTV;
+    private EditText sireOwnerNameET;
+    private TextView strawNumberTV;
+    private EditText strawNumberET;
+    private TextView damTV;
+    private Spinner damS;
+    private AutoCompleteTextView damACTV;
+    private TextView embryoNumberTV;
+    private EditText embryoNumberET;
+    private TextView countryOfOriginTV;
+    private AutoCompleteTextView countryOfOriginACTV;
+    private TextView commonCountriesTV;
+    private Spinner commonCountriesS;
+    private Button previousButton;
+    private Button nextButton;
+    private DatePickerDialog datePickerDialog;
+    private Dialog breedDialog;
+    private ScrollView breedDialogSV;
+    private ListView breedLV;
+    private Button dialogBreedOkayB;
+    private Dialog deformityDialog;
+    private ScrollView deformitySV;
+    private ListView deformityLV;
+    private CheckBox noDeformityCB;
+    private EditText specifyET;
+    private Button dialogDeformityOkayB;
+
+    private int index;//index of cow in the list of cows
+    private int numberOfCows;
+    private int selectedBreeds;
+    private String[] breeds;
+    private String[] uncommonBreeds;
+    private String[] deformities;
+    private String deformityOSpecifyText;
+    private Cow thisCow;
+    private Farmer farmer;
+    private List<Cow> validSires;
+    private List<Cow> validDams;
+    private LocationManager locationManager;
+    private int selectedSireOwner;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_cow_registration);
+        //DataHandler.requestPermissionToUseSMS(this);
+
+        cacheData = true;
+
+        Bundle bundle = this.getIntent().getExtras();
+        if(bundle!=null) {
+            index=bundle.getInt(KEY_INDEX);
+            numberOfCows=bundle.getInt(KEY_NUMBER_OF_COWS);
+        }
+        selectedBreeds = 0;
+
+        //init views
+        nameETNHintTV = (TextView) this.findViewById(R.id.name_eta_hint_tv);
+        nameTV=(TextView)this.findViewById(R.id.name_tv);
+        nameET=(EditText)this.findViewById(R.id.name_et);
+        earTagNumberTV=(TextView)this.findViewById(R.id.ear_tag_number_tv);
+        earTagNumberET=(EditText)this.findViewById(R.id.ear_tag_number_et);
+        ageOrDOBHintTV = (TextView) this.findViewById(R.id.age_or_dob_hint_tv);
+        ageTV=(TextView)this.findViewById(R.id.age_tv);
+        ageS=(Spinner)this.findViewById(R.id.age_s);
+        ageET=(EditText)this.findViewById(R.id.age_et);
+        dateOfBirthTV=(TextView)this.findViewById(R.id.date_of_birth_tv);
+        //dateOfBirthTV.setVisibility(TextView.GONE); //date of birth appears not to be necessary
+        dateOfBirthET=(EditText)this.findViewById(R.id.date_of_birth_et);
+        dateOfBirthET.setOnFocusChangeListener(this);
+        dateOfBirthET.setOnClickListener(this);
+        dateOfBirthET.setOnLongClickListener(this);
+        //dateOfBirthET.setVisibility(TextView.GONE); //date of birth appears not to be necessary
+        breedTV=(TextView)this.findViewById(R.id.breed_tv);
+        breedET=(EditText)this.findViewById(R.id.breed_et);
+        breedET.setOnFocusChangeListener(this);
+        breedET.setOnClickListener(this);
+        anotherBreedTV = (TextView)this.findViewById(R.id.another_breed_tv);
+        breedACTV = (AutoCompleteTextView)this.findViewById(R.id.breed_actv);
+        sexTV=(TextView)this.findViewById(R.id.sex_tv);
+        sexS=(Spinner)this.findViewById(R.id.sex_s);
+        sexS.setOnItemSelectedListener(this);
+        milkingStatusTV = (TextView)this.findViewById(R.id.milking_status_tv);
+        milkingStatusS = (Spinner)this.findViewById(R.id.milking_status_s);
+        inCalfStatusTV = (TextView)this.findViewById(R.id.in_calf_status_tv);
+        inCalfStatusS = (Spinner)this.findViewById(R.id.in_calf_status_s);
+        deformityTV=(TextView)this.findViewById(R.id.deformity_tv);
+        deformityET=(EditText)this.findViewById(R.id.deformity_et);
+        deformityET.setOnFocusChangeListener(this);
+        deformityET.setOnClickListener(this);
+        serviceTypeTV = (TextView)this.findViewById(R.id.service_type_tv);
+        serviceTypeS = (Spinner)this.findViewById(R.id.service_type_s);
+        serviceTypeS.setOnItemSelectedListener(this);
+        sireTV = (TextView)this.findViewById(R.id.sire_tv);
+        sireS = (Spinner)this.findViewById(R.id.sire_s);
+        sireACTV = (AutoCompleteTextView)this.findViewById(R.id.sire_actv);
+        sireOwnerTV = (TextView)this.findViewById(R.id.sire_owner_tv);
+        sireOwnerS = (Spinner)this.findViewById(R.id.sire_owner_s);
+        sireOwnerS.setOnItemSelectedListener(this);
+        sireOwnerNameTV = (TextView)this.findViewById(R.id.sire_owner_name_tv);
+        sireOwnerNameET = (EditText)this.findViewById(R.id.sire_owner_name_et);
+        strawNumberTV = (TextView)this.findViewById(R.id.straw_number_tv);
+        strawNumberET = (EditText)this.findViewById(R.id.straw_number_et);
+        damTV = (TextView)this.findViewById(R.id.dam_tv);
+        damS = (Spinner)this.findViewById(R.id.dam_s);
+        damACTV = (AutoCompleteTextView)this.findViewById(R.id.dam_actv);
+        embryoNumberTV = (TextView)this.findViewById(R.id.embryo_number_tv);
+        embryoNumberET = (EditText)this.findViewById(R.id.embryo_number_et);
+        countryOfOriginTV = (TextView)this.findViewById(R.id.country_of_origin_tv);
+        countryOfOriginACTV = (AutoCompleteTextView)this.findViewById(R.id.country_of_origin_actv);
+        commonCountriesTV = (TextView)this.findViewById(R.id.common_countries_tv);
+        commonCountriesS = (Spinner)this.findViewById(R.id.common_countries_s);
+        commonCountriesS.setOnItemSelectedListener(this);
+        previousButton = (Button)this.findViewById(R.id.previous_button);
+        previousButton.setOnClickListener(this);
+        nextButton = (Button)this.findViewById(R.id.next_button);
+        nextButton.setOnClickListener(this);
+        breedDialog=new Dialog(this);
+        breedDialog.setContentView(R.layout.dialog_breed);
+        dialogBreedOkayB=(Button)breedDialog.findViewById(R.id.dialog_breed_okay_b);
+        dialogBreedOkayB.setOnClickListener(this);
+        breedDialogSV=(ScrollView)breedDialog.findViewById(R.id.dialog_breed_sv);
+
+        int activityHeight = this.getResources().getDisplayMetrics().heightPixels;
+        breedDialogSV.getLayoutParams().height = (int)(activityHeight * 0.70);
+
+        breedLV=(ListView)breedDialog.findViewById(R.id.breed_lv);
+        breedLV.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
+        breedLV.setOnItemClickListener(this);
+        deformityDialog =new Dialog(this);
+        deformityDialog.setContentView(R.layout.dialog_deformity);
+        deformitySV = (ScrollView)deformityDialog.findViewById(R.id.deformity_sv);
+
+        deformitySV.getLayoutParams().height = (int)(activityHeight * 0.70);
+
+        deformityLV =(ListView) deformityDialog.findViewById(R.id.deformity_lv);
+        deformityLV.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
+        deformityLV.setOnItemClickListener(this);
+        specifyET=(EditText)deformityDialog.findViewById(R.id.specify_et);
+        noDeformityCB = (CheckBox)deformityDialog.findViewById(R.id.no_deformity_cb);
+        noDeformityCB.setOnCheckedChangeListener(this);
+        dialogDeformityOkayB =(Button) deformityDialog.findViewById(R.id.dialog_deformity_okay_b);
+        dialogDeformityOkayB.setOnClickListener(this);
+
+        initTextInViews();
+    }
+
+
+
+    public boolean onCreateOptionsMenu(Menu menu) {
+        MenuInflater inflater = getSupportMenuInflater();
+        inflater.inflate(R.menu.cow_registration, menu);
+        return true;
+    }
+
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle item selection
+        if(Language.processLanguageMenuItemSelected(this, this, item)){
+            return true;
+        }
+        return false;
+    }
+
+    private void cacheEditTextData(){
+        if(cacheData) {
+            Log.i(TAG, "Edit text data cached");
+            //Incase the activity is hidden partially/fully save the data in edittexts
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_NAME, nameET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_EAR_TAG_NUMBER, earTagNumberET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_AGE, ageET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DATE_OF_BIRTH, dateOfBirthET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_BREED, breedET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_BREED_OTHER, breedACTV.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DEFORMITY, deformityET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_STRAW_NUMBER, strawNumberET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DAM, damACTV.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_SIRE, sireACTV.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_EMBRYO_NUMBER, embryoNumberET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_COUNTRY_OF_ORIGIN, countryOfOriginACTV.getText().toString());
+        }
+        else{
+            Log.i(TAG, "Edit text data NOT cached");
+        }
+    }
+
+    private void restoreEditTextData(){
+        Log.i(TAG, "Edit text data restored");
+        //incase the activity was hidden partially for a moment, restore what the user had already entered
+        nameET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_NAME, ""));
+        earTagNumberET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_EAR_TAG_NUMBER, ""));
+        ageET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_AGE, ""));
+        dateOfBirthET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_DATE_OF_BIRTH, ""));
+        breedET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_BREED, ""));
+        breedACTV.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_BREED_OTHER, ""));
+        deformityET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_DEFORMITY, ""));
+        strawNumberET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_STRAW_NUMBER, ""));
+        damACTV.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_DAM, ""));
+        sireACTV.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_SIRE, ""));
+        embryoNumberET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_EMBRYO_NUMBER, ""));
+        countryOfOriginACTV.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_COUNTRY_OF_ORIGIN, ""));
+    }
+
+    private void clearEditTextDataCache(){
+        Log.i(TAG, "Edit text cache cleared");
+
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_NAME, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_EAR_TAG_NUMBER, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_AGE, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DATE_OF_BIRTH, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_BREED, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_BREED_OTHER, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DEFORMITY, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_STRAW_NUMBER, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DAM, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_SIRE, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_EMBRYO_NUMBER, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_COUNTRY_OF_ORIGIN, "");
+
+        cacheData = false;
+    }
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+
+        cacheEditTextData();
+
+        if(locationManager!=null) {
+            locationManager.removeUpdates(this);
+        }
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        Bundle bundle=this.getIntent().getExtras();
+        if(bundle != null) {
+            farmer=bundle.getParcelable(Farmer.PARCELABLE_KEY);
+            if(farmer!=null){
+                if(farmer.getMode().equals(Farmer.MODE_NEW_COW_REGISTRATION)) {
+                    previousButton.setVisibility(Button.INVISIBLE);
+                }
+                thisCow = farmer.getCow(index);
+                if(thisCow != null) {
+                    nameET.setText(thisCow.getName());
+                    earTagNumberET.setText(thisCow.getEarTagNumber());
+                    dateOfBirthET.setText(thisCow.getDateOfBirth());
+                    ageET.setText((thisCow.getAge()==-1) ? "":String.valueOf(thisCow.getAge()));
+                    String[] ageTypesInEN = Locale.getArrayInLocale("age_type_array",this,Locale.LOCALE_ENGLISH);
+                    for(int i = 0; i < ageTypesInEN.length; i++) {
+                        if(ageTypesInEN[i].equals("Days") && thisCow.getAgeType().equals(Cow.AGE_TYPE_DAY)) {
+                            ageS.setSelection(i);
+                        }
+                        else if(ageTypesInEN[i].equals("Months") && thisCow.getAgeType().equals(Cow.AGE_TYPE_MONTH)) {
+                            ageS.setSelection(i);
+                        }
+                        else if(ageTypesInEN[i].equals("Years") && thisCow.getAgeType().equals(Cow.AGE_TYPE_YEAR)) {
+                            ageS.setSelection(i);
+                        }
+                    }
+                    List<String> savedBreeds=thisCow.getBreeds(this);//returns breeds in current locale
+                    Log.d(TAG, "Cow breeds are "+savedBreeds);
+                    String breed="";
+                    for (int i=0;i<savedBreeds.size();i++) {
+                        if(i==0) {
+                            breed=savedBreeds.get(i);
+                        }
+                        else {
+                            breed=breed+", "+savedBreeds.get(i);
+                        }
+                        Log.d(TAG, "current breed index =  "+String.valueOf(i));
+                        Log.d(TAG, "saved breeds length =  "+String.valueOf(savedBreeds.size()));
+                        if(savedBreeds.get(i).equals(breeds[breeds.length-1])){
+                            breedACTV.setText(thisCow.getOtherBreed(this));//returns other breed in current locale
+                            anotherBreedTV.setVisibility(TextView.VISIBLE);
+                            breedACTV.setVisibility(AutoCompleteTextView.VISIBLE);
+                        }
+                    }
+                    breedET.setText(breed);
+                    String[] sexInEN = Locale.getArrayInLocale("sex_array", this, Locale.LOCALE_ENGLISH);
+                    for(int i = 0; i < sexInEN.length; i++) {
+                        if(sexInEN[i].equals("Female") && thisCow.getSex().equals(Cow.SEX_FEMALE)) {
+                            sexS.setSelection(i);
+                            toggleFemaleCowViewsVisibility();
+                            String[] milkingStatusInEN = Locale.getArrayInLocale("cow_status_array", this, Locale.LOCALE_ENGLISH);
+                            String[] inCalfArrayInEN = Locale.getArrayInLocale("cow_in_calf_array", this, Locale.LOCALE_ENGLISH);
+                            for(int j = 0; j < milkingStatusInEN.length; j++){
+                                Log.d(TAG, " ********** Saved milking status = "+thisCow.getMilkingStatus());
+                                if(milkingStatusInEN[j].equals(thisCow.getMilkingStatus())){
+                                    milkingStatusS.setSelection(j);
+                                }
+                            }
+                            for(int j = 0; j < inCalfArrayInEN.length; j++){
+                                if(inCalfArrayInEN[j].equals(Cow.COW_IN_CALF) && thisCow.isInCalf()){
+                                    inCalfStatusS.setSelection(j);
+                                }
+                                else if(inCalfArrayInEN[j].equals(Cow.COW_NOT_IN_CALF) && !thisCow.isInCalf()){
+                                    inCalfStatusS.setSelection(j);
+                                }
+                            }
+
+                        }
+                        else if(sexInEN[i].equals("Male") && thisCow.getSex().equals(Cow.SEX_MALE)) {
+                            sexS.setSelection(i);
+                        }
+                    }
+                    List<String> savedDeformities=thisCow.getDeformities(this);//returns deformities in current locale
+                    String deformity="";
+                    for (int i=0;i<savedDeformities.size();i++) {
+                        if(i==0) {
+                            deformity=savedDeformities.get(i);
+                        }
+                        else {
+                            deformity=deformity+", "+savedDeformities.get(i);
+                        }
+                        if(savedDeformities.get(i).equals(deformities[deformities.length-1])) {
+                            deformityOSpecifyText = thisCow.getOtherDeformity();
+                        }
+                    }
+                    deformityET.setText(deformity);
+
+                    if(farmer.getMode().equals(Farmer.MODE_INITIAL_REGISTRATION)) {
+                        if(farmer.isInFarm()){
+                            getGPSCoordinates();
+                        }
+
+                        List<Cow> allCows = farmer.getCows();
+                        validSires = new ArrayList<Cow>();
+                        validSires.add(new Cow(false));
+                        List<String> validSireNames = new ArrayList<String>();
+                        validSireNames.add("");
+                        int sireSelection = 0;
+
+                        validDams = new ArrayList<Cow>();
+                        validDams.add(new Cow(false));
+                        List<String> validDamNames = new ArrayList<String>();
+                        int damSelection = -1;
+                        validDamNames.add("");
+                        for(int i = 0; i < allCows.size(); i++) {
+                            if(i != index) {
+                                if(allCows.get(i).getEarTagNumber() != null && allCows.get(i).getEarTagNumber().length() > 0 && allCows.get(i).getSex().equals(Cow.SEX_MALE)) {
+                                    validSires.add(allCows.get(i));
+                                    validSireNames.add(allCows.get(i).getEarTagNumber()+" ("+allCows.get(i).getName()+")");
+                                    if(thisCow.getServiceType().equals(Cow.SERVICE_TYPE_BULL)) {
+                                        if(thisCow.getSire().getEarTagNumber().equals(allCows.get(i).getEarTagNumber())) {
+                                            sireSelection = validSires.size() - 1;
+                                        }
+                                    }
+                                }
+                                else if(allCows.get(i).getEarTagNumber() != null && allCows.get(i).getEarTagNumber().length() > 0 && allCows.get(i).getSex().equals(Cow.SEX_FEMALE)) {
+                                    validDams.add(allCows.get(i));
+                                    validDamNames.add(allCows.get(i).getEarTagNumber()+" ("+allCows.get(i).getName()+")");
+                                    if(thisCow.getServiceType().equals(Cow.SERVICE_TYPE_BULL) || thisCow.getServiceType().equals(Cow.SERVICE_TYPE_AI)) {
+                                        if(thisCow.getDam().getEarTagNumber().equals(allCows.get(i).getEarTagNumber())) {
+                                            damSelection = validDams.size() - 1;
+                                        }
+                                    }
+                                }
+                            }
+                        }
+
+                        selectedSireOwner = -1;
+                        String[] sireOwners = Locale.getArrayInLocale("bull_owners", this, Locale.LOCALE_ENGLISH);
+                        for(int i = 0; i < sireOwners.length; i++){
+                            if(sireOwners[i].equals(thisCow.getSire().getOwnerType())){
+                                selectedSireOwner = i;
+                            }
+                        }
+                        sireOwnerNameET.setText(thisCow.getSire().getOwner());
+
+                        String[] serviceTypesInEN = Locale.getArrayInLocale("service_types",this,Locale.LOCALE_ENGLISH);
+
+                        ArrayAdapter<String> siresArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,validSireNames);
+                        siresArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+                        sireS.setAdapter(siresArrayAdapter);
+                        sireS.setSelection(sireSelection);
+
+                        ArrayAdapter<String> damsArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,validDamNames);
+                        damsArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+                        damS.setAdapter(damsArrayAdapter);
+                        if(damSelection != -1)
+                            damS.setSelection(damSelection);
+
+                        ArrayAdapter<String> damsACTVAdapter = new ArrayAdapter<String>(this,android.R.layout.select_dialog_item,validDamNames);
+                        damACTV.setAdapter(damsACTVAdapter);
+                        if(damSelection != -1)
+                            damACTV.setText(validDamNames.get(damSelection));
+
+                        ArrayAdapter<String> siresACTVAdapter = new ArrayAdapter<String>(this, android.R.layout.select_dialog_item, validSireNames);
+                        sireACTV.setAdapter(siresACTVAdapter);
+                        if(sireSelection != -1)
+                            sireACTV.setText(validSireNames.get(sireSelection));
+
+                        for(int i = 0; i < serviceTypesInEN.length; i++) {
+                            if(serviceTypesInEN[i].equals("Bull") && thisCow.getServiceType().equals(Cow.SERVICE_TYPE_BULL)) {
+                                serviceTypeS.setSelection(i);
+                            }
+                            else if(serviceTypesInEN[i].equals("Artificial Insemination") && thisCow.getServiceType().equals(Cow.SERVICE_TYPE_AI)) {
+                                serviceTypeS.setSelection(i);
+                                strawNumberET.setText(thisCow.getSire().getStrawNumber());
+                            }
+                            else if(serviceTypesInEN[i].equals("Embryo Transfer") && thisCow.getServiceType().equals(Cow.SERVICE_TYPE_ET)) {
+                                serviceTypeS.setSelection(i);
+                                embryoNumberET.setText(thisCow.getDam().getEmbryoNumber());
+                            }
+                        }
+                    }
+                    else {
+                        serviceTypeTV.setVisibility(TextView.GONE);
+                        serviceTypeS.setVisibility(Spinner.GONE);
+                        sireTV.setVisibility(TextView.GONE);
+//                        sireS.setVisibility(Spinner.GONE);
+                        strawNumberTV.setVisibility(TextView.GONE);
+                        strawNumberET.setVisibility(EditText.GONE);
+                        damTV.setVisibility(TextView.GONE);
+//                        damS.setVisibility(Spinner.GONE);
+                        sireACTV.setVisibility(AutoCompleteTextView.GONE);
+                        sireOwnerTV.setVisibility(TextView.GONE);
+                        sireOwnerS.setVisibility(Spinner.GONE);
+                        sireOwnerNameTV.setVisibility(TextView.GONE);
+                        sireOwnerNameET.setVisibility(EditText.GONE);
+                        damACTV.setVisibility(AutoCompleteTextView.GONE);
+                        embryoNumberTV.setVisibility(TextView.GONE);
+                        embryoNumberET.setVisibility(EditText.GONE);
+                    }
+
+                    countryOfOriginACTV.setText(thisCow.getCountryOfOrigin());
+
+                    if(thisCow.getMode().equals(Cow.MODE_BORN_CALF_REGISTRATION)) {
+                        this.setTitle(Locale.getStringInLocale("calf_registration",this));
+                        setAgeFromDate(thisCow.getDateOfBirth());
+                        thisCow.setAge(Integer.parseInt(ageET.getText().toString()));
+                        if(ageTypesInEN[ageS.getSelectedItemPosition()].equals("Days")) {
+                            thisCow.setAgeType(Cow.AGE_TYPE_DAY);
+                        }
+                        else if(ageTypesInEN[ageS.getSelectedItemPosition()].equals("Months")) {
+                            thisCow.setAgeType(Cow.AGE_TYPE_MONTH);
+                        }
+                        else if(ageTypesInEN[ageS.getSelectedItemPosition()].equals("Years")) {
+                            thisCow.setAgeType(Cow.AGE_TYPE_YEAR);
+                        }
+                    }
+                }
+                else {
+                    Log.d(TAG,"Cow object is null");
+                }
+            }
+            else {
+                Log.d(TAG,"Farmer object is null");
+            }
+
+        }
+
+        if(nameET.getText().toString().trim().length() == 0 && earTagNumberET.getText().toString().trim().length() == 0){
+            //means that when the activity paused the last time it did not save data to the cow object. Try to get data from shared preferences
+            restoreEditTextData();
+        }
+    }
+
+    private void getGPSCoordinates() {
+        locationManager=(LocationManager)getSystemService(LOCATION_SERVICE);
+        if(locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
+            //Toast.makeText(this,"gps started",Toast.LENGTH_LONG).show();
+            Criteria criteria=new Criteria();
+            String provider=locationManager.getBestProvider(criteria,false);
+            Location location=locationManager.getLastKnownLocation(provider);
+            locationManager.requestLocationUpdates(provider, 18000, 1000, this);//If farmer  is moving at 200km/h, will still be able to update!
+            if(location!=null)
+            {
+                onLocationChanged(location);
+            }
+        }
+    }
+
+    @Override
+    public boolean onKeyDown(int keyCode, KeyEvent event) {
+        if(keyCode == KeyEvent.KEYCODE_BACK){
+            if(farmer.getMode().equals(Farmer.MODE_INITIAL_REGISTRATION)){
+                Toast.makeText(this,Locale.getStringInLocale("action_not_allowed",this),Toast.LENGTH_LONG).show();
+                return false;
+            }
+        }
+        return super.onKeyDown(keyCode, event);
+    }
+
+    @Override
+    public void initTextInViews() {
+        String title = Locale.getStringInLocale("cow_registration",this)+" "+String.valueOf(index+1);
+        this.setTitle(title);
+
+        nameETNHintTV.setText(" * " + Locale.getStringInLocale("ear_tag_no_or_name", this));
+        nameTV.setText(Locale.getStringInLocale("name",this));
+        earTagNumberTV.setText(Locale.getStringInLocale("ear_tag_number",this));
+
+        ageOrDOBHintTV.setText(" * " + Locale.getStringInLocale("age_or_dob", this));
+
+        ageTV.setText(Locale.getStringInLocale("age",this));
+        int ageTypeArrayID = Locale.getArrayIDInLocale("age_type_array",this);
+        if(ageTypeArrayID!=0){
+            ArrayAdapter<CharSequence> ageTypeArrayAdapter=ArrayAdapter.createFromResource(this, ageTypeArrayID, android.R.layout.simple_spinner_item);
+            ageTypeArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+            ageS.setAdapter(ageTypeArrayAdapter);
+        }
+        dateOfBirthTV.setText(Locale.getStringInLocale("date_of_birth",this));
+        breedTV.setText(Locale.getStringInLocale("breed",this));
+        anotherBreedTV.setText(Locale.getStringInLocale("extra_breed", this));
+        breedACTV.setHint(Locale.getStringInLocale("specify_breed_here", this));
+        sexTV.setText(" * "+Locale.getStringInLocale("sex",this));
+        int sexArrayID = Locale.getArrayIDInLocale("sex_array",this);
+        if(sexArrayID!=0) {
+            ArrayAdapter<CharSequence> sexArrayAdapter=ArrayAdapter.createFromResource(this, sexArrayID, android.R.layout.simple_spinner_item);
+            sexArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+            sexS.setAdapter(sexArrayAdapter);
+        }
+
+        milkingStatusTV.setText(" * " + Locale.getStringInLocale("cow_status", this));
+        inCalfStatusTV.setText(" * " + Locale.getStringInLocale("cow_in_calf", this));
+        ArrayAdapter<CharSequence> milkingStatusAdapter = ArrayAdapter.createFromResource(this, Locale.getArrayIDInLocale("cow_status_array", this), android.R.layout.simple_spinner_item);
+        milkingStatusAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        milkingStatusS.setAdapter(milkingStatusAdapter);
+
+        ArrayAdapter<CharSequence> inCalfAdapter = ArrayAdapter.createFromResource(this, Locale.getArrayIDInLocale("cow_in_calf_array", this), android.R.layout.simple_spinner_item);
+        inCalfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        inCalfStatusS.setAdapter(inCalfAdapter);
+
+        deformityTV.setText(Locale.getStringInLocale("deformity",this));
+        serviceTypeTV.setText(Locale.getStringInLocale("service_type_used",this));
+        int serviceTypesSireArrayID = Locale.getArrayIDInLocale("service_types",this);
+        if(serviceTypesSireArrayID!=0){
+            ArrayAdapter<CharSequence> serviceTypesAdapter = ArrayAdapter.createFromResource(this,serviceTypesSireArrayID,android.R.layout.simple_spinner_item);
+            serviceTypesAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+            serviceTypeS.setAdapter(serviceTypesAdapter);
+        }
+
+        sireTV.setText(Locale.getStringInLocale("sire",this));
+        sireOwnerTV.setText(Locale.getStringInLocale("sire_owner", this));
+
+        int sireOwnersID = Locale.getArrayIDInLocale("bull_owners", this);
+        if(sireOwnersID != 0){
+            ArrayAdapter<CharSequence> sireOwnersAdapter = ArrayAdapter.createFromResource(this,sireOwnersID,android.R.layout.simple_spinner_item);
+            sireOwnersAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+            sireOwnerS.setAdapter(sireOwnersAdapter);
+
+            if(selectedSireOwner != -1){
+                sireOwnerS.setSelection(selectedSireOwner);
+            }
+        }
+
+        sireOwnerNameTV.setText(Locale.getStringInLocale("name_sire_owner", this));
+        sireOwnerNameET.setHint(Locale.getStringInLocale("name_of_other_farmer_or_group", this));
+        damTV.setText(Locale.getStringInLocale("dam",this));
+        strawNumberTV.setText(Locale.getStringInLocale("straw_number",this));
+        embryoNumberTV.setText(Locale.getStringInLocale("embryo_number",this));
+        countryOfOriginTV.setText(Locale.getStringInLocale("other_countries",this));
+        commonCountriesTV.setText(Locale.getStringInLocale("country_of_origin",this));
+        previousButton.setText(Locale.getStringInLocale("previous",this));
+        if(index == (numberOfCows -1)) {
+            nextButton.setText(Locale.getStringInLocale("finish",this));
+        }
+        else {
+            nextButton.setText(Locale.getStringInLocale("next",this));
+        }
+
+        breedDialog.setTitle(Locale.getStringInLocale("breed",this));
+        breeds=Locale.getArrayInLocale("c_breeds_array",this);
+        uncommonBreeds=Locale.getArrayInLocale("uc_breeds_array",this);
+        if(breeds==null) {
+            breeds = new String[1];
+            breeds[0] = "";
+        }
+        ArrayAdapter<String> breedArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,breeds);
+        breedLV.setAdapter(breedArrayAdapter);
+        dialogBreedOkayB.setText(Locale.getStringInLocale("okay",this));
+        int totalBreedSVHeight = 0;
+        for (int i = 0, len = breedArrayAdapter.getCount(); i < len; i++) {
+            View listItem = breedArrayAdapter.getView(i, null, breedLV);
+            //listItem.measure(0, 0);
+            int list_child_item_height = listItem.getLayoutParams().height + breedLV.getDividerHeight();//item height
+            totalBreedSVHeight += list_child_item_height; //
+        }
+        if(totalBreedSVHeight > 0){
+            breedLV.getLayoutParams().height = totalBreedSVHeight;
+            if(breedDialogSV.getLayoutParams().height > (totalBreedSVHeight + dialogBreedOkayB.getLayoutParams().height)){
+                breedDialogSV.getLayoutParams().height = totalBreedSVHeight + dialogBreedOkayB.getLayoutParams().height;
+            }
+        }
+        ArrayAdapter<String> uncommonBreedsArrayAdapter = new ArrayAdapter<String>(this, android.R.layout.select_dialog_item, uncommonBreeds);
+        breedACTV.setAdapter(uncommonBreedsArrayAdapter);
+
+
+        deformityDialog.setTitle(Locale.getStringInLocale("deformity",this));
+        deformities=Locale.getArrayInLocale("deformities_array",this);
+        if(deformities==null) {
+            deformities = new String[1];
+            deformities[0] = "";
+        }
+        ArrayAdapter<String> deformityArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,deformities);
+        deformityLV.setAdapter(deformityArrayAdapter);
+        specifyET.setHint(Locale.getStringInLocale("specify", this));
+        noDeformityCB.setText(Locale.getStringInLocale("no_deformity", this));
+        dialogDeformityOkayB.setText(Locale.getStringInLocale("okay",this));
+
+        sireACTV.setHint(Locale.getStringInLocale("enter_sire_etn", this));
+        damACTV.setHint(Locale.getStringInLocale("enter_dam_etn",this));
+
+        ArrayAdapter countryArrayAdapter = ArrayAdapter.createFromResource(this,R.array.countries,android.R.layout.select_dialog_item);
+        countryOfOriginACTV.setAdapter(countryArrayAdapter);
+        countryOfOriginACTV.setHint(Locale.getStringInLocale("specify_other_country", this));
+
+        int totalDeformitySVHeight = 0;
+        for (int i = 0, len = deformityArrayAdapter.getCount(); i < len; i++) {
+            View listItem = deformityArrayAdapter.getView(i, null, deformityLV);
+            //listItem.measure(0, 0);
+            int list_child_item_height = listItem.getLayoutParams().height + deformityLV.getDividerHeight();//item height
+            totalDeformitySVHeight += list_child_item_height; //
+        }
+
+        Log.d(TAG, "Height of no deformity checkbox = "+String.valueOf(noDeformityCB.getLayoutParams().height));
+        Log.d(TAG, "Margin top of deformity checkbox = "+String.valueOf(((ViewGroup.MarginLayoutParams)noDeformityCB.getLayoutParams()).topMargin));
+
+        if(totalDeformitySVHeight > 0){
+            deformityLV.getLayoutParams().height = totalDeformitySVHeight;
+            int svChildrenHeight = totalDeformitySVHeight +
+                    specifyET.getLayoutParams().height +
+                    noDeformityCB.getLayoutParams().height +
+                    ((ViewGroup.MarginLayoutParams)noDeformityCB.getLayoutParams()).topMargin +
+                    dialogDeformityOkayB.getLayoutParams().height +
+                    ((ViewGroup.MarginLayoutParams)dialogDeformityOkayB.getLayoutParams()).topMargin;
+
+            if(deformitySV.getLayoutParams().height > svChildrenHeight){
+                deformitySV.getLayoutParams().height= svChildrenHeight;
+            }
+        }
+
+        ArrayAdapter<CharSequence> commonCountriesArrayAdapter = ArrayAdapter.createFromResource(this,R.array.common_countries,android.R.layout.simple_spinner_item);
+        commonCountriesArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        commonCountriesS.setAdapter(commonCountriesArrayAdapter);
+    }
+
+    @Override
+    public void onClick(View view) {
+        if(view==previousButton) {
+            cacheThisCow();
+            clearEditTextDataCache();//we don't want data on this cow entered on a previous or next cow
+
+            if(this.index > 0){
+                Intent intent=new Intent(CowRegistrationActivity.this, CowRegistrationActivity.class);
+                intent.putExtra(KEY_INDEX,index-1);
+                intent.putExtra(KEY_NUMBER_OF_COWS,numberOfCows);
+                Bundle bundle=new Bundle();
+                bundle.putParcelable(Farmer.PARCELABLE_KEY,farmer);
+                intent.putExtras(bundle);
+                startActivity(intent);
+            }
+            else if(this.index == 0){
+                Intent intent = new Intent(CowRegistrationActivity.this, FarmerRegistrationActivity.class);
+                Bundle bundle=new Bundle();
+                bundle.putParcelable(Farmer.PARCELABLE_KEY, farmer);
+                intent.putExtras(bundle);
+                startActivity(intent);
+            }
+            else{
+                Log.e(TAG, "Current cow index is out of range ("+String.valueOf(this.index)+")");
+            }
+        }
+        else if(view==nextButton) {
+            if(validateInput()) {
+                cacheThisCow();
+                Bundle bundle=new Bundle();
+                bundle.putParcelable(Farmer.PARCELABLE_KEY,farmer);
+
+                clearEditTextDataCache();
+
+                if(index == (numberOfCows-1))//last cow
+                {
+                    Log.d(TAG, farmer.getJsonObject().toString());
+                    sendDataToServer(farmer.getJsonObject());
+                }
+                else
+                {
+                    Intent intent=new Intent(CowRegistrationActivity.this, CowRegistrationActivity.class);
+                    intent.putExtra(KEY_INDEX,index+1);
+                    intent.putExtra(KEY_NUMBER_OF_COWS,numberOfCows);
+                    intent.putExtras(bundle);
+                    startActivity(intent);
+                }
+            }
+        }
+        else if(view==dateOfBirthET) {
+            dateOfBirthETClicked();
+        }
+        else if(view==breedET) {
+            breedETClicked();
+        }
+        else if(view==deformityET) {
+            deformityETClicked();
+        }
+        else if(view==dialogBreedOkayB) {
+            String selectedBreeds="";
+            SparseBooleanArray checkedBreeds=breedLV.getCheckedItemPositions();
+            for (int i=0; i<breedLV.getCount();i++)
+            {
+                if(checkedBreeds.get(i))
+                {
+                    if(!selectedBreeds.equals(""))
+                    {
+                        selectedBreeds=selectedBreeds+", "+breeds[i];
+                    }
+                    else
+                    {
+                        selectedBreeds=breeds[i];
+                    }
+                }
+            }
+            breedET.setText(selectedBreeds);
+            breedDialog.dismiss();
+        }
+        else if(view==dialogDeformityOkayB) {
+            String selectedDeformities="";
+            SparseBooleanArray checkedDeformities=deformityLV.getCheckedItemPositions();
+            for (int i=0; i<deformityLV.getCount();i++) {
+                if(checkedDeformities.get(i)) {
+                    if(!selectedDeformities.equals("")) {
+                        selectedDeformities=selectedDeformities+", "+deformities[i];
+                    }
+                    else {
+                        selectedDeformities=deformities[i];
+                    }
+                }
+            }
+            deformityET.setText(selectedDeformities);
+            deformityDialog.dismiss();
+            deformityOSpecifyText=specifyET.getText().toString();
+        }
+    }
+
+    private void dateOfBirthETClicked() {
+        Date date=null;
+        if(dateOfBirthET.getText().toString().length()>0) {
+            try {
+                date=new SimpleDateFormat(dateFormat, java.util.Locale.ENGLISH).parse(dateOfBirthET.getText().toString());
+            }
+            catch (ParseException e) {
+                e.printStackTrace();
+            }
+        }
+        if(date==null) {
+            date=new Date();
+        }
+        Calendar calendar=new GregorianCalendar();
+        calendar.setTime(date);
+        datePickerDialog=new DatePickerDialog(this,this,calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH));
+        //datePickerDialog=createDialogWithoutDateField(this,calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH));
+        datePickerDialog.show();
+    }
+
+    @Override
+    public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
+        String dateString=String.valueOf(dayOfMonth)+"/"+String.valueOf(monthOfYear+1)+"/"+String.valueOf(year);//TODO: this might be a bug
+        dateOfBirthET.setText(dateString);
+        //setAgeFromDate(dateString);
+    }
+
+    private void setAgeFromDate(String dateString) {
+        Log.d(TAG, "date entered : " + dateString);
+        SimpleDateFormat simpleDateFormat=new SimpleDateFormat(dateFormat);
+        Date enteredDate=new Date();
+        try
+        {
+            enteredDate=simpleDateFormat.parse(dateString);
+        }
+        catch (ParseException e)
+        {
+            e.printStackTrace();
+        }
+        Date today=new Date();
+        Log.d(TAG,"today's date : "+today.toString());
+        long millisecondDifference=today.getTime()-enteredDate.getTime();
+        Log.d(TAG,"millisecond difference : "+String.valueOf(millisecondDifference));
+        String[] ageTypesInEN = Locale.getArrayInLocale("age_type_array",this,Locale.LOCALE_ENGLISH);
+        if(millisecondDifference>0&&millisecondDifference<604800000L)//less than one week
+        {
+            int days=(int)(millisecondDifference/86400000L);
+            ageET.setText(String.valueOf(days));
+            for(int i = 0; i < ageTypesInEN.length; i++) {
+                if(ageTypesInEN[i].equals("Day")) {
+                    ageS.setSelection(i);
+                }
+            }
+        }
+        else if(millisecondDifference>=604800000L&&millisecondDifference<2628000000L)//less than a year
+        {
+            int months=(int)(millisecondDifference/2628000000L);
+            ageET.setText(String.valueOf(months));
+            for(int i = 0; i < ageTypesInEN.length; i++) {
+                if(ageTypesInEN[i].equals("Months")) {
+                    ageS.setSelection(i);
+                }
+            }
+        }
+        else if(millisecondDifference>=31557600000L)//a year or greater
+        {
+            int years=(int)(millisecondDifference/31557600000L);
+            ageET.setText(String.valueOf(years));
+            for(int i = 0; i < ageTypesInEN.length; i++) {
+                if(ageTypesInEN[i].equals("Years")) {
+                    ageS.setSelection(i);
+                }
+            }
+        }
+    }
+
+    private void breedETClicked() {
+        //uncheck everything in listview
+        for (int i=0; i<breedLV.getCount();i++) {
+            breedLV.setItemChecked(i,false);
+        }
+
+        String breedETString=breedET.getText().toString();
+        if(!breedETString.equals(null)||!breedETString.equals(""))
+        {
+            String[] selectedBreeds=breedETString.split(", ");
+            //for all of the breeds check if breed is in selected breeds
+            for(int i=0; i<breeds.length;i++)
+            {
+                String currentBreed=breeds[i];
+                for(int j=0; j<selectedBreeds.length;j++) {
+                    if(currentBreed.equals(selectedBreeds[j])) {
+                        breedLV.setItemChecked(i,true);
+                        break;
+                    }
+                }
+            }
+        }
+        breedDialog.show();
+    }
+
+    @Override
+    public void onItemClick(AdapterView<?> parent, View view, int position, long id)
+    {
+        if(parent==breedLV) {
+            if(breedLV.isItemChecked(position)) {
+                selectedBreeds++;
+            }
+            else {
+                selectedBreeds--;
+            }
+            if(selectedBreeds>4) {
+                breedLV.setItemChecked(position,false);
+                selectedBreeds--;
+                Toast.makeText(this,Locale.getStringInLocale("maximum_of_four_breeds",this),Toast.LENGTH_LONG).show();
+            }
+
+            if(position==breeds.length - 1){//the last item should be other breed
+                if(breedLV.isItemChecked(position)){
+                    breedACTV.setVisibility(AutoCompleteTextView.VISIBLE);
+                    anotherBreedTV.setVisibility(TextView.VISIBLE);
+                }
+                else{
+                    breedACTV.setVisibility(AutoCompleteTextView.GONE);
+                    breedACTV.setText("");
+                    anotherBreedTV.setVisibility(TextView.GONE);
+                }
+            }
+        }
+        else if(parent==deformityLV) {
+            if(position==deformities.length-1){ //last deformity. should be other
+                if(deformityLV.isItemChecked(position)) {
+                    specifyET.setVisibility(EditText.VISIBLE);
+                }
+                else {
+                    specifyET.setVisibility(EditText.GONE);
+                    specifyET.setText("");
+                }
+            }
+
+            noDeformityCB.setChecked(false);
+        }
+    }
+
+    private void deformityETClicked() {
+        //uncheck everything in listview
+        for (int i=0;i<deformityLV.getCount();i++) {
+            deformityLV.setItemChecked(i,false);
+        }
+        String deformityETString=deformityET.getText().toString();
+        if(!deformityETString.equals(null)||!deformityETString.equals("")) {
+            String[] selectedDeformities=deformityETString.split(", ");
+            for (int i=0;i<deformities.length;i++)
+            {
+                String currentDeformity=deformities[i];
+                for (int j=0;j<selectedDeformities.length;j++)
+                {
+                    if(currentDeformity.equals(selectedDeformities[j]))
+                    {
+                        deformityLV.setItemChecked(i,true);
+                        if (i==deformities.length-1)
+                        {
+                            specifyET.setVisibility(EditText.VISIBLE);
+                            specifyET.setText(deformityOSpecifyText);
+                        }
+                        break;
+                    }
+                }
+            }
+        }
+        deformityDialog.show();
+    }
+
+    @Override
+    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
+        if(parent == serviceTypeS) {
+            changeServiceType();
+        }
+        else if(parent == commonCountriesS) {
+            toggleCountryOfOriginVisibility();
+        }
+        else if(parent == sireOwnerS){
+            toggleSireOwnerVisibility();
+        }
+        else if(parent == sexS){
+            toggleFemaleCowViewsVisibility();
+        }
+    }
+
+    private void toggleFemaleCowViewsVisibility(){
+        Log.d(TAG, "Toggling female views");
+        String[] sexInEN = Locale.getArrayInLocale("sex_array", this, Locale.LOCALE_ENGLISH);
+        if(sexInEN[sexS.getSelectedItemPosition()].equals(Cow.SEX_FEMALE)){
+            milkingStatusS.setVisibility(Spinner.VISIBLE);
+            milkingStatusTV.setVisibility(TextView.VISIBLE);
+
+            inCalfStatusS.setVisibility(Spinner.VISIBLE);
+            inCalfStatusTV.setVisibility(TextView.VISIBLE);
+        }
+        else{
+            milkingStatusS.setVisibility(Spinner.GONE);
+            milkingStatusTV.setVisibility(TextView.GONE);
+
+            inCalfStatusS.setVisibility(Spinner.GONE);
+            inCalfStatusTV.setVisibility(TextView.GONE);
+        }
+    }
+
+    private void toggleCountryOfOriginVisibility(){
+        String[] commonCountries = getResources().getStringArray(R.array.common_countries);
+        if(commonCountries[commonCountriesS.getSelectedItemPosition()].equals("Other")) {
+            countryOfOriginACTV.setVisibility(AutoCompleteTextView.VISIBLE);
+            countryOfOriginTV.setVisibility(TextView.VISIBLE);
+            countryOfOriginACTV.setText("");
+        }
+        else {
+            countryOfOriginACTV.setVisibility(AutoCompleteTextView.GONE);
+            countryOfOriginTV.setVisibility(TextView.GONE);
+            countryOfOriginACTV.setText(commonCountries[commonCountriesS.getSelectedItemPosition()]);
+        }
+    }
+
+    private void changeServiceType() {
+        String[] serviceTypesInEN = Locale.getArrayInLocale("service_types", this, Locale.LOCALE_ENGLISH);
+        if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Bull")) {
+            sireTV.setVisibility(TextView.VISIBLE);
+            sireOwnerTV.setVisibility(TextView.VISIBLE);
+            sireOwnerS.setVisibility(Spinner.VISIBLE);
+            toggleSireOwnerVisibility();
+//            sireS.setVisibility(Spinner.VISIBLE);
+            strawNumberTV.setVisibility(TextView.GONE);
+            strawNumberET.setVisibility(EditText.GONE);
+            damTV.setVisibility(TextView.VISIBLE);
+//            damS.setVisibility(Spinner.VISIBLE);
+            damS.setVisibility(Spinner.GONE);
+            damACTV.setVisibility(AutoCompleteTextView.VISIBLE);
+            sireACTV.setVisibility(AutoCompleteTextView.VISIBLE);
+            embryoNumberTV.setVisibility(TextView.GONE);
+            embryoNumberET.setVisibility(EditText.GONE);
+            commonCountriesTV.setVisibility(TextView.VISIBLE);
+            commonCountriesS.setVisibility(Spinner.VISIBLE);
+            toggleCountryOfOriginVisibility();
+        }
+        else if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Artificial Insemination")) {
+            sireTV.setVisibility(TextView.GONE);
+            sireOwnerTV.setVisibility(TextView.GONE);
+            sireOwnerS.setVisibility(Spinner.GONE);
+            sireOwnerNameTV.setVisibility(TextView.GONE);
+            sireOwnerNameET.setVisibility(EditText.GONE);
+//            sireS.setVisibility(Spinner.GONE);
+            strawNumberTV.setVisibility(TextView.VISIBLE);
+            strawNumberET.setVisibility(EditText.VISIBLE);
+            damTV.setVisibility(TextView.VISIBLE);
+//            damS.setVisibility(Spinner.VISIBLE);
+            damS.setVisibility(Spinner.GONE);
+            damACTV.setVisibility(AutoCompleteTextView.VISIBLE);
+            sireACTV.setVisibility(AutoCompleteTextView.GONE);
+            embryoNumberTV.setVisibility(TextView.GONE);
+            embryoNumberET.setVisibility(EditText.GONE);
+            commonCountriesTV.setVisibility(TextView.GONE);
+            commonCountriesS.setVisibility(Spinner.GONE);
+            countryOfOriginTV.setVisibility(TextView.GONE);
+            countryOfOriginACTV.setVisibility(AutoCompleteTextView.GONE);
+        }
+        else if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Embryo Transfer")) {
+            sireTV.setVisibility(TextView.GONE);
+            sireOwnerTV.setVisibility(TextView.GONE);
+            sireOwnerS.setVisibility(Spinner.GONE);
+            sireOwnerNameTV.setVisibility(TextView.GONE);
+            sireOwnerNameET.setVisibility(EditText.GONE);
+//            sireS.setVisibility(Spinner.GONE);
+            strawNumberTV.setVisibility(TextView.GONE);
+            strawNumberET.setVisibility(EditText.GONE);
+            damTV.setVisibility(TextView.GONE);
+            damS.setVisibility(Spinner.GONE);
+            damACTV.setVisibility(AutoCompleteTextView.GONE);
+            sireACTV.setVisibility(AutoCompleteTextView.GONE);
+            embryoNumberTV.setVisibility(TextView.VISIBLE);
+            embryoNumberET.setVisibility(EditText.VISIBLE);
+            commonCountriesTV.setVisibility(TextView.GONE);
+            commonCountriesS.setVisibility(Spinner.GONE);
+            countryOfOriginTV.setVisibility(TextView.GONE);
+            countryOfOriginACTV.setVisibility(AutoCompleteTextView.GONE);
+        }
+    }
+
+    @Override
+    public void onNothingSelected(AdapterView<?> parent) {
+    }
+
+    private boolean validateInput() {
+        String earTagNumberText=earTagNumberET.getText().toString();
+        String nameText=nameET.getText().toString();
+        if((earTagNumberText==null||earTagNumberText.equals("")) && (nameText==null||nameText.equals(""))) {
+            Toast.makeText(this,Locale.getStringInLocale("enter_ear_tag_no_or_name",this),Toast.LENGTH_LONG).show();
+            return false;
+        }
+
+        String[] sexInEN = Locale.getArrayInLocale("sex_array", this, Locale.LOCALE_ENGLISH);
+        if(sexInEN[sexS.getSelectedItemPosition()].equals(Cow.SEX_FEMALE)){
+            String[] inCalfArray = Locale.getArrayInLocale("cow_in_calf_array",this);
+            String[] milkingStatusArray = Locale.getArrayInLocale("cow_status_array",this);
+            if(inCalfStatusS.getSelectedItemPosition() == -1 || inCalfArray[inCalfStatusS.getSelectedItemPosition()].length() == 0){
+                Toast.makeText(this, Locale.getStringInLocale("enter_in_calf_status", this), Toast.LENGTH_LONG).show();
+                return false;
+            }
+            if(milkingStatusS.getSelectedItemPosition() == -1 || milkingStatusArray[milkingStatusS.getSelectedItemPosition()].length() == 0){
+                Toast.makeText(this, Locale.getStringInLocale("enter_milk_status_of_cow", this), Toast.LENGTH_LONG).show();
+                return false;
+            }
+        }
+
+        if(dateOfBirthET.getText().toString().trim().equals("") && ageET.getText().toString().trim().equals("")){
+            Toast.makeText(this, Locale.getStringInLocale("enter_age_or_dob", this), Toast.LENGTH_LONG).show();
+            return false;
+        }
+        else if (!dateOfBirthET.getText().toString().trim().equals("") && !ageET.getText().toString().trim().equals("")) {//both dob and age are set
+            String[] ageTypesInEN = Locale.getArrayInLocale("age_type_array", this, Locale.LOCALE_ENGLISH);
+            String ageType = ageTypesInEN[ageS.getSelectedItemPosition()];
+            float unitAge = 0;
+            if (ageType.equals("Years")) {
+                unitAge = 31557600000L;
+            } else if (ageType.equals("Months")) {
+                unitAge = 2628000000L;
+            } else if (ageType.equals("Days")) {
+                unitAge = 86400000L;
+            }
+
+            SimpleDateFormat simpleDateFormat = new SimpleDateFormat(dateFormat);
+
+            try {
+                Date enteredDate = simpleDateFormat.parse(dateOfBirthET.getText().toString());
+                long enteredDateMs = enteredDate.getTime();
+                long ageMs = (long) (new Date().getTime() - (Integer.parseInt(ageET.getText().toString()) * unitAge));
+                long msDiff = Math.abs(ageMs - enteredDateMs);
+                float unitDiff = msDiff / unitAge;
+                if (unitDiff > 1) {
+                    Toast.makeText(this, Locale.getStringInLocale("age_diff_from_dob", this), Toast.LENGTH_LONG).show();
+                    return false;
+                }
+            } catch (ParseException e) {
+                e.printStackTrace();
+            }
+        }
+
+        if(breedACTV.getVisibility() == AutoCompleteTextView.VISIBLE){//user selected other breed in breedET
+            if(breedACTV.getText().toString().trim().length() == 0){//user did not specify other breed
+                Toast.makeText(this, Locale.getStringInLocale("enter_breed", this), Toast.LENGTH_LONG).show();
+                breedACTV.requestFocus();
+                return false;
+            }
+            else{
+                String[] uncommonBreedsInEN = Locale.getArrayInLocale("uc_breeds_array", this, Locale.LOCALE_ENGLISH);
+                String enteredBreed = breedACTV.getText().toString();
+                boolean breedKnown = false;
+                for(int i = 0; i < uncommonBreedsInEN.length; i++){
+                    if(uncommonBreedsInEN[i].equals(enteredBreed)){
+                        breedKnown = true;
+                    }
+                }
+
+                if(!breedKnown){
+                    Toast.makeText(this, Locale.getStringInLocale("breed_unknown", this), Toast.LENGTH_LONG).show();
+                    breedACTV.requestFocus();
+                    return false;
+                }
+            }
+        }
+
+        if(countryOfOriginACTV.getText().toString().length() > 0) {
+            String[] countries = this.getResources().getStringArray(R.array.countries);
+            boolean countryFound = false;
+            for(int i = 0; i < countries.length; i++) {
+                if(countries[i].equals(countryOfOriginACTV.getText().toString())) {
+                    countryFound = true;
+                    break;
+                }
+            }
+            if(!countryFound) {
+                Toast.makeText(this,Locale.getStringInLocale("country_not_found",this),Toast.LENGTH_LONG).show();
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    private void cacheThisCow() {
+        clearEditTextDataCache();
+
+        if(thisCow==null) {
+            thisCow=new Cow(true);
+        }
+        thisCow.setName(nameET.getText().toString());
+        if(farmer.getMode().equals(Farmer.MODE_INITIAL_REGISTRATION)) {
+            thisCow.setMode(Cow.MODE_ADULT_COW_REGISTRATION);
+        }
+        thisCow.setEarTagNumber(earTagNumberET.getText().toString());
+        thisCow.setDateOfBirth(dateOfBirthET.getText().toString());
+        thisCow.setAge((ageET.getText().toString() == null || ageET.getText().toString().length() == 0) ? -1 : Integer.parseInt(ageET.getText().toString()));
+        String[] ageTypesInEN = Locale.getArrayInLocale("age_type_array",this,Locale.LOCALE_ENGLISH);
+        if(ageTypesInEN[ageS.getSelectedItemPosition()].equals("Days")) {
+            thisCow.setAgeType(Cow.AGE_TYPE_DAY);
+        }
+        else if(ageTypesInEN[ageS.getSelectedItemPosition()].equals("Months")) {
+            thisCow.setAgeType(Cow.AGE_TYPE_MONTH);
+        }
+        else if(ageTypesInEN[ageS.getSelectedItemPosition()].equals("Years")) {
+            thisCow.setAgeType(Cow.AGE_TYPE_YEAR);
+        }
+        thisCow.setDateOfBirth(dateOfBirthET.getText().toString());
+        thisCow.setBreeds(breedET.getText().toString().split(", "), this, true);
+        thisCow.setOtherBreed(this, breedACTV.getText().toString());
+        thisCow.setDeformities(deformityET.getText().toString().split(", "), this);
+        thisCow.setOtherDeformity(specifyET.getText().toString());
+        thisCow.setCountryOfOrigin(countryOfOriginACTV.getText().toString());
+        String[] sexInEN = Locale.getArrayInLocale("sex_array",this,Locale.LOCALE_ENGLISH);
+        if(sexInEN[sexS.getSelectedItemPosition()].equals("Female")) {
+            thisCow.setSex(Cow.SEX_FEMALE);
+
+            String[] milkingStatusInEN = Locale.getArrayInLocale("cow_status_array", this, Locale.LOCALE_ENGLISH);
+            thisCow.setMilkingStatus(milkingStatusInEN[milkingStatusS.getSelectedItemPosition()], this);
+            String[] inCalfArrayInEN = Locale.getArrayInLocale("cow_in_calf_array", this, Locale.LOCALE_ENGLISH);
+            if(inCalfArrayInEN[inCalfStatusS.getSelectedItemPosition()].equals(Cow.COW_IN_CALF)){
+                thisCow.setInCalf(true);
+            }
+            else{
+                thisCow.setInCalf(false);
+            }
+        }
+        else if(sexInEN[sexS.getSelectedItemPosition()].equals("Male")) {
+            thisCow.setSex(Cow.SEX_MALE);
+        }
+        if(farmer.getMode().equals(Farmer.MODE_INITIAL_REGISTRATION)) {
+            String[] serviceTypesInEN = Locale.getArrayInLocale("service_types",this,Locale.LOCALE_ENGLISH);
+            if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Bull")) {
+                thisCow.setServiceType(Cow.SERVICE_TYPE_BULL);
+
+                Sire sire = new Sire();
+//                sire.setName(validSires.get(sireS.getSelectedItemPosition()).getName());
+//                sire.setEarTagNumber(validSires.get(sireS.getSelectedItemPosition()).getEarTagNumber());
+
+                for(int i = 0; i < validSires.size(); i++){
+                    if(sireACTV.getText().toString().equals(validSires.get(i).getEarTagNumber()+" ("+validSires.get(i).getName()+")")){
+                        sire.setEarTagNumber(validSires.get(i).getEarTagNumber());
+                        sire.setName(validSires.get(i).getName());
+                    }
+                }
+                if(sire.getEarTagNumber().trim().equals("")){//if not yet set then assume the sire is not part of the herd
+                    sire.setEarTagNumber(sireACTV.getText().toString());
+                }
+
+                String[] sireOwnersInEN = Locale.getArrayInLocale("bull_owners", this, Locale.LOCALE_ENGLISH);
+                sire.setOwnerType(sireOwnersInEN[sireOwnerS.getSelectedItemPosition()]);
+                sire.setOwner(sireOwnerNameET.getText().toString());
+                thisCow.setSire(sire);
+
+                Dam dam =new Dam();
+//                dam.setName(validDams.get(damS.getSelectedItemPosition()).getName());
+//                dam.setEarTagNumber(validDams.get(damS.getSelectedItemPosition()).getEarTagNumber());
+
+                for(int i = 0; i < validDams.size(); i++ ){
+                    if(damACTV.getText().toString().equals(validDams.get(i).getEarTagNumber()+" ("+validDams.get(i).getName()+")")){
+                        dam.setEarTagNumber(validDams.get(i).getEarTagNumber());
+                        dam.setName(validDams.get(i).getName());
+                    }
+                }
+                if(dam.getEarTagNumber().trim().equals("")){//if not yet set then assume the dam is not part of the herd
+                    dam.setEarTagNumber(damACTV.getText().toString());
+                }
+                thisCow.setDam(dam);
+            }
+            else if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Artificial Insemination")) {
+                thisCow.setServiceType(Cow.SERVICE_TYPE_AI);
+
+                Sire sire = new Sire();
+                sire.setStrawNumber(strawNumberET.getText().toString());
+                thisCow.setSire(sire);
+
+                Dam dam =new Dam();
+//                dam.setName(validDams.get(damS.getSelectedItemPosition()).getName());
+//                dam.setEarTagNumber(validDams.get(damS.getSelectedItemPosition()).getEarTagNumber());
+
+                for(int i = 0; i < validDams.size(); i++ ){
+                    if(damACTV.getText().toString().equals(validDams.get(i).getEarTagNumber()+" ("+validDams.get(i).getName()+")")){
+                        dam.setEarTagNumber(validDams.get(i).getEarTagNumber());
+                        dam.setName(validDams.get(i).getName());
+                    }
+                }
+                if(dam.getEmbryoNumber().trim().equals("")){
+                    dam.setEarTagNumber(damACTV.getText().toString());
+                }
+                thisCow.setDam(dam);
+            }
+            else if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Embryo Transfer")) {
+                thisCow.setServiceType(Cow.SERVICE_TYPE_ET);
+
+                Dam dam =new Dam();
+//                dam.setName(validDams.get(damS.getSelectedItemPosition()).getName());
+//                dam.setEarTagNumber(validDams.get(damS.getSelectedItemPosition()).getEarTagNumber());
+
+                for(int i = 0; i < validDams.size(); i++ ){
+                    if(damACTV.getText().toString().equals(validDams.get(i).getEarTagNumber()+" ("+validDams.get(i).getName()+")")){
+                        dam.setEarTagNumber(validDams.get(i).getEarTagNumber());
+                        dam.setName(validDams.get(i).getName());
+                    }
+                }
+                if(dam.getEmbryoNumber().trim().equals("")){
+                    dam.setEarTagNumber(damACTV.getText().toString());
+                }
+                thisCow.setDam(dam);
+            }
+        }
+        farmer.setCow(thisCow,index);
+    }
+
+    private void sendDataToServer(JSONObject jsonObject)
+    {
+        ServerRegistrationThread serverRegistrationThread=new ServerRegistrationThread();
+        serverRegistrationThread.execute(jsonObject);
+    }
+
+    @Override
+    public void onFocusChange(View view, boolean hasFocus) {
+        if(view == dateOfBirthET && hasFocus){
+            if(dateOfBirthET.getText().toString().length() ==0 ){
+                dateOfBirthETClicked();
+            }
+        }
+        else if(view == breedET && hasFocus){
+            if(breedET.getText().toString().length() == 0){
+                breedETClicked();
+            }
+        }
+        else if(view == deformityET && hasFocus){
+            if(deformityET.getText().toString().length() == 0){
+                deformityETClicked();
+            }
+        }
+    }
+
+    private void toggleSireOwnerVisibility(){
+        String[] sireOwnersInEN = Locale.getArrayInLocale("bull_owners", this, Locale.LOCALE_ENGLISH);
+        if(sireOwnersInEN[sireOwnerS.getSelectedItemPosition()].equals("Own bull")){
+            sireOwnerNameTV.setVisibility(TextView.GONE);
+            sireOwnerNameET.setVisibility(EditText.GONE);
+        }
+        else{
+            sireOwnerNameTV.setVisibility(TextView.VISIBLE);
+            sireOwnerNameET.setVisibility(EditText.VISIBLE);
+        }
+    }
+
+    @Override
+    public void onLocationChanged(Location location) {
+        String latitude=String.valueOf(location.getLatitude());
+        String longitude=String.valueOf(location.getLongitude());
+        Log.d(TAG,"latitude : "+latitude);
+        Log.d(TAG,"longitude : "+longitude);
+
+        if(this.farmer.isInFarm() && (this.farmer.getLatitude() == null || this.farmer.getLatitude().length() == 0)){
+            this.farmer.setLatitude(latitude);
+        }
+
+        if(this.farmer.isInFarm() && (this.farmer.getLongitude() == null || this.farmer.getLongitude().length() == 0)){
+            this.farmer.setLongitude(longitude);
+        }
+    }
+
+    @Override
+    public void onStatusChanged(String provider, int status, Bundle extras) {
+
+    }
+
+    @Override
+    public void onProviderEnabled(String provider) {
+
+    }
+
+    @Override
+    public void onProviderDisabled(String provider) {
+
+    }
+
+    @Override
+    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+        if(buttonView.equals(noDeformityCB)){
+            if(isChecked){
+                deformityLV.clearChoices();
+                ArrayAdapter<String> deformityArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,deformities);
+                deformityLV.setAdapter(deformityArrayAdapter);
+                specifyET.setVisibility(EditText.GONE);
+                specifyET.setText("");
+
+                deformityET.setHint(Locale.getStringInLocale("no_deformity", this));
+            }
+            else{
+                deformityET.setHint("");
+            }
+        }
+    }
+
+    @Override
+    public boolean onLongClick(View v) {
+        if(v.equals(dateOfBirthET)){
+            Log.w(TAG, "About to delete date in dateOfBirthET");
+            dateOfBirthET.setText("");
+        }
+        return false;
+    }
+
+    private class ServerRegistrationThread extends AsyncTask<JSONObject,Integer,String> {
+        private ProgressDialog progressDialog;
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(CowRegistrationActivity.this, "",Locale.getStringInLocale("loading_please_wait",CowRegistrationActivity.this), true);
+        }
+
+        @Override
+        protected String doInBackground(JSONObject... params) {
+            Log.d(TAG,"sending registration data to server");
+            String responseString=DataHandler.sendDataToServer(CowRegistrationActivity.this, params[0].toString(), DataHandler.FARMER_REGISTRATION_URL, true);
+
+            return responseString;
+        }
+
+        @Override
+        protected void onPostExecute(String result) {
+            super.onPostExecute(result);
+            progressDialog.dismiss();
+
+            if(result == null) {
+                String httpError = DataHandler.getSharedPreference(CowRegistrationActivity.this, "http_error", "No Error thrown to application. Something must be really wrong");
+                Toast.makeText(CowRegistrationActivity.this,httpError,Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
+                Toast.makeText(CowRegistrationActivity.this, Locale.getStringInLocale("generic_sms_error", CowRegistrationActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
+                Toast.makeText(CowRegistrationActivity.this, Locale.getStringInLocale("no_service", CowRegistrationActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
+                Toast.makeText(CowRegistrationActivity.this, Locale.getStringInLocale("radio_off", CowRegistrationActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
+                Toast.makeText(CowRegistrationActivity.this, Locale.getStringInLocale("server_not_receive_sms", CowRegistrationActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.CODE_NUMBER_IN_USE)){
+                Toast.makeText(CowRegistrationActivity.this, Locale.getStringInLocale("number_in_use", CowRegistrationActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.ACKNOWLEDGE_OK)) {
+
+                clearEditTextDataCache();
+
+                Log.d(TAG,"data successfully sent to server");
+                if(farmer.getMode().equals(Farmer.MODE_INITIAL_REGISTRATION)) {
+                    Utils.showSuccessfullRegistration(CowRegistrationActivity.this,null);
+                }
+                else {
+                    //get updated farmer data
+                    DataUpdateThread dataUpdateThread = new DataUpdateThread();
+                    dataUpdateThread.execute(1);
+
+                    Toast.makeText(CowRegistrationActivity.this, Locale.getStringInLocale("event_successfully_recorded",CowRegistrationActivity.this), Toast.LENGTH_LONG).show();
+                    Intent intent = new Intent(CowRegistrationActivity.this, EventsActivity.class);
+                    startActivity(intent);
+                }
+            }
+        }
+    }
+
+    private class DataUpdateThread extends AsyncTask<Integer, Integer, Integer>{
+
+        @Override
+        protected Integer doInBackground(Integer... params)
+        {
+            JSONObject jsonObject=new JSONObject();
+            try
+            {
+                TelephonyManager telephonyManager=(TelephonyManager)CowRegistrationActivity.this.getSystemService(Context.TELEPHONY_SERVICE);
+                String simcardSN  = telephonyManager.getSimSerialNumber();
+                if(simcardSN != null){
+                    jsonObject.put("simCardSN",params[0]);
+                    //jsonObject.put("mobileNumber",params[1]);
+                    String result = DataHandler.sendDataToServer(CowRegistrationActivity.this, jsonObject.toString(),DataHandler.FARMER_AUTHENTICATION_URL, true);
+                    JSONObject farmerData = new JSONObject(result);
+                    DataHandler.saveFarmerData(CowRegistrationActivity.this, farmerData);
+                    return 1;
+
+                }
+            }
+            catch (JSONException e)
+            {
+                e.printStackTrace();
+            }
+            return null;
+        }
+    }
+}
\ No newline at end of file
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/CowSelectionActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/CowSelectionActivity.java
new file mode 100644
index 0000000..64293ad
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/CowSelectionActivity.java
@@ -0,0 +1,383 @@
+package org.cgiar.ilri.np.farmer;
+
+
+import android.app.ProgressDialog;
+import android.content.Intent;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.Spinner;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.actionbarsherlock.app.SherlockActivity;
+import com.actionbarsherlock.view.Menu;
+import com.actionbarsherlock.view.MenuInflater;
+import com.actionbarsherlock.view.MenuItem;
+
+import org.cgiar.ilri.np.farmer.backend.DataHandler;
+import org.cgiar.ilri.np.farmer.backend.Locale;
+import org.cgiar.ilri.np.farmer.carrier.Cow;
+import org.cgiar.ilri.np.farmer.carrier.Farmer;
+import org.json.JSONArray;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.List;
+
+
+public class CowSelectionActivity extends SherlockActivity implements NPActivity, AdapterView.OnItemSelectedListener, View.OnClickListener {
+    private static final String TAG = "CowSelectionActivity";
+    public static final String KEY_ADMIN_DATA = "adminData";
+
+    private Menu menu;
+
+    private TextView filterFarmersTV;
+    private Spinner filterFarmersS;
+    private TextView selectFarmerTV;
+    private Spinner selectFarmerS;
+    private TextView selectCowTV;
+    private Spinner selectCowS;
+    private Button selectB;
+    private Button backB;
+
+    private JSONObject adminData;
+    private List<Farmer> allFarmers;
+    private List<Farmer> filteredFarmers;
+    private List<String> filters;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_cow_selection);
+
+        filterFarmersTV = (TextView)findViewById(R.id.filter_farmers_tv);
+        filterFarmersS = (Spinner)findViewById(R.id.filter_farmers_s);
+        filterFarmersS.setOnItemSelectedListener(this);
+        selectFarmerTV = (TextView)findViewById(R.id.select_farmer_tv);
+        selectFarmerS = (Spinner)findViewById(R.id.select_farmer_s);
+        selectFarmerS.setOnItemSelectedListener(this);
+        selectCowTV = (TextView)findViewById(R.id.select_cow_tv);
+        selectCowS = (Spinner)findViewById(R.id.select_cow_s);
+        selectB = (Button)findViewById(R.id.select_b);
+        selectB.setOnClickListener(this);
+        backB = (Button)findViewById(R.id.back_b);
+        backB.setOnClickListener(this);
+
+        initTextInViews();
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        Bundle bundle=this.getIntent().getExtras();
+        if(bundle != null){
+            String adminJSONString = bundle.getString(KEY_ADMIN_DATA);
+            loadAdminData(adminJSONString);
+        }
+    }
+
+    public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu) {
+        MenuInflater inflater = getSupportMenuInflater();
+        inflater.inflate(R.menu.farmer_selection, menu);
+        this.menu = menu;
+        initMenuText();
+        return true;
+    }
+
+    public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem item) {
+        // Handle item selection
+        if(NPActivity.Language.processLanguageMenuItemSelected(this, this, item)){
+            return true;
+        }
+        else if(item.getItemId() == R.id.action_back_main_menu) {
+            Intent intent = new Intent(this, MainMenu.class);
+            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_ADMIN);
+            intent.putExtra(MainMenu.KEY_ADMIN_DATA, adminData.toString());
+            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+            startActivity(intent);
+        }
+        return false;
+    }
+
+    private void initMenuText(){
+        if(this.menu != null){
+            MenuItem mainMenuMI = menu.findItem(R.id.action_back_main_menu);
+            mainMenuMI.setTitle(Locale.getStringInLocale("back_to_main_menu", this));
+        }
+    }
+
+    @Override
+    public void initTextInViews() {
+        this.setTitle(Locale.getStringInLocale("select_cow", this));
+
+        filterFarmersTV.setText(Locale.getStringInLocale("filter_farmers", this));
+        selectFarmerTV.setText(Locale.getStringInLocale("select_farmer", this));
+        selectCowTV.setText(Locale.getStringInLocale("select_cow", this));
+
+        selectB.setText(Locale.getStringInLocale("select", this));
+        backB.setText(Locale.getStringInLocale("back", this));
+    }
+
+    private void loadAdminData(String adminJSONString){
+        try {
+            adminData = new JSONObject(adminJSONString);
+
+            filters = new ArrayList<String>();
+            filters.add(Locale.getStringInLocale("all_farmers", this));
+            filters.add(Locale.getStringInLocale("farmers_no_epersonnel", this));
+            if(adminData.getInt("is_super") == 1){//admin is super
+                JSONArray allEPersonnel = adminData.getJSONArray("extension_personnel");
+                for(int i = 0; i < allEPersonnel.length(); i++){
+                    JSONObject currEPersonnel = allEPersonnel.getJSONObject(i);
+                    filters.add(Locale.getStringInLocale("farmers_tied_to", this) + " " + currEPersonnel.getString("name"));
+                }
+            }
+            else{
+                filters.add(Locale.getStringInLocale("farmers_tied_to", this) +" "+ adminData.getString("name"));
+            }
+            ArrayAdapter<String> filterArrayAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, filters);
+            filterArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+            filterFarmersS.setAdapter(filterArrayAdapter);
+
+            JSONArray farmerData = adminData.getJSONArray("farmers");
+
+            allFarmers = new ArrayList<Farmer>(farmerData.length());
+            filteredFarmers = new ArrayList<Farmer>(farmerData.length());
+            for (int i = 0; i < farmerData.length(); i++) {
+                Farmer currFarmer = new Farmer(farmerData.getJSONObject(i));
+                allFarmers.add(currFarmer);
+                filteredFarmers.add(currFarmer);
+            }
+
+            List<String> farmerNames = new ArrayList<String>(filteredFarmers.size());
+            for (int i = 0; i < filteredFarmers.size(); i++) {
+                Farmer currFarmer = filteredFarmers.get(i);
+                farmerNames.add(currFarmer.getFullName());
+            }
+
+            ArrayAdapter<String> farmerArrayAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, farmerNames);
+            farmerArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+            selectFarmerS.setAdapter(farmerArrayAdapter);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
+        if(parent == selectFarmerS){
+
+            List<String> blankList = new ArrayList<String>();
+            ArrayAdapter<String> cowArrayAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, blankList);
+            cowArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+            selectCowS.setAdapter(cowArrayAdapter);
+
+            if(selectFarmerS.getSelectedItemPosition() != -1){
+                Farmer selectedFarmer = filteredFarmers.get(selectFarmerS.getSelectedItemPosition());
+                List<Cow> cows = selectedFarmer.getCows();
+                if(cows == null){
+                    GetCowDataThread getCowDataThread = new GetCowDataThread(selectFarmerS.getSelectedItemPosition());
+                    getCowDataThread.execute(selectedFarmer.getId());
+                }
+                else{
+                    loadCowData(cows);
+                }
+            }
+        }
+
+        if(parent == filterFarmersS){
+            if(filterFarmersS.getSelectedItemPosition() == 0){//all farmers
+                List<Farmer> newlyFilteredFarmers = this.allFarmers;
+                setFilteredFarmerList(newlyFilteredFarmers);
+            }
+            else if(filterFarmersS.getSelectedItemPosition() == 1){//farmers without extension personnel
+                List<Farmer> newlyFilteredFarmers = new ArrayList<Farmer>();
+                for(int i =0; i<allFarmers.size(); i++){
+                    Farmer currFarmer = allFarmers.get(i);
+                    if(DataHandler.isNull(currFarmer.getExtensionPersonnel()) || currFarmer.getExtensionPersonnel().length() == 0){
+                        newlyFilteredFarmers.add(currFarmer);
+                    }
+                    else{
+                        //Log.d(TAG, currFarmer.getExtensionPersonnel()+" does not qualify to be null");
+                    }
+                }
+
+                setFilteredFarmerList(newlyFilteredFarmers);
+            }
+            else if(filterFarmersS.getSelectedItemPosition() != -1){
+                String selection = filters.get(filterFarmersS.getSelectedItemPosition());
+
+                List<Farmer> newlyFilteredFarmers = new ArrayList<Farmer>();
+                for(int i = 0; i < allFarmers.size(); i++){
+                    Farmer currFarmer = allFarmers.get(i);
+                    if(currFarmer.getExtensionPersonnel() != null && currFarmer.getExtensionPersonnel().length() > 0 &&
+                            selection.contains(currFarmer.getExtensionPersonnel())){
+                        newlyFilteredFarmers.add(currFarmer);
+                    }
+                    else{
+                        //Log.d(TAG, currFarmer.getExtensionPersonnel()+" does not match "+selection);
+                    }
+                }
+
+                setFilteredFarmerList(newlyFilteredFarmers);
+            }
+        }
+    }
+
+    private void setFilteredFarmerList(List<Farmer> filteredFarmers){
+        List<String> farmerNames = new ArrayList<String>(filteredFarmers.size());
+        for (int i = 0; i < filteredFarmers.size(); i++) {
+            Farmer currFarmer = filteredFarmers.get(i);
+            farmerNames.add(currFarmer.getFullName());
+        }
+
+        ArrayAdapter<String> farmerArrayAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, farmerNames);
+        farmerArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        selectFarmerS.setAdapter(farmerArrayAdapter);
+
+        if(this.filteredFarmers != filteredFarmers) {
+            this.filteredFarmers = filteredFarmers;
+        }
+    }
+
+    private void loadCowData(List<Cow> cows){
+        List<String> cowNames = new ArrayList<String>();
+        for(int i = 0; i < cows.size(); i++){
+            String name = cows.get(i).getName();
+            String etn = cows.get(i).getEarTagNumber();
+
+            String dispName = "";
+            if(DataHandler.isNull(name) || name.length() == 0){
+                dispName = etn;
+            }
+            else if(DataHandler.isNull(etn) || etn.length() == 0){
+                dispName = name;
+            }
+            else{
+                dispName = name + " (" + etn + ")";
+            }
+            cowNames.add(dispName);
+        }
+
+        ArrayAdapter<String> cowArrayAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, cowNames);
+        cowArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        selectCowS.setAdapter(cowArrayAdapter);
+    }
+
+    @Override
+    public void onNothingSelected(AdapterView<?> parent) {
+
+    }
+
+    @Override
+    public void onClick(View v) {
+        if(v == selectB){
+            if(selectFarmerS.getSelectedItemPosition() != -1){
+                Farmer selectedFarmer = filteredFarmers.get(selectFarmerS.getSelectedItemPosition());
+                if(selectedFarmer != null){
+                    if(selectCowS.getSelectedItemPosition() != -1){
+                        List<Cow> cows = selectedFarmer.getCows();
+                        if(cows != null){
+                            Cow selectedCow = cows.get(selectCowS.getSelectedItemPosition());
+                            if(selectedCow != null){
+                                Log.d(TAG, "Cow index = "+selectCowS.getSelectedItemPosition());
+                                Log.d(TAG, "Number of cows = "+cows.size());
+                                Intent intent=new Intent(this, EditCowActivity.class);
+                                intent.putExtra(MainMenu.KEY_ADMIN_DATA, adminData.toString());
+                                intent.putExtra(EditCowActivity.KEY_INDEX, selectCowS.getSelectedItemPosition());
+                                intent.putExtra(EditCowActivity.KEY_NUMBER_OF_COWS, cows.size());
+                                Bundle bundle=new Bundle();
+                                bundle.putParcelable(Farmer.PARCELABLE_KEY, selectedFarmer);
+                                intent.putExtras(bundle);
+                                startActivity(intent);
+                            }
+                        }
+                    }
+                }
+            }
+        }
+        else if(v == backB){
+            Intent intent = new Intent(this, MainMenu.class);
+            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_ADMIN);
+            intent.putExtra(MainMenu.KEY_ADMIN_DATA, adminData.toString());
+            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+            startActivity(intent);
+        }
+    }
+
+    private class GetCowDataThread extends AsyncTask<Integer, Integer, String>{
+
+        private int farmerIndex;
+        private ProgressDialog progressDialog;
+
+        public GetCowDataThread(int farmerIndex){
+            this.farmerIndex = farmerIndex;
+        }
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(CowSelectionActivity.this, "", Locale.getStringInLocale("loading_please_wait", CowSelectionActivity.this), true);
+        }
+
+        @Override
+        protected String doInBackground(Integer... params) {
+            try {
+                JSONObject jsonObject = new JSONObject();
+                jsonObject.put("id", params[0]);
+                return DataHandler.sendDataToServer(CowSelectionActivity.this, jsonObject.toString(), DataHandler.ADMIN_GET_COWS_URL,true);
+            }
+            catch (Exception e){
+                e.printStackTrace();
+            }
+            return null;
+        }
+
+        @Override
+        protected void onPostExecute(String result) {
+            super.onPostExecute(result);
+            progressDialog.dismiss();
+
+            if(result==null){
+                String httpError = DataHandler.getSharedPreference(CowSelectionActivity.this, "http_error", "No Error thrown to application. Something must be really wrong");
+                Toast.makeText(CowSelectionActivity.this, httpError, Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
+                Toast.makeText(CowSelectionActivity.this, Locale.getStringInLocale("generic_sms_error", CowSelectionActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
+                Toast.makeText(CowSelectionActivity.this, Locale.getStringInLocale("no_service", CowSelectionActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
+                Toast.makeText(CowSelectionActivity.this, Locale.getStringInLocale("radio_off", CowSelectionActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
+                Toast.makeText(CowSelectionActivity.this, Locale.getStringInLocale("server_not_receive_sms", CowSelectionActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else{
+                try{
+                    Log.d(TAG, "fetched cows  = "+result);
+                    JSONArray cowJsonArray = new JSONArray(result);
+                    filteredFarmers.get(farmerIndex).setCows(cowJsonArray);
+                    loadCowData(filteredFarmers.get(farmerIndex).getCows());
+
+                    //add the cow list to the copy of the farmer object in the allFarmers list
+                    for(int i = 0; i < allFarmers.size(); i++){
+                        if(allFarmers.get(i).getId() == filteredFarmers.get(farmerIndex).getId()){
+                            allFarmers.get(i).setCows(cowJsonArray);
+                        }
+                    }
+                }
+                catch (Exception e){
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/EditCowActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/EditCowActivity.java
new file mode 100644
index 0000000..eb81b51
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/EditCowActivity.java
@@ -0,0 +1,1293 @@
+package org.cgiar.ilri.np.farmer;
+
+import android.app.AlertDialog;
+import android.app.DatePickerDialog;
+import android.app.Dialog;
+import android.app.ProgressDialog;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.util.Log;
+import android.util.SparseBooleanArray;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.AutoCompleteTextView;
+import android.widget.Button;
+import android.widget.CheckBox;
+import android.widget.CompoundButton;
+import android.widget.DatePicker;
+import android.widget.EditText;
+import android.widget.ListView;
+import android.widget.ScrollView;
+import android.widget.Spinner;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.actionbarsherlock.app.SherlockActivity;
+import com.actionbarsherlock.view.Menu;
+import com.actionbarsherlock.view.MenuInflater;
+import com.actionbarsherlock.view.MenuItem;
+
+import org.cgiar.ilri.np.farmer.backend.DataHandler;
+import org.cgiar.ilri.np.farmer.backend.Locale;
+import org.cgiar.ilri.np.farmer.carrier.Cow;
+import org.cgiar.ilri.np.farmer.carrier.Dam;
+import org.cgiar.ilri.np.farmer.carrier.Farmer;
+import org.cgiar.ilri.np.farmer.carrier.Sire;
+import org.json.JSONObject;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+import java.util.List;
+
+
+public class EditCowActivity extends SherlockActivity implements NPActivity,
+        View.OnClickListener, DatePickerDialog.OnDateSetListener, ListView.OnItemClickListener,
+        Spinner.OnItemSelectedListener, View.OnFocusChangeListener, CheckBox.OnCheckedChangeListener, View.OnLongClickListener{
+
+    private static final String TAG = "EditCowActivity";
+    public static final String KEY_INDEX = "cowIndex";
+    public static final String KEY_NUMBER_OF_COWS = "numberOfCows";
+
+    private Menu menu;
+
+    private final String dateFormat="dd/MM/yyyy";
+    private TextView nameETNHintTV;
+    private TextView nameTV;
+    private EditText nameET;
+    private TextView earTagNumberTV;
+    private EditText earTagNumberET;
+    private TextView ageOrDOBHintTV;
+    private TextView ageTV;
+    private Spinner ageS;
+    private EditText ageET;
+    private TextView dateOfBirthTV;
+    private EditText dateOfBirthET;
+    private TextView breedTV;
+    private EditText breedET;
+    private TextView sexTV;
+    private Spinner sexS;
+    private TextView milkingStatusTV;
+    private Spinner milkingStatusS;
+    private TextView inCalfStatusTV;
+    private Spinner inCalfStatusS;
+    private TextView deformityTV;
+    private EditText deformityET;
+    private TextView serviceTypeTV;
+    private Spinner serviceTypeS;
+    private TextView sireTV;
+    private Spinner sireS;
+    private AutoCompleteTextView sireACTV;
+    private TextView sireOwnerTV;
+    private Spinner sireOwnerS;
+    private TextView sireOwnerNameTV;
+    private EditText sireOwnerNameET;
+    private TextView strawNumberTV;
+    private EditText strawNumberET;
+    private TextView damTV;
+    private Spinner damS;
+    private AutoCompleteTextView damACTV;
+    private TextView embryoNumberTV;
+    private EditText embryoNumberET;
+    private TextView countryOfOriginTV;
+    private AutoCompleteTextView countryOfOriginACTV;
+    private TextView commonCountriesTV;
+    private Spinner commonCountriesS;
+    private Button cancelB;
+    private Button editB;
+    private DatePickerDialog datePickerDialog;
+    private Dialog breedDialog;
+    private ScrollView breedDialogSV;
+    private ListView breedLV;
+    private Button dialogBreedOkayB;
+    private Dialog deformityDialog;
+    private ScrollView deformitySV;
+    private ListView deformityLV;
+    private CheckBox noDeformityCB;
+    private EditText specifyET;
+    private Button dialogDeformityOkayB;
+
+    private boolean cacheData;
+    private String[] breeds;
+    private String[] deformities;
+    private String deformityOSpecifyText;
+    private int selectedBreeds;
+    private Farmer farmer;
+    private Cow thisCow;
+    private int index;
+    private int numberOfCows;
+    private List<Cow> validSires;
+    private List<Cow> validDams;
+    private int selectedSireOwner;
+    private String adminData;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_edit_cow);
+
+        cacheData = true;
+        selectedBreeds = 0;
+        Bundle bundle = this.getIntent().getExtras();
+        if(bundle!=null) {
+            index=bundle.getInt(KEY_INDEX);
+            numberOfCows=bundle.getInt(KEY_NUMBER_OF_COWS);
+        }
+
+        nameETNHintTV = (TextView) this.findViewById(R.id.name_eta_hint_tv);
+        nameTV=(TextView)this.findViewById(R.id.name_tv);
+        nameET=(EditText)this.findViewById(R.id.name_et);
+        earTagNumberTV=(TextView)this.findViewById(R.id.ear_tag_number_tv);
+        earTagNumberET=(EditText)this.findViewById(R.id.ear_tag_number_et);
+        ageOrDOBHintTV = (TextView) this.findViewById(R.id.age_or_dob_hint_tv);
+        ageTV=(TextView)this.findViewById(R.id.age_tv);
+        ageS=(Spinner)this.findViewById(R.id.age_s);
+        ageET=(EditText)this.findViewById(R.id.age_et);
+        dateOfBirthTV=(TextView)this.findViewById(R.id.date_of_birth_tv);
+        //dateOfBirthTV.setVisibility(TextView.GONE); //date of birth appears not to be necessary
+        dateOfBirthET=(EditText)this.findViewById(R.id.date_of_birth_et);
+        dateOfBirthET.setOnFocusChangeListener(this);
+        dateOfBirthET.setOnClickListener(this);
+        dateOfBirthET.setOnLongClickListener(this);
+        //dateOfBirthET.setVisibility(TextView.GONE); //date of birth appears not to be necessary
+        breedTV=(TextView)this.findViewById(R.id.breed_tv);
+        breedET=(EditText)this.findViewById(R.id.breed_et);
+        breedET.setOnFocusChangeListener(this);
+        breedET.setOnClickListener(this);
+        sexTV=(TextView)this.findViewById(R.id.sex_tv);
+        sexS=(Spinner)this.findViewById(R.id.sex_s);
+        sexS.setOnItemSelectedListener(this);
+        milkingStatusTV = (TextView)this.findViewById(R.id.milking_status_tv);
+        milkingStatusS = (Spinner)this.findViewById(R.id.milking_status_s);
+        inCalfStatusTV = (TextView)this.findViewById(R.id.in_calf_status_tv);
+        inCalfStatusS = (Spinner)this.findViewById(R.id.in_calf_status_s);
+        deformityTV=(TextView)this.findViewById(R.id.deformity_tv);
+        deformityET=(EditText)this.findViewById(R.id.deformity_et);
+        deformityET.setOnFocusChangeListener(this);
+        deformityET.setOnClickListener(this);
+        serviceTypeTV = (TextView)this.findViewById(R.id.service_type_tv);
+        serviceTypeS = (Spinner)this.findViewById(R.id.service_type_s);
+        serviceTypeS.setOnItemSelectedListener(this);
+        sireTV = (TextView)this.findViewById(R.id.sire_tv);
+        sireS = (Spinner)this.findViewById(R.id.sire_s);
+        sireACTV = (AutoCompleteTextView)this.findViewById(R.id.sire_actv);
+        sireOwnerTV = (TextView)this.findViewById(R.id.sire_owner_tv);
+        sireOwnerS = (Spinner)this.findViewById(R.id.sire_owner_s);
+        sireOwnerS.setOnItemSelectedListener(this);
+        sireOwnerNameTV = (TextView)this.findViewById(R.id.sire_owner_name_tv);
+        sireOwnerNameET = (EditText)this.findViewById(R.id.sire_owner_name_et);
+        strawNumberTV = (TextView)this.findViewById(R.id.straw_number_tv);
+        strawNumberET = (EditText)this.findViewById(R.id.straw_number_et);
+        damTV = (TextView)this.findViewById(R.id.dam_tv);
+        damS = (Spinner)this.findViewById(R.id.dam_s);
+        damACTV = (AutoCompleteTextView)this.findViewById(R.id.dam_actv);
+        embryoNumberTV = (TextView)this.findViewById(R.id.embryo_number_tv);
+        embryoNumberET = (EditText)this.findViewById(R.id.embryo_number_et);
+        countryOfOriginTV = (TextView)this.findViewById(R.id.country_of_origin_tv);
+        countryOfOriginACTV = (AutoCompleteTextView)this.findViewById(R.id.country_of_origin_actv);
+        commonCountriesTV = (TextView)this.findViewById(R.id.common_countries_tv);
+        commonCountriesS = (Spinner)this.findViewById(R.id.common_countries_s);
+        commonCountriesS.setOnItemSelectedListener(this);
+        cancelB = (Button)this.findViewById(R.id.cancel_b);
+        cancelB.setOnClickListener(this);
+        editB = (Button)this.findViewById(R.id.edit_b);
+        editB.setOnClickListener(this);
+        breedDialog=new Dialog(this);
+        breedDialog.setContentView(R.layout.dialog_breed);
+        dialogBreedOkayB=(Button)breedDialog.findViewById(R.id.dialog_breed_okay_b);
+        dialogBreedOkayB.setOnClickListener(this);
+        breedDialogSV=(ScrollView)breedDialog.findViewById(R.id.dialog_breed_sv);
+
+        int activityHeight = this.getResources().getDisplayMetrics().heightPixels;
+        breedDialogSV.getLayoutParams().height = (int)(activityHeight * 0.70);
+
+        breedLV=(ListView)breedDialog.findViewById(R.id.breed_lv);
+        breedLV.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
+        breedLV.setOnItemClickListener(this);
+        deformityDialog =new Dialog(this);
+        deformityDialog.setContentView(R.layout.dialog_deformity);
+        deformitySV = (ScrollView)deformityDialog.findViewById(R.id.deformity_sv);
+
+        deformitySV.getLayoutParams().height = (int)(activityHeight * 0.70);
+
+        deformityLV =(ListView) deformityDialog.findViewById(R.id.deformity_lv);
+        deformityLV.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
+        deformityLV.setOnItemClickListener(this);
+        specifyET=(EditText)deformityDialog.findViewById(R.id.specify_et);
+        noDeformityCB = (CheckBox)deformityDialog.findViewById(R.id.no_deformity_cb);
+        noDeformityCB.setOnCheckedChangeListener(this);
+        dialogDeformityOkayB =(Button) deformityDialog.findViewById(R.id.dialog_deformity_okay_b);
+        dialogDeformityOkayB.setOnClickListener(this);
+
+        initTextInViews();
+    }
+
+    public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu) {
+        MenuInflater inflater = getSupportMenuInflater();
+        inflater.inflate(R.menu.edit_cow, menu);
+        this.menu = menu;
+        initMenuText();
+        return true;
+    }
+
+    public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem item) {
+        // Handle item selection
+        if(NPActivity.Language.processLanguageMenuItemSelected(this, this, item)){
+            return true;
+        }
+        else if(item.getItemId() == R.id.action_back_main_menu) {
+            DialogInterface.OnClickListener onClickListener = new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialog, int which) {
+                    if(which==DialogInterface.BUTTON_POSITIVE){
+                        dialog.dismiss();
+
+                        clearEditTextDataCache();
+
+                        Intent intent = new Intent(EditCowActivity.this, MainMenu.class);
+                        intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_ADMIN);
+                        intent.putExtra(MainMenu.KEY_ADMIN_DATA, adminData);
+                        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+                        startActivity(intent);
+                    }
+                    else{
+                        dialog.cancel();
+                    }
+                }
+            };
+            AlertDialog mainMenuDialog = Utils.createMainMenuDialog(this, onClickListener);
+            mainMenuDialog.show();
+        }
+        return false;
+    }
+
+    private void cacheEditTextData(){
+        if(cacheData) {
+            Log.i(TAG, "Edit text data cached");
+            //Incase the activity is hidden partially/fully save the data in edittexts
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_NAME, nameET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_EAR_TAG_NUMBER, earTagNumberET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_AGE, ageET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DATE_OF_BIRTH, dateOfBirthET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_BREED, breedET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DEFORMITY, deformityET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_STRAW_NUMBER, strawNumberET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DAM, damACTV.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_SIRE, sireACTV.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_EMBRYO_NUMBER, embryoNumberET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_COUNTRY_OF_ORIGIN, countryOfOriginACTV.getText().toString());
+        }
+        else{
+            Log.i(TAG, "Edit text data NOT cached");
+        }
+    }
+
+    private void restoreEditTextData(){
+        Log.i(TAG, "Edit text data restored");
+        //incase the activity was hidden partially for a moment, restore what the user had already entered
+        nameET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_NAME, ""));
+        earTagNumberET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_EAR_TAG_NUMBER, ""));
+        ageET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_AGE, ""));
+        dateOfBirthET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_DATE_OF_BIRTH, ""));
+        breedET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_BREED, ""));
+        deformityET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_DEFORMITY, ""));
+        strawNumberET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_STRAW_NUMBER, ""));
+        damACTV.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_DAM, ""));
+        sireACTV.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_SIRE, ""));
+        embryoNumberET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_EMBRYO_NUMBER, ""));
+        countryOfOriginACTV.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_CRA_COUNTRY_OF_ORIGIN, ""));
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        Bundle bundle=this.getIntent().getExtras();
+        if(bundle != null) {
+            adminData=bundle.getString(MainMenu.KEY_ADMIN_DATA);
+            farmer=bundle.getParcelable(Farmer.PARCELABLE_KEY);
+            if(farmer!=null){
+                thisCow = farmer.getCow(index);
+                if(thisCow != null) {
+                    Log.d(TAG, "ID for current cow is "+String.valueOf(thisCow.getId()));
+                    Log.d(TAG, "Index from bundle = "+String.valueOf(index));
+                    Log.d(TAG, "Number of animals from bundle = "+String.valueOf(numberOfCows));
+                    nameET.setText(thisCow.getName());
+                    earTagNumberET.setText(thisCow.getEarTagNumber());
+                    dateOfBirthET.setText(thisCow.getDateOfBirth());
+                    ageET.setText((thisCow.getAge()==-1) ? "":String.valueOf(thisCow.getAge()));
+                    String[] ageTypesInEN = Locale.getArrayInLocale("age_type_array",this,Locale.LOCALE_ENGLISH);
+                    for(int i = 0; i < ageTypesInEN.length; i++) {
+                        if(ageTypesInEN[i].equals("Days") && thisCow.getAgeType().equals(Cow.AGE_TYPE_DAY)) {
+                            ageS.setSelection(i);
+                        }
+                        else if(ageTypesInEN[i].equals("Months") && thisCow.getAgeType().equals(Cow.AGE_TYPE_MONTH)) {
+                            ageS.setSelection(i);
+                        }
+                        else if(ageTypesInEN[i].equals("Years") && thisCow.getAgeType().equals(Cow.AGE_TYPE_YEAR)) {
+                            ageS.setSelection(i);
+                        }
+                    }
+                    List<String> savedBreeds=thisCow.getBreeds(this);//returns breeds in current locale
+                    Log.d(TAG, "Cow breeds are "+savedBreeds);
+                    String breed="";
+                    for (int i=0;i<savedBreeds.size();i++) {
+                        if(i==0) {
+                            breed=savedBreeds.get(i);
+                        }
+                        else {
+                            breed=breed+", "+savedBreeds.get(i);
+                        }
+                        Log.d(TAG, "current breed index =  "+String.valueOf(i));
+                        Log.d(TAG, "saved breeds length =  "+String.valueOf(savedBreeds.size()));
+                    }
+                    breedET.setText(breed);
+                    String[] sexInEN = Locale.getArrayInLocale("sex_array", this, Locale.LOCALE_ENGLISH);
+                    for(int i = 0; i < sexInEN.length; i++) {
+                        if(sexInEN[i].equals("Female") && thisCow.getSex().equals(Cow.SEX_FEMALE)) {
+                            sexS.setSelection(i);
+                            toggleFemaleCowViewsVisibility();
+                            String[] milkingStatusInEN = Locale.getArrayInLocale("cow_status_array", this, Locale.LOCALE_ENGLISH);
+                            String[] inCalfArrayInEN = Locale.getArrayInLocale("cow_in_calf_array", this, Locale.LOCALE_ENGLISH);
+                            for(int j = 0; j < milkingStatusInEN.length; j++){
+                                Log.d(TAG, " ********** Saved milking status = "+thisCow.getMilkingStatus());
+                                if(milkingStatusInEN[j].equals(thisCow.getMilkingStatus())){
+                                    milkingStatusS.setSelection(j);
+                                }
+                            }
+                            for(int j = 0; j < inCalfArrayInEN.length; j++){
+                                if(inCalfArrayInEN[j].equals(Cow.COW_IN_CALF) && thisCow.isInCalf()){
+                                    inCalfStatusS.setSelection(j);
+                                }
+                                else if(inCalfArrayInEN[j].equals(Cow.COW_NOT_IN_CALF) && !thisCow.isInCalf()){
+                                    inCalfStatusS.setSelection(j);
+                                }
+                            }
+
+                        }
+                        else if(sexInEN[i].equals("Male") && thisCow.getSex().equals(Cow.SEX_MALE)) {
+                            sexS.setSelection(i);
+                        }
+                    }
+                    List<String> savedDeformities=thisCow.getDeformities(this);//returns deformities in current locale
+                    String deformity="";
+                    for (int i=0;i<savedDeformities.size();i++) {
+                        if(i==0) {
+                            deformity=savedDeformities.get(i);
+                        }
+                        else {
+                            deformity=deformity+", "+savedDeformities.get(i);
+                        }
+                        if(savedDeformities.get(i).equals(deformities[deformities.length-1])) {
+                            deformityOSpecifyText = thisCow.getOtherDeformity();
+                        }
+                    }
+                    deformityET.setText(deformity);
+
+                    //if(farmer.getMode().equals(Farmer.MODE_INITIAL_REGISTRATION)) {
+
+                        List<Cow> allCows = farmer.getCows();
+                        validSires = new ArrayList<Cow>();
+                        validSires.add(new Cow(false));
+                        List<String> validSireNames = new ArrayList<String>();
+                        validSireNames.add("");
+                        int sireSelection = 0;
+
+                        validDams = new ArrayList<Cow>();
+                        validDams.add(new Cow(false));
+                        List<String> validDamNames = new ArrayList<String>();
+                        int damSelection = -1;
+                        validDamNames.add("");
+                        for(int i = 0; i < allCows.size(); i++) {
+                            if(i != index) {
+                                if(allCows.get(i).getEarTagNumber() != null && allCows.get(i).getEarTagNumber().length() > 0 && allCows.get(i).getSex().equals(Cow.SEX_MALE)) {
+                                    validSires.add(allCows.get(i));
+                                    validSireNames.add(allCows.get(i).getEarTagNumber()+" ("+allCows.get(i).getName()+")");
+                                    if(thisCow.getServiceType().equals(Cow.SERVICE_TYPE_BULL)) {
+                                        if(thisCow.getSire().getEarTagNumber().equals(allCows.get(i).getEarTagNumber())) {
+                                            sireSelection = validSires.size() - 1;
+                                        }
+                                    }
+                                }
+                                else if(allCows.get(i).getEarTagNumber() != null && allCows.get(i).getEarTagNumber().length() > 0 && allCows.get(i).getSex().equals(Cow.SEX_FEMALE)) {
+                                    validDams.add(allCows.get(i));
+                                    validDamNames.add(allCows.get(i).getEarTagNumber()+" ("+allCows.get(i).getName()+")");
+                                    if(thisCow.getServiceType().equals(Cow.SERVICE_TYPE_BULL) || thisCow.getServiceType().equals(Cow.SERVICE_TYPE_AI)) {
+                                        if(thisCow.getDam().getEarTagNumber().equals(allCows.get(i).getEarTagNumber())) {
+                                            damSelection = validDams.size() - 1;
+                                        }
+                                    }
+                                }
+                            }
+                        }
+
+                        selectedSireOwner = -1;
+                        String[] sireOwners = Locale.getArrayInLocale("bull_owners", this, Locale.LOCALE_ENGLISH);
+                        for(int i = 0; i < sireOwners.length; i++){
+                            if(sireOwners[i].equals(thisCow.getSire().getOwnerType())){
+                                selectedSireOwner = i;
+                            }
+                        }
+                        sireOwnerNameET.setText(thisCow.getSire().getOwner());
+
+                        String[] serviceTypesInEN = Locale.getArrayInLocale("service_types",this,Locale.LOCALE_ENGLISH);
+
+                        ArrayAdapter<String> siresArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,validSireNames);
+                        siresArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+                        sireS.setAdapter(siresArrayAdapter);
+                        sireS.setSelection(sireSelection);
+
+                        ArrayAdapter<String> damsArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,validDamNames);
+                        damsArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+                        damS.setAdapter(damsArrayAdapter);
+                        if(damSelection != -1)
+                            damS.setSelection(damSelection);
+
+                        ArrayAdapter<String> damsACTVAdapter = new ArrayAdapter<String>(this,android.R.layout.select_dialog_item,validDamNames);
+                        damACTV.setAdapter(damsACTVAdapter);
+                        if(damSelection != -1)
+                            damACTV.setText(validDamNames.get(damSelection));
+
+                        ArrayAdapter<String> siresACTVAdapter = new ArrayAdapter<String>(this, android.R.layout.select_dialog_item, validSireNames);
+                        sireACTV.setAdapter(siresACTVAdapter);
+                        if(sireSelection != -1)
+                            sireACTV.setText(validSireNames.get(sireSelection));
+
+                        for(int i = 0; i < serviceTypesInEN.length; i++) {
+                            if(serviceTypesInEN[i].equals("Bull") && thisCow.getServiceType().equals(Cow.SERVICE_TYPE_BULL)) {
+                                serviceTypeS.setSelection(i);
+                            }
+                            else if(serviceTypesInEN[i].equals("Artificial Insemination") && thisCow.getServiceType().equals(Cow.SERVICE_TYPE_AI)) {
+                                serviceTypeS.setSelection(i);
+                                strawNumberET.setText(thisCow.getSire().getStrawNumber());
+                            }
+                            else if(serviceTypesInEN[i].equals("Embryo Transfer") && thisCow.getServiceType().equals(Cow.SERVICE_TYPE_ET)) {
+                                serviceTypeS.setSelection(i);
+                                embryoNumberET.setText(thisCow.getDam().getEmbryoNumber());
+                            }
+                        }
+                    /*}
+                    else {
+                        serviceTypeTV.setVisibility(TextView.GONE);
+                        serviceTypeS.setVisibility(Spinner.GONE);
+                        sireTV.setVisibility(TextView.GONE);
+//                        sireS.setVisibility(Spinner.GONE);
+                        strawNumberTV.setVisibility(TextView.GONE);
+                        strawNumberET.setVisibility(EditText.GONE);
+                        damTV.setVisibility(TextView.GONE);
+//                        damS.setVisibility(Spinner.GONE);
+                        sireACTV.setVisibility(AutoCompleteTextView.GONE);
+                        sireOwnerTV.setVisibility(TextView.GONE);
+                        sireOwnerS.setVisibility(Spinner.GONE);
+                        sireOwnerNameTV.setVisibility(TextView.GONE);
+                        sireOwnerNameET.setVisibility(EditText.GONE);
+                        damACTV.setVisibility(AutoCompleteTextView.GONE);
+                        embryoNumberTV.setVisibility(TextView.GONE);
+                        embryoNumberET.setVisibility(EditText.GONE);
+                    }*/
+
+                    countryOfOriginACTV.setText(thisCow.getCountryOfOrigin());
+                }
+                else {
+                    Log.d(TAG,"Cow object is null");
+                }
+            }
+            else {
+                Log.d(TAG,"Farmer object is null");
+            }
+
+        }
+
+        if(nameET.getText().toString().trim().length() == 0 && earTagNumberET.getText().toString().trim().length() == 0){
+            //means that when the activity paused the last time it did not save data to the cow object. Try to get data from shared preferences
+            restoreEditTextData();
+        }
+    }
+
+    private void clearEditTextDataCache(){
+        Log.i(TAG, "Edit text cache cleared");
+
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_NAME, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_EAR_TAG_NUMBER, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_AGE, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DATE_OF_BIRTH, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_BREED, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DEFORMITY, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_STRAW_NUMBER, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_DAM, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_SIRE, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_EMBRYO_NUMBER, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_CRA_COUNTRY_OF_ORIGIN, "");
+
+        cacheData = false;
+    }
+
+    @Override
+    public void initTextInViews() {
+        String title = Locale.getStringInLocale("edit_cow",this);
+        this.setTitle(title);
+
+        nameETNHintTV.setText(" * " + Locale.getStringInLocale("ear_tag_no_or_name", this));
+        nameTV.setText(Locale.getStringInLocale("name",this));
+        earTagNumberTV.setText(Locale.getStringInLocale("ear_tag_number",this));
+
+        ageOrDOBHintTV.setText(" * " + Locale.getStringInLocale("age_or_dob", this));
+
+        ageTV.setText(Locale.getStringInLocale("age",this));
+        int ageTypeArrayID = Locale.getArrayIDInLocale("age_type_array",this);
+        if(ageTypeArrayID!=0){
+            ArrayAdapter<CharSequence> ageTypeArrayAdapter=ArrayAdapter.createFromResource(this, ageTypeArrayID, android.R.layout.simple_spinner_item);
+            ageTypeArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+            ageS.setAdapter(ageTypeArrayAdapter);
+        }
+        dateOfBirthTV.setText(Locale.getStringInLocale("date_of_birth",this));
+        breedTV.setText(Locale.getStringInLocale("breed",this));
+        sexTV.setText(" * "+Locale.getStringInLocale("sex",this));
+        int sexArrayID = Locale.getArrayIDInLocale("sex_array",this);
+        if(sexArrayID!=0) {
+            ArrayAdapter<CharSequence> sexArrayAdapter=ArrayAdapter.createFromResource(this, sexArrayID, android.R.layout.simple_spinner_item);
+            sexArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+            sexS.setAdapter(sexArrayAdapter);
+        }
+
+        milkingStatusTV.setText(" * " + Locale.getStringInLocale("cow_status", this));
+        inCalfStatusTV.setText(" * " + Locale.getStringInLocale("cow_in_calf", this));
+        ArrayAdapter<CharSequence> milkingStatusAdapter = ArrayAdapter.createFromResource(this, Locale.getArrayIDInLocale("cow_status_array", this), android.R.layout.simple_spinner_item);
+        milkingStatusAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        milkingStatusS.setAdapter(milkingStatusAdapter);
+
+        ArrayAdapter<CharSequence> inCalfAdapter = ArrayAdapter.createFromResource(this, Locale.getArrayIDInLocale("cow_in_calf_array", this), android.R.layout.simple_spinner_item);
+        inCalfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        inCalfStatusS.setAdapter(inCalfAdapter);
+
+        deformityTV.setText(Locale.getStringInLocale("deformity",this));
+        serviceTypeTV.setText(Locale.getStringInLocale("service_type_used",this));
+        int serviceTypesSireArrayID = Locale.getArrayIDInLocale("service_types",this);
+        if(serviceTypesSireArrayID!=0){
+            ArrayAdapter<CharSequence> serviceTypesAdapter = ArrayAdapter.createFromResource(this,serviceTypesSireArrayID,android.R.layout.simple_spinner_item);
+            serviceTypesAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+            serviceTypeS.setAdapter(serviceTypesAdapter);
+        }
+
+        sireTV.setText(Locale.getStringInLocale("sire",this));
+        sireOwnerTV.setText(Locale.getStringInLocale("sire_owner", this));
+
+        int sireOwnersID = Locale.getArrayIDInLocale("bull_owners", this);
+        if(sireOwnersID != 0){
+            ArrayAdapter<CharSequence> sireOwnersAdapter = ArrayAdapter.createFromResource(this,sireOwnersID,android.R.layout.simple_spinner_item);
+            sireOwnersAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+            sireOwnerS.setAdapter(sireOwnersAdapter);
+
+            if(selectedSireOwner != -1){
+                sireOwnerS.setSelection(selectedSireOwner);
+            }
+        }
+
+        sireOwnerNameTV.setText(Locale.getStringInLocale("name_sire_owner", this));
+        sireOwnerNameET.setHint(Locale.getStringInLocale("name_of_other_farmer_or_group", this));
+        damTV.setText(Locale.getStringInLocale("dam",this));
+        strawNumberTV.setText(Locale.getStringInLocale("straw_number",this));
+        embryoNumberTV.setText(Locale.getStringInLocale("embryo_number",this));
+        countryOfOriginTV.setText(Locale.getStringInLocale("other_countries",this));
+        commonCountriesTV.setText(Locale.getStringInLocale("country_of_origin",this));
+        cancelB.setText(Locale.getStringInLocale("cancel",this));
+        editB.setText(Locale.getStringInLocale("save", this));
+
+        breedDialog.setTitle(Locale.getStringInLocale("breed",this));
+        breeds=Locale.getArrayInLocale("breeds_array",this);
+        if(breeds==null) {
+            breeds = new String[1];
+            breeds[0] = "";
+        }
+        ArrayAdapter<String> breedArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,breeds);
+        breedLV.setAdapter(breedArrayAdapter);
+        dialogBreedOkayB.setText(Locale.getStringInLocale("okay",this));
+        int totalBreedSVHeight = 0;
+        for (int i = 0, len = breedArrayAdapter.getCount(); i < len; i++) {
+            View listItem = breedArrayAdapter.getView(i, null, breedLV);
+            //listItem.measure(0, 0);
+            int list_child_item_height = listItem.getLayoutParams().height + breedLV.getDividerHeight();//item height
+            totalBreedSVHeight += list_child_item_height; //
+        }
+        if(totalBreedSVHeight > 0){
+            breedLV.getLayoutParams().height = totalBreedSVHeight;
+            if(breedDialogSV.getLayoutParams().height > (totalBreedSVHeight + dialogBreedOkayB.getLayoutParams().height)){
+                breedDialogSV.getLayoutParams().height = totalBreedSVHeight + dialogBreedOkayB.getLayoutParams().height;
+            }
+        }
+
+        deformityDialog.setTitle(Locale.getStringInLocale("deformity",this));
+        deformities=Locale.getArrayInLocale("deformities_array",this);
+        if(deformities==null) {
+            deformities = new String[1];
+            deformities[0] = "";
+        }
+        ArrayAdapter<String> deformityArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,deformities);
+        deformityLV.setAdapter(deformityArrayAdapter);
+        specifyET.setHint(Locale.getStringInLocale("specify", this));
+        noDeformityCB.setText(Locale.getStringInLocale("no_deformity", this));
+        dialogDeformityOkayB.setText(Locale.getStringInLocale("okay",this));
+
+        sireACTV.setHint(Locale.getStringInLocale("enter_sire_etn", this));
+        damACTV.setHint(Locale.getStringInLocale("enter_dam_etn",this));
+
+        ArrayAdapter countryArrayAdapter = ArrayAdapter.createFromResource(this,R.array.countries,android.R.layout.select_dialog_item);
+        countryOfOriginACTV.setAdapter(countryArrayAdapter);
+        countryOfOriginACTV.setHint(Locale.getStringInLocale("specify_other_country", this));
+
+        int totalDeformitySVHeight = 0;
+        for (int i = 0, len = deformityArrayAdapter.getCount(); i < len; i++) {
+            View listItem = deformityArrayAdapter.getView(i, null, deformityLV);
+            //listItem.measure(0, 0);
+            int list_child_item_height = listItem.getLayoutParams().height + deformityLV.getDividerHeight();//item height
+            totalDeformitySVHeight += list_child_item_height; //
+        }
+
+        Log.d(TAG, "Height of no deformity checkbox = "+String.valueOf(noDeformityCB.getLayoutParams().height));
+        Log.d(TAG, "Margin top of deformity checkbox = "+String.valueOf(((ViewGroup.MarginLayoutParams)noDeformityCB.getLayoutParams()).topMargin));
+
+        if(totalDeformitySVHeight > 0){
+            deformityLV.getLayoutParams().height = totalDeformitySVHeight;
+            int svChildrenHeight = totalDeformitySVHeight +
+                    specifyET.getLayoutParams().height +
+                    noDeformityCB.getLayoutParams().height +
+                    ((ViewGroup.MarginLayoutParams)noDeformityCB.getLayoutParams()).topMargin +
+                    dialogDeformityOkayB.getLayoutParams().height +
+                    ((ViewGroup.MarginLayoutParams)dialogDeformityOkayB.getLayoutParams()).topMargin;
+
+            if(deformitySV.getLayoutParams().height > svChildrenHeight){
+                deformitySV.getLayoutParams().height= svChildrenHeight;
+            }
+        }
+
+        ArrayAdapter<CharSequence> commonCountriesArrayAdapter = ArrayAdapter.createFromResource(this,R.array.common_countries,android.R.layout.simple_spinner_item);
+        commonCountriesArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        commonCountriesS.setAdapter(commonCountriesArrayAdapter);
+    }
+
+    private void initMenuText(){
+        if(this.menu != null){
+            MenuItem mainMenuMI = menu.findItem(R.id.action_back_main_menu);
+            mainMenuMI.setTitle(Locale.getStringInLocale("back_to_main_menu", this));
+        }
+    }
+
+    @Override
+    public void onClick(View view) {
+        if(view==cancelB) {
+            Intent intent = new Intent(this, CowSelectionActivity.class);
+            intent.putExtra(CowSelectionActivity.KEY_ADMIN_DATA, adminData.toString());
+            startActivity(intent);
+        }
+        else if(view==editB) {
+            if(validateInput()) {
+                try{
+                    cacheThisCow();
+
+                    JSONObject cowJsonObject = thisCow.getJsonObject();
+                    cowJsonObject.put("farmer_id", farmer.getId());
+
+                    clearEditTextDataCache();
+
+                    Log.d(TAG, "Json Object for cow = "+cowJsonObject.toString());
+                    EditCowThread editCowThread = new EditCowThread();
+                    editCowThread.execute(cowJsonObject.toString());
+                }
+                catch (Exception e){
+                    e.printStackTrace();
+                }
+            }
+        }
+        else if(view==dateOfBirthET) {
+            dateOfBirthETClicked();
+        }
+        else if(view==breedET) {
+            breedETClicked();
+        }
+        else if(view==deformityET) {
+            deformityETClicked();
+        }
+        else if(view==dialogBreedOkayB) {
+            String selectedBreeds="";
+            SparseBooleanArray checkedBreeds=breedLV.getCheckedItemPositions();
+            for (int i=0; i<breedLV.getCount();i++)
+            {
+                if(checkedBreeds.get(i))
+                {
+                    if(!selectedBreeds.equals(""))
+                    {
+                        selectedBreeds=selectedBreeds+", "+breeds[i];
+                    }
+                    else
+                    {
+                        selectedBreeds=breeds[i];
+                    }
+                }
+            }
+            breedET.setText(selectedBreeds);
+            breedDialog.dismiss();
+        }
+        else if(view==dialogDeformityOkayB) {
+            String selectedDeformities="";
+            SparseBooleanArray checkedDeformities=deformityLV.getCheckedItemPositions();
+            for (int i=0; i<deformityLV.getCount();i++) {
+                if(checkedDeformities.get(i)) {
+                    if(!selectedDeformities.equals("")) {
+                        selectedDeformities=selectedDeformities+", "+deformities[i];
+                    }
+                    else {
+                        selectedDeformities=deformities[i];
+                    }
+                }
+            }
+            deformityET.setText(selectedDeformities);
+            deformityDialog.dismiss();
+            deformityOSpecifyText=specifyET.getText().toString();
+        }
+    }
+
+    @Override
+    public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
+        String dateString=String.valueOf(dayOfMonth)+"/"+String.valueOf(monthOfYear+1)+"/"+String.valueOf(year);//TODO: this might be a bug
+        dateOfBirthET.setText(dateString);
+        //setAgeFromDate(dateString);
+    }
+
+    @Override
+    public void onItemClick(AdapterView<?> parent, View view, int position, long id)
+    {
+        if(parent==breedLV) {
+            if(breedLV.isItemChecked(position)) {
+                selectedBreeds++;
+            }
+            else {
+                selectedBreeds--;
+            }
+            if(selectedBreeds>4) {
+                breedLV.setItemChecked(position,false);
+                selectedBreeds--;
+                Toast.makeText(this, Locale.getStringInLocale("maximum_of_four_breeds", this), Toast.LENGTH_LONG).show();
+            }
+        }
+        else if(parent==deformityLV) {
+            if(position==deformities.length-1){ //last deformity. should be other
+                if(deformityLV.isItemChecked(position)) {
+                    specifyET.setVisibility(EditText.VISIBLE);
+                }
+                else {
+                    specifyET.setVisibility(EditText.GONE);
+                    specifyET.setText("");
+                }
+            }
+
+            noDeformityCB.setChecked(false);
+        }
+    }
+
+    @Override
+    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
+        if(parent == serviceTypeS) {
+            changeServiceType();
+        }
+        else if(parent == commonCountriesS) {
+            toggleCountryOfOriginVisibility();
+        }
+        else if(parent == sireOwnerS){
+            toggleSireOwnerVisibility();
+        }
+        else if(parent == sexS){
+            toggleFemaleCowViewsVisibility();
+        }
+    }
+
+    @Override
+    public void onNothingSelected(AdapterView<?> parent) {
+
+    }
+
+    @Override
+    public void onFocusChange(View view, boolean hasFocus) {
+        if(view == dateOfBirthET && hasFocus){
+            if(dateOfBirthET.getText().toString().length() ==0 ){
+                dateOfBirthETClicked();
+            }
+        }
+        else if(view == breedET && hasFocus){
+            if(breedET.getText().toString().length() == 0){
+                breedETClicked();
+            }
+        }
+        else if(view == deformityET && hasFocus){
+            if(deformityET.getText().toString().length() == 0){
+                deformityETClicked();
+            }
+        }
+    }
+
+    @Override
+    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+        if(buttonView.equals(noDeformityCB)){
+            if(isChecked){
+                deformityLV.clearChoices();
+                ArrayAdapter<String> deformityArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,deformities);
+                deformityLV.setAdapter(deformityArrayAdapter);
+                specifyET.setVisibility(EditText.GONE);
+                specifyET.setText("");
+
+                deformityET.setHint(Locale.getStringInLocale("no_deformity", this));
+            }
+            else{
+                deformityET.setHint("");
+            }
+        }
+    }
+
+    @Override
+    public boolean onLongClick(View v) {
+        if(v.equals(dateOfBirthET)){
+            Log.w(TAG, "About to delete date in dateOfBirthET");
+            dateOfBirthET.setText("");
+        }
+        return false;
+    }
+
+    private void dateOfBirthETClicked() {
+        Date date=null;
+        if(dateOfBirthET.getText().toString().length()>0) {
+            try {
+                date=new SimpleDateFormat(dateFormat, java.util.Locale.ENGLISH).parse(dateOfBirthET.getText().toString());
+            }
+            catch (ParseException e) {
+                e.printStackTrace();
+            }
+        }
+        if(date==null) {
+            date=new Date();
+        }
+        Calendar calendar=new GregorianCalendar();
+        calendar.setTime(date);
+        datePickerDialog=new DatePickerDialog(this,this,calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH));
+        //datePickerDialog=createDialogWithoutDateField(this,calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH));
+        datePickerDialog.show();
+    }
+
+    private void breedETClicked() {
+        //uncheck everything in listview
+        for (int i=0; i<breedLV.getCount();i++) {
+            breedLV.setItemChecked(i,false);
+        }
+
+        String breedETString=breedET.getText().toString();
+        if(!breedETString.equals(null)||!breedETString.equals(""))
+        {
+            String[] selectedBreeds=breedETString.split(", ");
+            //for all of the breeds check if breed is in selected breeds
+            for(int i=0; i<breeds.length;i++)
+            {
+                String currentBreed=breeds[i];
+                for(int j=0; j<selectedBreeds.length;j++) {
+                    if(currentBreed.equals(selectedBreeds[j])) {
+                        breedLV.setItemChecked(i,true);
+                        break;
+                    }
+                }
+            }
+        }
+        breedDialog.show();
+    }
+
+    private void deformityETClicked() {
+        //uncheck everything in listview
+        for (int i=0;i<deformityLV.getCount();i++) {
+            deformityLV.setItemChecked(i,false);
+        }
+        String deformityETString=deformityET.getText().toString();
+        if(!deformityETString.equals(null)||!deformityETString.equals("")) {
+            String[] selectedDeformities=deformityETString.split(", ");
+            for (int i=0;i<deformities.length;i++)
+            {
+                String currentDeformity=deformities[i];
+                for (int j=0;j<selectedDeformities.length;j++)
+                {
+                    if(currentDeformity.equals(selectedDeformities[j]))
+                    {
+                        deformityLV.setItemChecked(i,true);
+                        if (i==deformities.length-1)
+                        {
+                            specifyET.setVisibility(EditText.VISIBLE);
+                            specifyET.setText(deformityOSpecifyText);
+                        }
+                        break;
+                    }
+                }
+            }
+        }
+        deformityDialog.show();
+    }
+
+    private void changeServiceType() {
+        String[] serviceTypesInEN = Locale.getArrayInLocale("service_types", this, Locale.LOCALE_ENGLISH);
+        if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Bull")) {
+            sireTV.setVisibility(TextView.VISIBLE);
+            sireOwnerTV.setVisibility(TextView.VISIBLE);
+            sireOwnerS.setVisibility(Spinner.VISIBLE);
+            toggleSireOwnerVisibility();
+//            sireS.setVisibility(Spinner.VISIBLE);
+            strawNumberTV.setVisibility(TextView.GONE);
+            strawNumberET.setVisibility(EditText.GONE);
+            damTV.setVisibility(TextView.VISIBLE);
+//            damS.setVisibility(Spinner.VISIBLE);
+            damS.setVisibility(Spinner.GONE);
+            damACTV.setVisibility(AutoCompleteTextView.VISIBLE);
+            sireACTV.setVisibility(AutoCompleteTextView.VISIBLE);
+            embryoNumberTV.setVisibility(TextView.GONE);
+            embryoNumberET.setVisibility(EditText.GONE);
+            commonCountriesTV.setVisibility(TextView.VISIBLE);
+            commonCountriesS.setVisibility(Spinner.VISIBLE);
+            toggleCountryOfOriginVisibility();
+        }
+        else if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Artificial Insemination")) {
+            sireTV.setVisibility(TextView.GONE);
+            sireOwnerTV.setVisibility(TextView.GONE);
+            sireOwnerS.setVisibility(Spinner.GONE);
+            sireOwnerNameTV.setVisibility(TextView.GONE);
+            sireOwnerNameET.setVisibility(EditText.GONE);
+//            sireS.setVisibility(Spinner.GONE);
+            strawNumberTV.setVisibility(TextView.VISIBLE);
+            strawNumberET.setVisibility(EditText.VISIBLE);
+            damTV.setVisibility(TextView.VISIBLE);
+//            damS.setVisibility(Spinner.VISIBLE);
+            damS.setVisibility(Spinner.GONE);
+            damACTV.setVisibility(AutoCompleteTextView.VISIBLE);
+            sireACTV.setVisibility(AutoCompleteTextView.GONE);
+            embryoNumberTV.setVisibility(TextView.GONE);
+            embryoNumberET.setVisibility(EditText.GONE);
+            commonCountriesTV.setVisibility(TextView.GONE);
+            commonCountriesS.setVisibility(Spinner.GONE);
+            countryOfOriginTV.setVisibility(TextView.GONE);
+            countryOfOriginACTV.setVisibility(AutoCompleteTextView.GONE);
+        }
+        else if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Embryo Transfer")) {
+            sireTV.setVisibility(TextView.GONE);
+            sireOwnerTV.setVisibility(TextView.GONE);
+            sireOwnerS.setVisibility(Spinner.GONE);
+            sireOwnerNameTV.setVisibility(TextView.GONE);
+            sireOwnerNameET.setVisibility(EditText.GONE);
+//            sireS.setVisibility(Spinner.GONE);
+            strawNumberTV.setVisibility(TextView.GONE);
+            strawNumberET.setVisibility(EditText.GONE);
+            damTV.setVisibility(TextView.GONE);
+            damS.setVisibility(Spinner.GONE);
+            damACTV.setVisibility(AutoCompleteTextView.GONE);
+            sireACTV.setVisibility(AutoCompleteTextView.GONE);
+            embryoNumberTV.setVisibility(TextView.VISIBLE);
+            embryoNumberET.setVisibility(EditText.VISIBLE);
+            commonCountriesTV.setVisibility(TextView.GONE);
+            commonCountriesS.setVisibility(Spinner.GONE);
+            countryOfOriginTV.setVisibility(TextView.GONE);
+            countryOfOriginACTV.setVisibility(AutoCompleteTextView.GONE);
+        }
+    }
+
+    private void toggleSireOwnerVisibility(){
+        String[] sireOwnersInEN = Locale.getArrayInLocale("bull_owners", this, Locale.LOCALE_ENGLISH);
+        if(sireOwnersInEN[sireOwnerS.getSelectedItemPosition()].equals("Own bull")){
+            sireOwnerNameTV.setVisibility(TextView.GONE);
+            sireOwnerNameET.setVisibility(EditText.GONE);
+        }
+        else{
+            sireOwnerNameTV.setVisibility(TextView.VISIBLE);
+            sireOwnerNameET.setVisibility(EditText.VISIBLE);
+        }
+    }
+
+    private void toggleCountryOfOriginVisibility(){
+        String[] commonCountries = getResources().getStringArray(R.array.common_countries);
+        if(commonCountries[commonCountriesS.getSelectedItemPosition()].equals("Other")) {
+            countryOfOriginACTV.setVisibility(AutoCompleteTextView.VISIBLE);
+            countryOfOriginTV.setVisibility(TextView.VISIBLE);
+            countryOfOriginACTV.setText("");
+        }
+        else {
+            countryOfOriginACTV.setVisibility(AutoCompleteTextView.GONE);
+            countryOfOriginTV.setVisibility(TextView.GONE);
+            countryOfOriginACTV.setText(commonCountries[commonCountriesS.getSelectedItemPosition()]);
+        }
+    }
+
+    private void toggleFemaleCowViewsVisibility(){
+        Log.d(TAG, "Toggling female views");
+        String[] sexInEN = Locale.getArrayInLocale("sex_array", this, Locale.LOCALE_ENGLISH);
+        if(sexInEN[sexS.getSelectedItemPosition()].equals(Cow.SEX_FEMALE)){
+            milkingStatusS.setVisibility(Spinner.VISIBLE);
+            milkingStatusTV.setVisibility(TextView.VISIBLE);
+
+            inCalfStatusS.setVisibility(Spinner.VISIBLE);
+            inCalfStatusTV.setVisibility(TextView.VISIBLE);
+        }
+        else{
+            milkingStatusS.setVisibility(Spinner.GONE);
+            milkingStatusTV.setVisibility(TextView.GONE);
+
+            inCalfStatusS.setVisibility(Spinner.GONE);
+            inCalfStatusTV.setVisibility(TextView.GONE);
+        }
+    }
+
+    private boolean validateInput() {
+        String earTagNumberText=earTagNumberET.getText().toString();
+        String nameText=nameET.getText().toString();
+        if((earTagNumberText==null||earTagNumberText.equals("")) && (nameText==null||nameText.equals(""))) {
+            Toast.makeText(this,Locale.getStringInLocale("enter_ear_tag_no_or_name",this),Toast.LENGTH_LONG).show();
+            return false;
+        }
+
+        String[] sexInEN = Locale.getArrayInLocale("sex_array", this, Locale.LOCALE_ENGLISH);
+        if(sexInEN[sexS.getSelectedItemPosition()].equals(Cow.SEX_FEMALE)){
+            String[] inCalfArray = Locale.getArrayInLocale("cow_in_calf_array",this);
+            String[] milkingStatusArray = Locale.getArrayInLocale("cow_status_array",this);
+            if(inCalfStatusS.getSelectedItemPosition() == -1 || inCalfArray[inCalfStatusS.getSelectedItemPosition()].length() == 0){
+                Toast.makeText(this, Locale.getStringInLocale("enter_in_calf_status", this), Toast.LENGTH_LONG).show();
+                return false;
+            }
+            if(milkingStatusS.getSelectedItemPosition() == -1 || milkingStatusArray[milkingStatusS.getSelectedItemPosition()].length() == 0){
+                Toast.makeText(this, Locale.getStringInLocale("enter_milk_status_of_cow", this), Toast.LENGTH_LONG).show();
+                return false;
+            }
+        }
+
+        if(dateOfBirthET.getText().toString().trim().equals("") && ageET.getText().toString().trim().equals("")){
+            Toast.makeText(this, Locale.getStringInLocale("enter_age_or_dob", this), Toast.LENGTH_LONG).show();
+            return false;
+        }
+        else if (!dateOfBirthET.getText().toString().trim().equals("") && !ageET.getText().toString().trim().equals("")) {//both dob and age are set
+            String[] ageTypesInEN = Locale.getArrayInLocale("age_type_array", this, Locale.LOCALE_ENGLISH);
+            String ageType = ageTypesInEN[ageS.getSelectedItemPosition()];
+            float unitAge = 0;
+            if (ageType.equals("Years")) {
+                unitAge = 31557600000L;
+            } else if (ageType.equals("Months")) {
+                unitAge = 2628000000L;
+            } else if (ageType.equals("Days")) {
+                unitAge = 86400000L;
+            }
+
+            SimpleDateFormat simpleDateFormat = new SimpleDateFormat(dateFormat);
+
+            try {
+                Date enteredDate = simpleDateFormat.parse(dateOfBirthET.getText().toString());
+                long enteredDateMs = enteredDate.getTime();
+                long ageMs = (long) (new Date().getTime() - (Integer.parseInt(ageET.getText().toString()) * unitAge));
+                long msDiff = Math.abs(ageMs - enteredDateMs);
+                float unitDiff = msDiff / unitAge;
+                if (unitDiff > 1) {
+                    Toast.makeText(this, Locale.getStringInLocale("age_diff_from_dob", this), Toast.LENGTH_LONG).show();
+                    return false;
+                }
+            } catch (ParseException e) {
+                e.printStackTrace();
+            }
+        }
+
+        if(countryOfOriginACTV.getText().toString().length() > 0) {
+            String[] countries = this.getResources().getStringArray(R.array.countries);
+            boolean countryFound = false;
+            for(int i = 0; i < countries.length; i++) {
+                if(countries[i].equals(countryOfOriginACTV.getText().toString())) {
+                    countryFound = true;
+                    break;
+                }
+            }
+            if(!countryFound) {
+                Toast.makeText(this,Locale.getStringInLocale("country_not_found",this),Toast.LENGTH_LONG).show();
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    private void cacheThisCow() {
+        clearEditTextDataCache();
+
+        thisCow.setName(nameET.getText().toString());
+
+        thisCow.setEarTagNumber(earTagNumberET.getText().toString());
+        thisCow.setDateOfBirth(dateOfBirthET.getText().toString());
+        thisCow.setAge((ageET.getText().toString() == null || ageET.getText().toString().length() == 0) ? -1 : Integer.parseInt(ageET.getText().toString()));
+        String[] ageTypesInEN = Locale.getArrayInLocale("age_type_array",this,Locale.LOCALE_ENGLISH);
+        if(ageTypesInEN[ageS.getSelectedItemPosition()].equals("Days")) {
+            thisCow.setAgeType(Cow.AGE_TYPE_DAY);
+        }
+        else if(ageTypesInEN[ageS.getSelectedItemPosition()].equals("Months")) {
+            thisCow.setAgeType(Cow.AGE_TYPE_MONTH);
+        }
+        else if(ageTypesInEN[ageS.getSelectedItemPosition()].equals("Years")) {
+            thisCow.setAgeType(Cow.AGE_TYPE_YEAR);
+        }
+        thisCow.setDateOfBirth(dateOfBirthET.getText().toString());
+        thisCow.setBreeds(breedET.getText().toString().split(", "), this, false);
+
+        thisCow.setDeformities(deformityET.getText().toString().split(", "), this);
+        thisCow.setOtherDeformity(specifyET.getText().toString());
+        thisCow.setCountryOfOrigin(countryOfOriginACTV.getText().toString());
+        String[] sexInEN = Locale.getArrayInLocale("sex_array",this,Locale.LOCALE_ENGLISH);
+        if(sexInEN[sexS.getSelectedItemPosition()].equals("Female")) {
+            thisCow.setSex(Cow.SEX_FEMALE);
+
+            String[] milkingStatusInEN = Locale.getArrayInLocale("cow_status_array", this, Locale.LOCALE_ENGLISH);
+            thisCow.setMilkingStatus(milkingStatusInEN[milkingStatusS.getSelectedItemPosition()], this);
+            String[] inCalfArrayInEN = Locale.getArrayInLocale("cow_in_calf_array", this, Locale.LOCALE_ENGLISH);
+            if(inCalfArrayInEN[inCalfStatusS.getSelectedItemPosition()].equals(Cow.COW_IN_CALF)){
+                thisCow.setInCalf(true);
+            }
+            else{
+                thisCow.setInCalf(false);
+            }
+        }
+        else if(sexInEN[sexS.getSelectedItemPosition()].equals("Male")) {
+            thisCow.setSex(Cow.SEX_MALE);
+        }
+        //if(farmer.getMode().equals(Farmer.MODE_INITIAL_REGISTRATION)) {
+            String[] serviceTypesInEN = Locale.getArrayInLocale("service_types",this,Locale.LOCALE_ENGLISH);
+            if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Bull")) {
+                thisCow.setServiceType(Cow.SERVICE_TYPE_BULL);
+
+                Sire sire = new Sire();
+//                sire.setName(validSires.get(sireS.getSelectedItemPosition()).getName());
+//                sire.setEarTagNumber(validSires.get(sireS.getSelectedItemPosition()).getEarTagNumber());
+
+                for(int i = 0; i < validSires.size(); i++){
+                    if(sireACTV.getText().toString().equals(validSires.get(i).getEarTagNumber()+" ("+validSires.get(i).getName()+")")){
+                        sire.setEarTagNumber(validSires.get(i).getEarTagNumber());
+                        sire.setName(validSires.get(i).getName());
+                    }
+                }
+                if(sire.getEarTagNumber().trim().equals("")){//if not yet set then assume the sire is not part of the herd
+                    sire.setEarTagNumber(sireACTV.getText().toString());
+                }
+
+                String[] sireOwnersInEN = Locale.getArrayInLocale("bull_owners", this, Locale.LOCALE_ENGLISH);
+                sire.setOwnerType(sireOwnersInEN[sireOwnerS.getSelectedItemPosition()]);
+                sire.setOwner(sireOwnerNameET.getText().toString());
+                thisCow.setSire(sire);
+
+                Dam dam =new Dam();
+//                dam.setName(validDams.get(damS.getSelectedItemPosition()).getName());
+//                dam.setEarTagNumber(validDams.get(damS.getSelectedItemPosition()).getEarTagNumber());
+
+                for(int i = 0; i < validDams.size(); i++ ){
+                    if(damACTV.getText().toString().equals(validDams.get(i).getEarTagNumber()+" ("+validDams.get(i).getName()+")")){
+                        dam.setEarTagNumber(validDams.get(i).getEarTagNumber());
+                        dam.setName(validDams.get(i).getName());
+                    }
+                }
+                if(dam.getEarTagNumber().trim().equals("")){//if not yet set then assume the dam is not part of the herd
+                    dam.setEarTagNumber(damACTV.getText().toString());
+                }
+                thisCow.setDam(dam);
+            }
+            else if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Artificial Insemination")) {
+                thisCow.setServiceType(Cow.SERVICE_TYPE_AI);
+
+                Sire sire = new Sire();
+                sire.setStrawNumber(strawNumberET.getText().toString());
+                thisCow.setSire(sire);
+
+                Dam dam =new Dam();
+//                dam.setName(validDams.get(damS.getSelectedItemPosition()).getName());
+//                dam.setEarTagNumber(validDams.get(damS.getSelectedItemPosition()).getEarTagNumber());
+
+                for(int i = 0; i < validDams.size(); i++ ){
+                    if(damACTV.getText().toString().equals(validDams.get(i).getEarTagNumber()+" ("+validDams.get(i).getName()+")")){
+                        dam.setEarTagNumber(validDams.get(i).getEarTagNumber());
+                        dam.setName(validDams.get(i).getName());
+                    }
+                }
+                if(dam.getEmbryoNumber().trim().equals("")){
+                    dam.setEarTagNumber(damACTV.getText().toString());
+                }
+                thisCow.setDam(dam);
+            }
+            else if(serviceTypesInEN[serviceTypeS.getSelectedItemPosition()].equals("Embryo Transfer")) {
+                thisCow.setServiceType(Cow.SERVICE_TYPE_ET);
+
+                Dam dam =new Dam();
+//                dam.setName(validDams.get(damS.getSelectedItemPosition()).getName());
+//                dam.setEarTagNumber(validDams.get(damS.getSelectedItemPosition()).getEarTagNumber());
+
+                for(int i = 0; i < validDams.size(); i++ ){
+                    if(damACTV.getText().toString().equals(validDams.get(i).getEarTagNumber()+" ("+validDams.get(i).getName()+")")){
+                        dam.setEarTagNumber(validDams.get(i).getEarTagNumber());
+                        dam.setName(validDams.get(i).getName());
+                    }
+                }
+                if(dam.getEmbryoNumber().trim().equals("")){
+                    dam.setEarTagNumber(damACTV.getText().toString());
+                }
+                thisCow.setDam(dam);
+            }
+        //}
+        farmer.setCow(thisCow,index);
+    }
+
+    private class EditCowThread extends AsyncTask<String, Integer, String>{
+
+        private ProgressDialog progressDialog;
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(EditCowActivity.this, "", Locale.getStringInLocale("loading_please_wait", EditCowActivity.this), true);
+        }
+
+        @Override
+        protected String doInBackground(String... params) {
+            return DataHandler.sendDataToServer(EditCowActivity.this, params[0], DataHandler.ADMIN_EDIT_COW_URL, true);
+        }
+
+        @Override
+        protected void onPostExecute(String result) {
+            super.onPostExecute(result);
+
+            progressDialog.dismiss();
+
+            if(result==null){
+                String httpError = DataHandler.getSharedPreference(EditCowActivity.this, "http_error", "No Error thrown to application. Something must be really wrong");
+                Toast.makeText(EditCowActivity.this, httpError, Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
+                Toast.makeText(EditCowActivity.this, Locale.getStringInLocale("generic_sms_error", EditCowActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
+                Toast.makeText(EditCowActivity.this, Locale.getStringInLocale("no_service", EditCowActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
+                Toast.makeText(EditCowActivity.this, Locale.getStringInLocale("radio_off", EditCowActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
+                Toast.makeText(EditCowActivity.this, Locale.getStringInLocale("server_not_receive_sms", EditCowActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.ACKNOWLEDGE_OK)){
+                try{
+                    Intent intent = new Intent(EditCowActivity.this, CowSelectionActivity.class);
+                    intent.putExtra(CowSelectionActivity.KEY_ADMIN_DATA, adminData);//since this activity
+                    startActivity(intent);
+                }
+                catch (Exception e){
+                    e.printStackTrace();
+                }
+            }
+            else{
+                Toast.makeText(EditCowActivity.this, Locale.getStringInLocale("problem_connecting_to_server", EditCowActivity.this), Toast.LENGTH_LONG).show();
+            }
+        }
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/EditFarmerActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/EditFarmerActivity.java
new file mode 100644
index 0000000..98b9016
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/EditFarmerActivity.java
@@ -0,0 +1,612 @@
+package org.cgiar.ilri.np.farmer;
+
+import android.app.AlertDialog;
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.location.Criteria;
+import android.location.Location;
+import android.location.LocationListener;
+import android.location.LocationManager;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.provider.Settings;
+import android.telephony.TelephonyManager;
+import android.util.Log;
+import android.view.View;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.Spinner;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.actionbarsherlock.app.SherlockActivity;
+import com.actionbarsherlock.view.Menu;
+import com.actionbarsherlock.view.MenuInflater;
+import com.actionbarsherlock.view.MenuItem;
+
+import org.cgiar.ilri.np.farmer.backend.DataHandler;
+import org.cgiar.ilri.np.farmer.backend.Locale;
+import org.cgiar.ilri.np.farmer.backend.database.DatabaseHelper;
+import org.cgiar.ilri.np.farmer.carrier.Farmer;
+import org.json.JSONArray;
+
+import java.util.ArrayList;
+import java.util.List;
+
+
+public class EditFarmerActivity extends SherlockActivity implements NPActivity, View.OnClickListener, LocationListener {
+    private static final String TAG = "EditFarmerActivity";
+
+
+    private Menu menu;
+    private TextView fullNameTV;
+    private EditText fullNameET;
+    private TextView preferredLanguageTV;
+    private Spinner preferredLanguageS;
+    private TextView extensionPersonnelTV;
+    private Spinner extensionPersonnelS;
+    private TextView mobileNumberTV;
+    private EditText mobileNumberET;
+    private TextView farmLocTV;
+    private Button recordLocB;
+    private TextView siteTV;
+    private Spinner siteS;
+    private TextView isActiveTV;
+    private Spinner isActiveS;
+    private Button editB;
+    private Button cancelB;
+
+    private String adminData;
+    private Farmer farmer;
+    private List<String> languages;
+    private boolean cacheData;
+    private List<String> vetNames;
+    private String longitude;
+    private String latitude;
+    private LocationManager locationManager;
+    private ProgressDialog gpsProgressDialog;
+    private boolean locationGotten;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_edit_farmer);
+
+        languages = Locale.getAllLanguages(this);
+        cacheData = true;
+
+        fullNameTV=(TextView)this.findViewById(R.id.full_name_tv);
+        fullNameET=(EditText)this.findViewById(R.id.full_name_et);
+        preferredLanguageTV = (TextView)this.findViewById(R.id.preferred_language_tv);
+        preferredLanguageS = (Spinner)this.findViewById(R.id.preferred_language_s);
+        extensionPersonnelTV=(TextView)this.findViewById(R.id.extension_personnel_tv);
+        extensionPersonnelS=(Spinner)this.findViewById(R.id.extension_personnel_s);
+        mobileNumberTV=(TextView)this.findViewById(R.id.mobile_number_tv);
+        mobileNumberET=(EditText)this.findViewById(R.id.mobile_number_et);
+        TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
+        //Toast.makeText(this,telephonyManager.getSimSerialNumber(),Toast.LENGTH_LONG).show();
+        mobileNumberET.setText(telephonyManager.getLine1Number());
+        farmLocTV = (TextView)findViewById(R.id.farm_loc_tv);
+        recordLocB = (Button)findViewById(R.id.record_loc_b);
+        recordLocB.setOnClickListener(this);
+        siteTV = (TextView)findViewById(R.id.site_tv);
+        siteS = (Spinner)findViewById(R.id.site_s);
+        isActiveTV = (TextView)findViewById(R.id.is_active_tv);
+        isActiveS = (Spinner)findViewById(R.id.is_active_s);
+        editB=(Button)this.findViewById(R.id.edit_b);
+        editB.setOnClickListener(this);
+        cancelB =(Button)this.findViewById(R.id.cancel_b);
+        cancelB.setOnClickListener(this);
+
+        //init text according to locale
+        initTextInViews();
+    }
+
+    public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu) {
+        MenuInflater inflater = getSupportMenuInflater();
+        inflater.inflate(R.menu.edit_farmer, menu);
+        this.menu = menu;
+        initMenuText();
+        return true;
+    }
+
+    public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem item) {
+        // Handle item selection
+        if(Language.processLanguageMenuItemSelected(this, this, item)){
+            return true;
+        }
+        else if(item.getItemId() == R.id.action_back_main_menu) {
+            DialogInterface.OnClickListener onClickListener = new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialog, int which) {
+                    if(which==DialogInterface.BUTTON_POSITIVE){
+                        dialog.dismiss();
+
+                        clearEditTextDataCache();
+
+                        Intent intent = new Intent(EditFarmerActivity.this, MainMenu.class);
+                        intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_ADMIN);
+                        intent.putExtra(MainMenu.KEY_ADMIN_DATA, adminData);
+                        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+                        startActivity(intent);
+                    }
+                    else{
+                        dialog.cancel();
+                    }
+                }
+            };
+            AlertDialog mainMenuDialog = Utils.createMainMenuDialog(this, onClickListener);
+            mainMenuDialog.show();
+        }
+        return false;
+    }
+
+    @Override
+    public void initTextInViews() {
+        setTitle(Locale.getStringInLocale("edit_farmer", this));
+        fullNameTV.setText(" * " + Locale.getStringInLocale("full_name", this));
+        extensionPersonnelTV.setText(" * " + Locale.getStringInLocale("extension_p", this));
+
+        List<String> tmpVetNames = new ArrayList<String>();
+        tmpVetNames.add("");
+        ArrayAdapter<String> epArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,tmpVetNames);
+        epArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        extensionPersonnelS.setAdapter(epArrayAdapter);
+
+        mobileNumberTV.setText(" * " + Locale.getStringInLocale("phone_number", this));
+        preferredLanguageTV.setText(" * "+Locale.getStringInLocale("preferred_language", this));
+
+        ArrayAdapter<String> languageAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item, languages);
+        languageAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        preferredLanguageS.setAdapter(languageAdapter);
+
+        recordLocB.setText(Locale.getStringInLocale("rec_farm_loc", this));
+
+        siteTV.setText(" * " + Locale.getStringInLocale("site", this));
+
+        ArrayAdapter<String> siteArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item, getResources().getStringArray(R.array.sites));
+        siteArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        siteS.setAdapter(siteArrayAdapter);
+
+        isActiveTV.setText(" * " + Locale.getStringInLocale("is_active", this));
+
+        ArrayAdapter<String> isActiveArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item, Locale.getArrayInLocale("yes_no", this));
+        isActiveArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        isActiveS.setAdapter(isActiveArrayAdapter);
+
+        editB.setText(Locale.getStringInLocale("save", this));
+        cancelB.setText(Locale.getStringInLocale("cancel", this));
+    }
+
+    private void initMenuText(){
+        if(this.menu != null){
+            MenuItem mainMenuMI = menu.findItem(R.id.action_back_main_menu);
+            mainMenuMI.setTitle(Locale.getStringInLocale("back_to_main_menu", this));
+        }
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        Bundle bundle = this.getIntent().getExtras();
+        if(bundle != null){
+            adminData = bundle.getString(FarmerSelectionActivity.KEY_ADMIN_DATA);
+            farmer = bundle.getParcelable(Farmer.PARCELABLE_KEY);
+            if(farmer != null){
+                fullNameET.setText(farmer.getFullName());
+                mobileNumberET.setText(farmer.getMobileNumber());
+
+                String prefLanguage = Locale.getLanguage(this, farmer.getPreferredLocale());
+
+                for(int i = 0; i < languages.size(); i++){
+                    if(languages.get(i).equals(prefLanguage)){
+                        preferredLanguageS.setSelection(i);
+                    }
+                }
+
+                String[] yesNoInEN = Locale.getArrayInLocale("yes_no", this, Locale.LOCALE_ENGLISH);
+                for(int i = 0; i < yesNoInEN.length; i++){
+                    if(yesNoInEN[i].equals("Yes") && farmer.isActive()){
+                        isActiveS.setSelection(i);
+                    }
+                    else if(yesNoInEN[i].equals("No") && !farmer.isActive()){
+                        isActiveS.setSelection(i);
+                    }
+                }
+
+                String[] sites = getResources().getStringArray(R.array.sites);
+                for(int i = 0; i < sites.length; i++){
+                    if(sites[i].equals(farmer.getSite())){
+                        siteS.setSelection(i);
+                    }
+                }
+
+                updateFarmLocation(farmer.getLongitude(), farmer.getLatitude());
+
+                //fetch extension personnel names from server. Do this after farmer object is initialized since the thread is going to use this object
+                FetchVetsThread fetchVetsThread = new FetchVetsThread();
+                fetchVetsThread.execute(0);
+            }
+            else{
+                Log.e(TAG, "Parcelable farmer object from previous activity is null");
+            }
+        }
+        else{
+            Log.e(TAG, "Unable to get data from previous activity");
+        }
+    }
+
+    private void cacheEditTextData(){
+        if(cacheData) {
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_FULL_NAME, fullNameET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_MOBILE_NUMBER, mobileNumberET.getText().toString());
+        }
+    }
+
+    private void restoreEditTextData(){
+        fullNameET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_FRA_FULL_NAME, ""));
+        mobileNumberET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_FRA_MOBILE_NUMBER, ""));
+    }
+
+    private void clearEditTextDataCache(){
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_FULL_NAME, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_MOBILE_NUMBER, "");
+
+        cacheData = false;
+    }
+
+
+    @Override
+    public void onClick(View v) {
+        if(v.equals(cancelB)){
+            Intent intent = new Intent(this, FarmerSelectionActivity.class);
+            intent.putExtra(FarmerSelectionActivity.KEY_ADMIN_DATA, adminData);
+            startActivity(intent);
+        }
+        else if(v.equals(recordLocB)){
+            buildGPSAlert();
+        }
+        else if(v.equals(editB)){
+            if(validateInput()){
+                cacheFarmer();
+
+                EditFarmerThread editFarmerThread = new EditFarmerThread();
+                editFarmerThread.execute(farmer.getJsonObject().toString());
+            }
+        }
+    }
+
+    private void cacheFarmer()
+    {
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_FULL_NAME, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_EXTENSION_PERSONNEL, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_MOBILE_NUMBER, "");
+
+        farmer.setFullName(fullNameET.getText().toString());
+        if(vetNames != null && extensionPersonnelS.getSelectedItemPosition() != -1){
+            farmer.setExtensionPersonnel(vetNames.get(extensionPersonnelS.getSelectedItemPosition()));
+        }
+        else{
+            farmer.setExtensionPersonnel("");
+        }
+
+        if(languages != null && preferredLanguageS.getSelectedItemPosition() != -1){
+            farmer.setPreferredLocale(Locale.getLocaleCode(this, languages.get(preferredLanguageS.getSelectedItemPosition())));
+        }
+
+        String[] yesNoInEN = Locale.getArrayInLocale("yes_no", this, Locale.LOCALE_ENGLISH);
+        if(isActiveS.getSelectedItemPosition() != -1){
+            if(yesNoInEN[isActiveS.getSelectedItemPosition()].equals("Yes")){
+                farmer.setActive(true);
+            }
+            else if(yesNoInEN[isActiveS.getSelectedItemPosition()].equals("No")){
+                farmer.setActive(false);
+            }
+        }
+
+        String[] sites = getResources().getStringArray(R.array.sites);
+        farmer.setSite(sites[siteS.getSelectedItemPosition()]);
+
+        farmer.setMobileNumber(mobileNumberET.getText().toString());
+
+        farmer.setMode(Farmer.MODE_EDIT_FARMER);
+    }
+
+    private void buildGPSAlert(){
+        AlertDialog.Builder builder = new AlertDialog.Builder(this);
+        builder.setMessage(Locale.getStringInLocale("are_you_in_farmers_farm",this));
+        builder.setPositiveButton(Locale.getStringInLocale("yes",this), new DialogInterface.OnClickListener(){
+
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                dialog.dismiss();
+                getGPSCoordinates();
+            }
+        });
+        builder.setNegativeButton(Locale.getStringInLocale("no",this), new DialogInterface.OnClickListener(){
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                dialog.dismiss();
+            }
+        });
+
+        AlertDialog alertDialog = builder.create();
+        alertDialog.show();
+    }
+
+    private void getGPSCoordinates() {
+        locationManager=(LocationManager)getSystemService(LOCATION_SERVICE);
+        if(locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
+            //Toast.makeText(this,"gps started",Toast.LENGTH_LONG).show();
+            locationGotten = false;
+            gpsProgressDialog = ProgressDialog.show(EditFarmerActivity.this, "", Locale.getStringInLocale("accuracy", EditFarmerActivity.this) + " : " +Locale.getStringInLocale("unknown", EditFarmerActivity.this), true);
+            gpsProgressDialog.setCancelable(true);
+            gpsProgressDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {
+                @Override
+                public void onCancel(DialogInterface dialog) {
+                    locationGotten = true;
+                }
+            });
+
+            Criteria criteria=new Criteria();
+            String provider=locationManager.getBestProvider(criteria,false);
+            Location location=locationManager.getLastKnownLocation(provider);
+            locationManager.requestLocationUpdates(provider,18000,1000,this);//If farmer  is moving at 200km/h, will still be able to update!
+            if(location!=null)
+            {
+                onLocationChanged(location);
+            }
+        }
+        else {
+            AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(this);
+            alertDialogBuilder.setTitle(Locale.getStringInLocale("enable_gps",this));
+            alertDialogBuilder
+                    .setMessage(Locale.getStringInLocale("reason_for_enabling_gps", this))
+                    .setCancelable(false)
+                    .setPositiveButton(Locale.getStringInLocale("okay",this), new DialogInterface.OnClickListener()
+                    {
+                        @Override
+                        public void onClick(DialogInterface dialog, int which)
+                        {
+                            Intent intent=new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
+                            startActivity(intent);
+                        }
+                    })
+                    .setNegativeButton(Locale.getStringInLocale("cancel",this), new DialogInterface.OnClickListener()
+                    {
+                        @Override
+                        public void onClick(DialogInterface dialog, int which)
+                        {
+                            dialog.cancel();
+                        }
+                    });
+            AlertDialog alertDialog=alertDialogBuilder.create();
+            alertDialog.show();
+
+        }
+    }
+
+    @Override
+    public void onLocationChanged(Location location) {
+        if(!locationGotten){
+            latitude=String.valueOf(location.getLatitude());
+            longitude=String.valueOf(location.getLongitude());
+
+            farmer.setLatitude(latitude);
+            farmer.setLongitude(longitude);
+
+            updateFarmLocation(longitude, latitude);
+
+            Log.d(TAG, "latitude : " + latitude);
+            Log.d(TAG, "longitude : " + longitude);
+            if(latitude !=null && longitude != null){
+                String lastDigitInLong = longitude.substring(longitude.length() - 1, longitude.length());
+                String longCompare = longitude.substring(0, longitude.length() - 1) + String.valueOf(Integer.parseInt(lastDigitInLong) + 1);
+
+                String lastDigitInLat = latitude.substring(latitude.length() - 1, latitude.length());
+                String latCompare = latitude.substring(0, latitude.length() - 1) + String.valueOf(Integer.parseInt(lastDigitInLat) + 1);
+
+                float[] accuracy = new float[1];
+                double lat1 = Double.parseDouble(latitude);
+                double lon1 = Double.parseDouble(longitude);
+                double lat2 = Double.parseDouble(latCompare);
+                double lon2 = Double.parseDouble(longCompare);
+                Location.distanceBetween(lat1, lon1, lat2, lon2, accuracy);
+
+                int accuracyInM =(int) (accuracy[0] * 0.000621371192f);
+                Log.d(TAG, "Accuracy at "+String.valueOf(accuracyInM));
+
+                gpsProgressDialog.setMessage(Locale.getStringInLocale("accuracy", this) + " : " + String.valueOf(accuracyInM) + " M");
+
+                if(accuracyInM < 4){
+                    locationGotten = true;
+                    locationManager.removeUpdates(this);
+                    gpsProgressDialog.dismiss();
+                }
+            }
+        }
+    }
+
+    @Override
+    public void onStatusChanged(String provider, int status, Bundle extras) {
+
+    }
+
+    @Override
+    public void onProviderEnabled(String provider) {
+
+    }
+
+    @Override
+    public void onProviderDisabled(String provider) {
+
+    }
+
+    public void updateFarmLocation(String longitude, String latitude){
+        String farmLoc = Locale.getStringInLocale("farm_location", this);
+        if(DataHandler.isNull(farmer.getLongitude()) || farmer.getLongitude().length() == 0){
+            farmLoc = farmLoc + "\n \t Longitude: " + Locale.getStringInLocale("not_set", this);
+        }
+        else{
+            farmLoc = farmLoc + "\n \t Longitude: " + longitude;
+        }
+
+        if(DataHandler.isNull(farmer.getLatitude()) || farmer.getLatitude().length() == 0){
+            farmLoc = farmLoc + "\n \t Latitude: " + Locale.getStringInLocale("not_set", this);
+        }
+        else{
+            farmLoc = farmLoc + "\n \t Latitude: " + latitude;
+        }
+        farmLocTV.setText(farmLoc);
+    }
+
+    private boolean validateInput()
+    {
+        String nameText=fullNameET.getText().toString();
+        if(nameText==null || nameText.equals(""))
+        {
+            Toast.makeText(this,Locale.getStringInLocale("enter_farmer_name", this),Toast.LENGTH_LONG).show();
+            return false;
+        }
+        else if(nameText.split(" ").length < 2){
+            Toast.makeText(this, Locale.getStringInLocale("enter_two_names", this), Toast.LENGTH_LONG).show();
+            return false;
+        }
+
+        String mobileNumberText=mobileNumberET.getText().toString();
+        if(mobileNumberText==null||mobileNumberText.equals(""))
+        {
+            Toast.makeText(this,Locale.getStringInLocale("enter_farmer_mobile_no", this),Toast.LENGTH_LONG).show();
+            return false;
+        }
+        else if(mobileNumberText.length() != 10){
+            Toast.makeText(this, Locale.getStringInLocale("phone_number_not_valid", this), Toast.LENGTH_LONG).show();
+            return false;
+        }
+
+        if(vetNames == null){
+            Toast.makeText(this, Locale.getStringInLocale("epersonnel_tshoot", this), Toast.LENGTH_LONG).show();
+            return false;
+        }
+        else if(extensionPersonnelS.getSelectedItemPosition() == -1 || vetNames.get(extensionPersonnelS.getSelectedItemPosition()).length() == 0){
+            Toast.makeText(this, Locale.getStringInLocale("select_epersonnel", this), Toast.LENGTH_LONG).show();
+            return  false;
+        }
+
+        String[] sites = getResources().getStringArray(R.array.sites);
+        if(sites[siteS.getSelectedItemPosition()].length() == 0){
+            Toast.makeText(this, Locale.getStringInLocale("specify_site", this), Toast.LENGTH_LONG).show();
+            return false;
+        }
+        return true;
+    }
+
+    private class FetchVetsThread extends AsyncTask<Integer, Integer, String> {
+        private ProgressDialog progressDialog;
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(EditFarmerActivity.this, "", Locale.getStringInLocale("loading_please_wait", EditFarmerActivity.this), true);
+        }
+
+        @Override
+        protected String doInBackground(Integer... params) {
+            Log.d(TAG, "Fetching extension personnel from server");
+
+            return DataHandler.sendDataToServer(EditFarmerActivity.this, "", DataHandler.FARMER_FETCH_VETS_URL, true, DatabaseHelper.TABLE_EXTENSION_PERSONNEL);
+        }
+
+        @Override
+        protected void onPostExecute(String result) {
+            super.onPostExecute(result);
+            progressDialog.dismiss();
+
+            if(result == null){
+                Toast.makeText(EditFarmerActivity.this, Locale.getStringInLocale("unable_to_get_epersonnel", EditFarmerActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else{
+                try{
+                    Log.d(TAG, "result is "+result);
+                    JSONArray vetJsonArray = new JSONArray(result);
+                    vetNames = new ArrayList<String>();
+                    vetNames.add("");
+                    for(int i = 0; i < vetJsonArray.length(); i++){
+                        vetNames.add(vetJsonArray.getJSONObject(i).getString("name"));
+                    }
+
+                    int selection = 0;//default selection is the blank one
+                    if(farmer != null){
+                        String selectedEP = farmer.getExtensionPersonnel();
+                        if(selectedEP != null && selectedEP.length() > 0){
+                            for(int i =0; i < vetNames.size(); i++){
+                                if(vetNames.get(i).equals(selectedEP)){
+                                    selection = i;
+                                }
+                            }
+                        }
+                    }
+
+                    ArrayAdapter<String> epArrayAdapter = new ArrayAdapter<String>(EditFarmerActivity.this, android.R.layout.simple_spinner_item, vetNames);
+                    epArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+                    extensionPersonnelS.setAdapter(epArrayAdapter);
+                    extensionPersonnelS.setSelection(selection);
+                }
+                catch (Exception e){
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+
+    private class EditFarmerThread extends AsyncTask<String, Integer, String>{
+        private ProgressDialog progressDialog;
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(EditFarmerActivity.this, "", Locale.getStringInLocale("loading_please_wait", EditFarmerActivity.this), true);
+        }
+
+        @Override
+        protected String doInBackground(String... params) {
+            return DataHandler.sendDataToServer(EditFarmerActivity.this, params[0], DataHandler.ADMIN_EDIT_FARMER_URL, true);
+        }
+
+        @Override
+        protected void onPostExecute(String result) {
+            super.onPostExecute(result);
+            progressDialog.dismiss();
+
+            if(result == null) {
+                String httpError = DataHandler.getSharedPreference(EditFarmerActivity.this, "http_error", "No Error thrown to application. Something must be really wrong");
+                Toast.makeText(EditFarmerActivity.this,httpError,Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
+                Toast.makeText(EditFarmerActivity.this, Locale.getStringInLocale("generic_sms_error", EditFarmerActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
+                Toast.makeText(EditFarmerActivity.this, Locale.getStringInLocale("no_service", EditFarmerActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
+                Toast.makeText(EditFarmerActivity.this, Locale.getStringInLocale("radio_off", EditFarmerActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
+                Toast.makeText(EditFarmerActivity.this, Locale.getStringInLocale("server_not_receive_sms", EditFarmerActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.CODE_NUMBER_IN_USE)){
+                Toast.makeText(EditFarmerActivity.this, Locale.getStringInLocale("number_in_use", EditFarmerActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.ACKNOWLEDGE_OK)) {
+                Toast.makeText(EditFarmerActivity.this, Locale.getStringInLocale("farmer_profile_updated", EditFarmerActivity.this), Toast.LENGTH_LONG).show();
+
+                Intent intent = new Intent(EditFarmerActivity.this, FarmerSelectionActivity.class);
+                //intent.putExtra(FarmerSelectionActivity.KEY_ADMIN_DATA, adminData);
+                startActivity(intent);
+            }
+        }
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/EventsActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/EventsActivity.java
new file mode 100644
index 0000000..eb79344
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/EventsActivity.java
@@ -0,0 +1,137 @@
+package org.cgiar.ilri.np.farmer;
+
+import android.content.Intent;
+import android.os.AsyncTask;
+import android.os.Bundle;
+
+import com.actionbarsherlock.view.Menu;
+
+import android.util.Log;
+import android.view.View;
+import android.widget.Button;
+import android.widget.Toast;
+
+import com.actionbarsherlock.app.SherlockActivity;
+import com.actionbarsherlock.view.MenuInflater;
+import com.actionbarsherlock.view.MenuItem;
+
+import org.cgiar.ilri.np.farmer.backend.DataHandler;
+import org.cgiar.ilri.np.farmer.backend.Locale;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+public class EventsActivity extends SherlockActivity implements NPActivity, View.OnClickListener
+{
+    private String TAG = "EventsActivity";
+
+    private Menu menu;
+    private Button addEventB;
+    private Button eventHistoryB;
+    private Button backB;
+    @Override
+    protected void onCreate(Bundle savedInstanceState)
+    {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_events);
+
+        addEventB=(Button)findViewById(R.id.add_event_b);
+        addEventB.setOnClickListener(this);
+        eventHistoryB=(Button)findViewById(R.id.event_history_b);
+        eventHistoryB.setOnClickListener(this);
+        backB = (Button)findViewById(R.id.back_b);
+        backB.setOnClickListener(this);
+
+        initTextInViews();
+    }
+
+    public boolean onCreateOptionsMenu(Menu menu) {
+        MenuInflater inflater = getSupportMenuInflater();
+        inflater.inflate(R.menu.events, menu);
+        this.menu = menu;
+        initMenuText();
+        return true;
+    }
+
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle item selection
+        if(Language.processLanguageMenuItemSelected(this, this, item)){
+            return true;
+        }
+        else if(item.getItemId() == R.id.action_back_main_menu) {
+            Intent intent = new Intent(this, MainMenu.class);
+            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_FARMER);
+            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+            startActivity(intent);
+        }
+
+        return false;
+    }
+
+    @Override
+    public void initTextInViews()
+    {
+        setTitle(Locale.getStringInLocale("events",this));
+        addEventB.setText(Locale.getStringInLocale("add_an_event",this));
+        eventHistoryB.setText(Locale.getStringInLocale("past_events",this));
+        backB.setText(Locale.getStringInLocale("back", this));
+        initMenuText();
+    }
+
+    private void initMenuText(){
+        if(this.menu != null){
+            MenuItem mainMenuMI = menu.findItem(R.id.action_back_main_menu);
+            mainMenuMI.setTitle(Locale.getStringInLocale("back_to_main_menu", this));
+        }
+    }
+
+    @Override
+    public void onClick(View view)
+    {
+        if(view==addEventB)
+        {
+            Intent intent=new Intent(this,AddEventActivity.class);
+            startActivity(intent);
+        }
+        else if(view == eventHistoryB)
+        {
+            Intent intent=new Intent(this,EventsHistoryActivity.class);
+            startActivity(intent);
+        }
+        else if(view == backB){
+            SendCachedDataThread sendCachedDataThread = new SendCachedDataThread();
+            sendCachedDataThread.execute(1);
+
+            Intent intent = new Intent(this, MainMenu.class);
+            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_FARMER);
+            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+            startActivity(intent);
+        }
+    }
+
+    private class SendCachedDataThread extends AsyncTask<Integer, Integer, Boolean>{
+
+        @Override
+        protected Boolean doInBackground(Integer... params) {
+            String result = DataHandler.sendCachedRequests(EventsActivity.this, true);//send cached data and receive updated farmer data
+            if(result != null && !result.equals(DataHandler.CODE_USER_NOT_AUTHENTICATED)){//no data fetched for this farmer
+                try {//try converting the response into a jsonobject. It might not work if the DataHandler returns a response code
+                    Log.d(TAG, "response is " + result);
+                    DataHandler.saveFarmerData(EventsActivity.this, new JSONObject(result));
+                    return true;
+                } catch (JSONException e) {
+                    e.printStackTrace();
+                }
+            }
+            return false;
+        }
+
+        @Override
+        protected void onPostExecute(Boolean result) {
+            super.onPostExecute(result);
+
+            if(result == true){
+                Toast.makeText(EventsActivity.this, Locale.getStringInLocale("information_successfully_sent_to_server", EventsActivity.this), Toast.LENGTH_LONG).show();
+            }
+        }
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/EventsHistoryActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/EventsHistoryActivity.java
new file mode 100644
index 0000000..4e9de16
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/EventsHistoryActivity.java
@@ -0,0 +1,364 @@
+package org.cgiar.ilri.np.farmer;
+
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.Intent;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.telephony.TelephonyManager;
+import android.util.DisplayMetrics;
+import android.util.Log;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TableLayout;
+import android.widget.TableRow;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.actionbarsherlock.app.SherlockActivity;
+import com.actionbarsherlock.view.Menu;
+import com.actionbarsherlock.view.MenuInflater;
+import com.actionbarsherlock.view.MenuItem;
+
+import org.cgiar.ilri.np.farmer.backend.DataHandler;
+import org.cgiar.ilri.np.farmer.backend.Locale;
+import org.cgiar.ilri.np.farmer.carrier.Cow;
+import org.cgiar.ilri.np.farmer.carrier.Event;
+import org.cgiar.ilri.np.farmer.carrier.Farmer;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+import java.util.List;
+
+public class EventsHistoryActivity extends SherlockActivity implements NPActivity, View.OnClickListener {
+    private static final String TAG="EventsHistoryActivity";
+
+    private Menu menu;
+    private TableLayout eventsHistoryTL;
+    private TextView dateTV;
+    private TextView cowNameTV;
+    private TextView eventTV;
+    private DisplayMetrics metrics;
+    private Button backB;
+
+    private String noDataReceived;
+    private String serverError;
+    private List<String> eventHistoryIDs;
+    private String todayText;
+    private String yesterdayText;
+    private String loadingPleaseWait;
+    private String[] eventTypes;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_events_history);
+        //DataHandler.requestPermissionToUseSMS(this);
+
+        eventHistoryIDs = new ArrayList<String>();
+        metrics=new DisplayMetrics();
+
+        eventsHistoryTL = (TableLayout)findViewById(R.id.events_history_tl);
+        dateTV = (TextView)findViewById(R.id.date_tv);
+        cowNameTV = (TextView)findViewById(R.id.cow_name_tv);
+        eventTV = (TextView)findViewById(R.id.event_tv);
+        backB = (Button)findViewById(R.id.back_b);
+        backB.setOnClickListener(this);
+
+        initTextInViews();
+        fetchEventsHistory();
+    }
+
+    public boolean onCreateOptionsMenu(Menu menu) {
+        MenuInflater inflater = getSupportMenuInflater();
+        inflater.inflate(R.menu.events_history, menu);
+        this.menu = menu;
+        initMenuText();
+        return true;
+    }
+
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle item selection
+        if(Language.processLanguageMenuItemSelected(this, this, item)){
+            return true;
+        }
+        else if(item.getItemId() == R.id.action_back_main_menu) {
+            Intent intent = new Intent(this, MainMenu.class);
+            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_FARMER);
+            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+            startActivity(intent);
+        }
+        return false;
+    }
+
+    @Override
+    public void initTextInViews() {
+        setTitle(Locale.getStringInLocale("past_events",this));
+        dateTV.setText(Locale.getStringInLocale("date",this));
+        cowNameTV.setText(Locale.getStringInLocale("cow",this));
+        eventTV.setText(Locale.getStringInLocale("event",this));
+        noDataReceived = Locale.getStringInLocale("no_data_received",this);
+        serverError = Locale.getStringInLocale("problem_connecting_to_server",this);
+        todayText=Locale.getStringInLocale("today",this);
+        yesterdayText=Locale.getStringInLocale("yesterday",this);
+        loadingPleaseWait=Locale.getStringInLocale("loading_please_wait",this);
+        eventTypes = Locale.getArrayInLocale("cow_event_types",this);
+        if(eventTypes == null) {
+            eventTypes = new String[1];
+            eventTypes[0] = "";
+        }
+        backB.setText(Locale.getStringInLocale("back", this));
+
+        initMenuText();
+    }
+
+    private void initMenuText(){
+        if(this.menu != null){
+            MenuItem mainMenuMI = menu.findItem(R.id.action_back_main_menu);
+            mainMenuMI.setTitle(Locale.getStringInLocale("back_to_main_menu", this));
+        }
+    }
+
+    private void fetchEventsHistory() {
+        TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
+        CowEventHistoryThread cowEventHistoryThread =new CowEventHistoryThread();
+        if(eventHistoryIDs.size() == 0){//first time
+            cowEventHistoryThread.execute(telephonyManager.getSimSerialNumber(), "-1");
+        }
+        else {
+            cowEventHistoryThread.execute(telephonyManager.getSimSerialNumber(), eventHistoryIDs.get(eventHistoryIDs.size()-1));
+        }
+    }
+
+    @Override
+    public void onClick(View view) {
+        if(view == backB){
+            Intent intent = new Intent(this, EventsActivity.class);
+            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+            startActivity(intent);
+        }
+    }
+
+    private class CowEventHistoryThread extends AsyncTask<String, Integer, Farmer> {
+
+        ProgressDialog progressDialog;
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(EventsHistoryActivity.this, "",loadingPleaseWait, true);
+        }
+
+        @Override
+        protected Farmer doInBackground(String... params) {
+            /*JSONObject jsonObject = new JSONObject();
+            try {
+                jsonObject.put("simCardSN",params[0]);
+                jsonObject.put("fromID",params[1]);
+                result = DataHandler.sendDataToServer(EventsHistoryActivity.this, jsonObject.toString(),DataHandler.FARMER_FETCH_COW_EVENTS_HISTORY_URL, true);
+            }
+            catch (JSONException e) {
+                e.printStackTrace();
+            }*/
+            String result = DataHandler.sendCachedRequests(EventsHistoryActivity.this, true);//send cached data and receive updated farmer data
+            if(result != null && !result.equals(DataHandler.CODE_USER_NOT_AUTHENTICATED)){//no data fetched for this farmer
+                try {//try converting the response into a jsonobject. It might not work if the DataHandler returns a response code
+                    Log.d(TAG, "response is "+result);
+                    DataHandler.saveFarmerData(EventsHistoryActivity.this, new JSONObject(result));
+                } catch (JSONException e) {
+                    e.printStackTrace();
+                }
+            }
+            return DataHandler.getFarmerData(EventsHistoryActivity.this);
+        }
+
+        @Override
+        protected void onPostExecute(Farmer farmer) {
+            super.onPostExecute(farmer);
+            progressDialog.dismiss();
+
+            if(farmer == null) {
+                Toast.makeText(EventsHistoryActivity.this, Locale.getStringInLocale("unable_to_fetch_cached_data", EventsHistoryActivity.this), Toast.LENGTH_LONG).show();
+            }
+
+            /*else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
+                Toast.makeText(EventsHistoryActivity.this, Locale.getStringInLocale("generic_sms_error", EventsHistoryActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
+                Toast.makeText(EventsHistoryActivity.this, Locale.getStringInLocale("no_service", EventsHistoryActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
+                Toast.makeText(EventsHistoryActivity.this, Locale.getStringInLocale("radio_off", EventsHistoryActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
+                Toast.makeText(EventsHistoryActivity.this, Locale.getStringInLocale("server_not_receive_sms", EventsHistoryActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.NO_DATA)) {
+                Toast.makeText(EventsHistoryActivity.this, noDataReceived, Toast.LENGTH_LONG).show();
+            }*/
+            else {
+                /*try {
+                    JSONObject jsonObject = new JSONObject(result);
+                    JSONArray historyArray = jsonObject.getJSONArray("history");
+                    addTableRows(historyArray);
+                }
+                catch (JSONException e) {
+                    e.printStackTrace();
+                }*/
+                try{
+                    List<Cow> allCows = farmer.getCows();
+                    JSONArray historyArray = new JSONArray();
+                    for(int cowIndex = 0; cowIndex < allCows.size(); cowIndex++){
+                        //append all events for this cow to the UI
+                        List<Event> cowEvents = allCows.get(cowIndex).getEvents();
+                        for(int eventIndex = 0; eventIndex < cowEvents.size(); eventIndex++){
+                            //cow_name, ear_tag_number, event.*,
+                            JSONObject currEventJSON = new JSONObject();
+                            currEventJSON.put("cow_name", allCows.get(cowIndex).getName());
+                            currEventJSON.put("ear_tag_number", allCows.get(cowIndex).getEarTagNumber());
+                            currEventJSON.put("id", cowEvents.get(eventIndex).getId());
+                            currEventJSON.put("remarks", cowEvents.get(eventIndex).getRemarks());
+                            currEventJSON.put("event_date", cowEvents.get(eventIndex).getEventDate());
+                            currEventJSON.put("event_name", cowEvents.get(eventIndex).getType());
+                            currEventJSON.put("birth_type", cowEvents.get(eventIndex).getBirthType());
+                            currEventJSON.put("parent_cow_event", cowEvents.get(eventIndex).getParentCowEventID());
+                            currEventJSON.put("servicing_days", cowEvents.get(eventIndex).getServicingDays());
+                            historyArray.put(currEventJSON);
+                        }
+                    }
+
+                    addTableRows(historyArray);
+                }
+                catch (Exception e){
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+
+    private void addTableRows(JSONArray historyArray) {
+        for (int i = 0; i < historyArray.length(); i++) {
+            try {
+                Log.d(TAG, "called");
+                JSONObject jsonObject=historyArray.getJSONObject(i);
+                eventHistoryIDs.add(jsonObject.getString("id"));
+                final TableRow tableRow=new TableRow(this);
+                tableRow.setId(5342+Integer.parseInt(jsonObject.getString("id")));
+                int tableRowHeight=0;
+                int tableTextSideMargin=0;//4dp
+                int tableTextSize=0;//14dp
+                if(metrics.densityDpi== DisplayMetrics.DENSITY_XHIGH) {
+                    tableRowHeight=58;//initially 30
+                    tableTextSideMargin=14;//initially 6
+                    tableTextSize=16;//initially 21
+                }
+                else if(metrics.densityDpi==DisplayMetrics.DENSITY_HIGH) {
+                    tableRowHeight=44;//initially 30
+                    tableTextSideMargin=14;//initially 6
+                    tableTextSize=16;//initially 21
+                }
+                else if(metrics.densityDpi==DisplayMetrics.DENSITY_MEDIUM) {
+                    tableRowHeight=27;//initially 20
+                    tableTextSideMargin=10;//initially 4
+                    tableTextSize=15;//initially 14
+                }
+                else if(metrics.densityDpi==DisplayMetrics.DENSITY_LOW) {
+                    tableRowHeight=20;//initially 15
+                    tableTextSideMargin=6;//initially 3
+                    tableTextSize=15;//initially 11
+                }
+                else {
+                    tableRowHeight=58;//initially 30
+                    tableTextSideMargin=14;//initially 6
+                    tableTextSize=16;//initially 21
+                }
+                tableRow.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,tableRowHeight));
+
+                SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd");
+                Date eventDate=dateFormat.parse(jsonObject.getString("event_date"));
+                Date today=new Date();
+                long dateDifference=(today.getTime()-eventDate.getTime())/86400000;
+
+                Calendar calendar=new GregorianCalendar();
+                calendar.setTime(eventDate);
+                String dateText=String.valueOf(calendar.get(Calendar.DAY_OF_MONTH))+"/"+String.valueOf(calendar.get(Calendar.MONTH)+1)+"/"+calendar.get(Calendar.YEAR);
+                if(dateDifference<1) {
+                    dateText=todayText;
+                }
+                else if(dateDifference>=1&&dateDifference<2) {
+                    dateText=yesterdayText;
+                }
+
+                final TextView date=generateTextView(dateText,5342+jsonObject.getInt("id")+332,tableRowHeight,tableTextSize);
+                tableRow.addView(date);
+
+                final View rowSeparator1=generateRowSeparator(5342+jsonObject.getInt("id")+3322,tableRowHeight);
+                tableRow.addView(rowSeparator1);
+
+                String nameText=jsonObject.getString("cow_name");
+                if(nameText==null||nameText.equals("")) {
+                    nameText=jsonObject.getString("ear_tag_number");
+                }
+                final TextView name=generateTextView(nameText,5342+jsonObject.getInt("id")+432,tableRowHeight,tableTextSize);
+                tableRow.addView(name);
+
+                final View rowSeparator2=generateRowSeparator(5342+jsonObject.getInt("id")+3432,tableRowHeight);
+                tableRow.addView(rowSeparator2);
+
+                String[] eventTypesInEN = Locale.getArrayInLocale("cow_event_types",this,Locale.LOCALE_ENGLISH);
+                String eventTypeString = "";
+                int index = -1;
+                for(int j = 0; j< eventTypesInEN.length; j++) {
+                    if(eventTypesInEN[j].equals(jsonObject.getString("event_name"))) {
+                        index = j;
+                    }
+                    else if(jsonObject.getString("event_name").equals("Calving")){
+                        eventTypeString = Locale.getStringInLocale("calving", EventsHistoryActivity.this);
+                    }
+                }
+                if(eventTypesInEN.length == eventTypes.length && index != -1) {
+                    eventTypeString = eventTypes[index];
+                }
+                final  TextView event=generateTextView(eventTypeString,5342+jsonObject.getInt("id")+554,tableRowHeight,tableTextSize);
+                tableRow.addView(event);
+
+                eventsHistoryTL.addView(tableRow, new TableLayout.LayoutParams(TableLayout.LayoutParams.MATCH_PARENT,tableRowHeight));
+            }
+            catch (JSONException e) {
+                e.printStackTrace();
+            }
+            catch (ParseException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    private TextView generateTextView(String text, int id,int tableRowHeight,int tableTextSize) {
+        TextView textView=new TextView(this);
+        TableRow.LayoutParams dateLP=new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT,tableRowHeight);
+        textView.setId(id);
+        textView.setText(text);
+        textView.setTextSize(tableTextSize);
+        textView.setTextColor(getResources().getColor(R.color.text_input_color));
+        textView.setGravity(Gravity.CENTER);
+        textView.setLayoutParams(dateLP);
+        return textView;
+    }
+
+    private View generateRowSeparator(int id,int tableRowHeight) {
+        final View rowSeperator=new View(this);
+        rowSeperator.setId(id);
+        rowSeperator.setLayoutParams(new TableRow.LayoutParams(1,tableRowHeight));
+        rowSeperator.setBackgroundColor(getResources().getColor(R.color.pressed_mistro));
+        return rowSeperator;
+    }
+    
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/FarmerRegistrationActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/FarmerRegistrationActivity.java
new file mode 100644
index 0000000..929fe53
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/FarmerRegistrationActivity.java
@@ -0,0 +1,609 @@
+package org.cgiar.ilri.np.farmer;
+
+import android.app.AlertDialog;
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.location.Criteria;
+import android.location.Location;
+import android.location.LocationListener;
+import android.location.LocationManager;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.provider.Settings;
+import android.telephony.TelephonyManager;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.Spinner;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.actionbarsherlock.app.SherlockActivity;
+import com.actionbarsherlock.view.Menu;
+import com.actionbarsherlock.view.MenuInflater;
+import com.actionbarsherlock.view.MenuItem;
+
+import org.cgiar.ilri.np.farmer.backend.DataHandler;
+import org.cgiar.ilri.np.farmer.backend.Locale;
+import org.cgiar.ilri.np.farmer.backend.database.DatabaseHelper;
+import org.cgiar.ilri.np.farmer.carrier.Farmer;
+import org.json.JSONArray;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class FarmerRegistrationActivity extends SherlockActivity implements NPActivity, View.OnClickListener,LocationListener
+{
+    public static final String TAG="FarmerRegistrationActivity";
+
+    private boolean cacheData;
+
+    private String latitude;
+    private String longitude;
+    private TextView fullNameTV;
+    private EditText fullNameET;
+    private TextView preferredLanguageTV;
+    private Spinner preferredLanguageS;
+    private TextView extensionPersonnelTV;
+    private Spinner extensionPersonnelS;
+    private TextView siteTV;
+    private Spinner siteS;
+    private TextView mobileNumberTV;
+    private EditText mobileNumberET;
+    private TextView numberOfCowsTV;
+    private EditText numberOfCowsET;
+    private Button registerButton;
+    private String gpsAlertDialogTitle;
+    private String gpsAlertDialogText;
+    private String okayText;
+    private String cancelText;
+    private String networkAlertTitle;
+    private String networkAlertText;
+    private String nameETEmptyWarning;
+    private String mobileNoETEmptyWarning;
+    private  LocationManager locationManager;
+    private String loadingPleaseWait;
+    private List<String> vetNames;
+    private boolean isInFarm;
+    private List<String> languages;
+    private int preferredLanguageIndex;
+
+    private Farmer farmer;
+    @Override
+    protected void onCreate(Bundle savedInstanceState)
+    {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_farmer_registration);
+        //DataHandler.requestPermissionToUseSMS(this);
+
+        //init child views
+        languages = Locale.getAllLanguages(this);
+        cacheData = true;
+        isInFarm = false;
+        preferredLanguageIndex = -1;
+
+        fullNameTV=(TextView)this.findViewById(R.id.full_name_tv);
+        fullNameET=(EditText)this.findViewById(R.id.full_name_et);
+        preferredLanguageTV = (TextView)this.findViewById(R.id.preferred_language_tv);
+        preferredLanguageS = (Spinner)this.findViewById(R.id.preferred_language_s);
+        extensionPersonnelTV=(TextView)this.findViewById(R.id.extension_personnel_tv);
+        extensionPersonnelS=(Spinner)this.findViewById(R.id.extension_personnel_s);
+        mobileNumberTV=(TextView)this.findViewById(R.id.mobile_number_tv);
+        mobileNumberET=(EditText)this.findViewById(R.id.mobile_number_et);
+        TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
+        siteTV = (TextView)this.findViewById(R.id.site_tv);
+        siteS = (Spinner)this.findViewById(R.id.site_s);
+        //Toast.makeText(this,telephonyManager.getSimSerialNumber(),Toast.LENGTH_LONG).show();
+        mobileNumberET.setText(telephonyManager.getLine1Number());
+        numberOfCowsTV=(TextView)this.findViewById(R.id.number_of_cows_tv);
+        numberOfCowsET=(EditText)this.findViewById(R.id.number_of_cows_et);
+        registerButton=(Button)this.findViewById(R.id.register_button);
+        registerButton.setOnClickListener(this);
+
+        //init text according to locale
+        initTextInViews();
+
+        FetchVetsThread fetchVetsThread = new FetchVetsThread();
+        fetchVetsThread.execute(0);
+    }
+
+    public boolean onCreateOptionsMenu(Menu menu) {
+        MenuInflater inflater = getSupportMenuInflater();
+        inflater.inflate(R.menu.farmer_registration, menu);
+        return true;
+    }
+
+    @Override
+    public boolean onKeyDown(int keyCode, KeyEvent event) {
+        if(keyCode == KeyEvent.KEYCODE_BACK){
+            Intent intent = new Intent(FarmerRegistrationActivity.this, LandingActivity.class);
+            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+            startActivity(intent);
+        }
+        return super.onKeyDown(keyCode, event);
+    }
+
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle item selection
+        if(Language.processLanguageMenuItemSelected(this, this, item)){
+            return true;
+        }
+        return false;
+    }
+
+    private void cacheEditTextData(){
+        if(cacheData) {
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_FULL_NAME, fullNameET.getText().toString());
+            DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_MOBILE_NUMBER, mobileNumberET.getText().toString());
+        }
+    }
+
+    private void restoreEditTextData(){
+        fullNameET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_FRA_FULL_NAME, ""));
+        mobileNumberET.setText(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_FRA_MOBILE_NUMBER, ""));
+    }
+
+    private void clearEditTextDataCache(){
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_FULL_NAME, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_MOBILE_NUMBER, "");
+
+        cacheData = false;
+    }
+
+    @Override
+    protected void onResume()
+    {
+        super.onResume();
+
+        restoreEditTextData();
+
+        Bundle bundle=this.getIntent().getExtras();
+        if(bundle!=null)
+        {
+            farmer=bundle.getParcelable(Farmer.PARCELABLE_KEY);
+        }
+        if(farmer!=null)
+        {
+            fullNameET.setText(farmer.getFullName());
+            Log.d(TAG, "Full name: " + farmer.getFullName());
+            List<String> tmpVetNames = new ArrayList<String>();
+            tmpVetNames.add("");
+            String selectedEP = farmer.getExtensionPersonnel();
+            int epSelection = 0;
+            if(selectedEP!= null && selectedEP.length() > 0){
+                tmpVetNames.add(selectedEP);
+                epSelection = 1;
+            }
+            ArrayAdapter<String> epArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,tmpVetNames);
+            epArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+            extensionPersonnelS.setAdapter(epArrayAdapter);
+            extensionPersonnelS.setSelection(epSelection);
+
+            String prefLocale = farmer.getPreferredLocale();
+            if(prefLocale != null && prefLocale.length() > 0){
+                for(int i = 0; i < languages.size(); i++){
+                    if(languages.get(i).equals(Locale.getLanguage(this, prefLocale))){
+                        preferredLanguageIndex = i;
+                    }
+                }
+            }
+
+            Log.d(TAG, "Preferred locale: "+farmer.getPreferredLocale());
+
+            String[] sites = this.getResources().getStringArray(R.array.sites);
+            for(int i = 0; i < sites.length;i++){
+                if(sites[i].equals(farmer.getSite())){
+                    siteS.setSelection(i);
+                }
+            }
+
+            Log.d(TAG,"Extension Personnel: "+farmer.getExtensionPersonnel());
+            mobileNumberET.setText(farmer.getMobileNumber());
+            Log.d(TAG,"Mobile number: "+farmer.getMobileNumber());
+            numberOfCowsET.setText(String.valueOf(farmer.getCowNumber()));
+            Log.d(TAG,"Number of Cows: "+String.valueOf(farmer.getCowNumber()));
+            if((farmer.getLatitude()==null||farmer.getLatitude().length()==0)||(farmer.getLongitude()==null||farmer.getLongitude().length()==0))
+            {
+                getGPSCoordinates();
+            }
+        }
+        else
+        {
+            getGPSCoordinates();
+            Log.d(TAG, "Farmer object is null");
+        }
+
+    }
+
+    @Override
+    protected void onPause()
+    {
+        super.onPause();
+
+        cacheEditTextData();
+
+        if(locationManager!=null)
+        {
+            locationManager.removeUpdates(this);
+        }
+    }
+
+    @Override
+    public void initTextInViews()
+    {
+        setTitle(Locale.getStringInLocale("farmer_registration", this));
+        fullNameTV.setText(" * " + Locale.getStringInLocale("full_name", this));
+        extensionPersonnelTV.setText(" * " + Locale.getStringInLocale("extension_p", this));
+        mobileNumberTV.setText(" * " + Locale.getStringInLocale("mobile_number", this));
+        numberOfCowsTV.setText(" * "+Locale.getStringInLocale("number_of_cows",this));
+        preferredLanguageTV.setText(" * "+Locale.getStringInLocale("preferred_language", this));
+        siteTV.setText(" * "+Locale.getStringInLocale("site", this));
+        ArrayAdapter<String> siteArrayAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, getResources().getStringArray(R.array.sites));
+        siteArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        siteS.setAdapter(siteArrayAdapter);
+
+        ArrayAdapter<String> languageAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item, languages);
+        languageAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        preferredLanguageS.setAdapter(languageAdapter);
+
+        if(preferredLanguageIndex != -1) preferredLanguageS.setSelection(preferredLanguageIndex);
+
+        registerButton.setText(Locale.getStringInLocale("register",this));
+        gpsAlertDialogTitle=Locale.getStringInLocale("enable_gps",this);
+        gpsAlertDialogText=Locale.getStringInLocale("reason_for_enabling_gps",this);
+        okayText=Locale.getStringInLocale("okay",this);
+        cancelText=Locale.getStringInLocale("cancel",this);
+        networkAlertTitle=Locale.getStringInLocale("enable_network",this);
+        networkAlertText=Locale.getStringInLocale("reason_for_enabling_network",this);
+        nameETEmptyWarning=Locale.getStringInLocale("enter_your_name",this);
+        mobileNoETEmptyWarning=Locale.getStringInLocale("enter_your_mobile_no",this);
+        loadingPleaseWait=Locale.getStringInLocale("loading_please_wait",this);
+    }
+
+    private void cacheFarmer(boolean isInFarm)
+    {
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_FULL_NAME, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_EXTENSION_PERSONNEL, "");
+        DataHandler.setSharedPreference(this, DataHandler.SP_KEY_FRA_MOBILE_NUMBER, "");
+
+        if(farmer==null)
+        {
+            farmer=new Farmer();
+        }
+        farmer.setFullName(fullNameET.getText().toString());
+        if(vetNames != null && extensionPersonnelS.getSelectedItemPosition() != -1){
+            farmer.setExtensionPersonnel(vetNames.get(extensionPersonnelS.getSelectedItemPosition()));
+        }
+        else{
+            farmer.setExtensionPersonnel("");
+        }
+
+        if(languages != null && preferredLanguageS.getSelectedItemPosition() != -1){
+            farmer.setPreferredLocale(Locale.getLocaleCode(this, languages.get(preferredLanguageS.getSelectedItemPosition())));
+        }
+
+        farmer.setMobileNumber(mobileNumberET.getText().toString());
+        farmer.setCowNumber((numberOfCowsET.getText().toString()==null||numberOfCowsET.getText().toString().length()==0) ? 0:Integer.parseInt(numberOfCowsET.getText().toString()));//Integer.parseInt(numberOfCowsET.getText().toString())
+        if(isInFarm) {
+            farmer.setLatitude(latitude);
+            farmer.setLongitude(longitude);
+        }
+        else {
+            farmer.setLatitude("");
+            farmer.setLongitude("");
+        }
+        String[] sites = getResources().getStringArray(R.array.sites);
+        farmer.setSite(sites[siteS.getSelectedItemPosition()]);
+        farmer.setMode(Farmer.MODE_INITIAL_REGISTRATION);
+        TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
+        farmer.setSimCardSN(telephonyManager.getSimSerialNumber());
+        //TODO:save gps coordinates
+    }
+
+    @Override
+    public void onClick(View view)
+    {
+        if(view==registerButton)
+        {
+            buildGPSAlert();
+        }
+    }
+
+    public void registerButtonClicked(boolean isInFarm){
+        if(validateInput(isInFarm)) {
+            cacheFarmer(isInFarm);
+            String numberOfCowsString=numberOfCowsET.getText().toString();
+            if(numberOfCowsString!=null && numberOfCowsString.length()>0 && Integer.parseInt(numberOfCowsString)>0)
+            {
+                clearEditTextDataCache();
+
+                int numberOfCows=Integer.valueOf(numberOfCowsString);
+                Intent intent=new Intent(FarmerRegistrationActivity.this,CowRegistrationActivity.class);
+
+                //intent.putExtra(CowRegistrationActivity.KEY_MODE,CowRegistrationActivity.MODE_COW);
+                intent.putExtra(CowRegistrationActivity.KEY_INDEX,0);
+                intent.putExtra(CowRegistrationActivity.KEY_NUMBER_OF_COWS,numberOfCows);
+                Bundle bundle=new Bundle();
+                bundle.putParcelable(Farmer.PARCELABLE_KEY, farmer);
+                intent.putExtras(bundle);
+                startActivity(intent);
+            }
+            else
+            {
+                Log.d(TAG, farmer.getJsonObject().toString());
+                sendDataToServer(farmer.getJsonObject());
+            }
+        }
+    }
+
+    private void getGPSCoordinates() {
+        locationManager=(LocationManager)getSystemService(LOCATION_SERVICE);
+        if(locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER))
+        {
+            //Toast.makeText(this,"gps started",Toast.LENGTH_LONG).show();
+            Criteria criteria=new Criteria();
+            String provider=locationManager.getBestProvider(criteria,false);
+            Location location=locationManager.getLastKnownLocation(provider);
+            locationManager.requestLocationUpdates(provider,18000,1000,this);//If farmer  is moving at 200km/h, will still be able to update!
+            if(location!=null)
+            {
+                onLocationChanged(location);
+            }
+        }
+        else
+        {
+            AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(this);
+            alertDialogBuilder.setTitle(gpsAlertDialogTitle);
+            alertDialogBuilder
+                    .setMessage(gpsAlertDialogText)
+                    .setCancelable(false)
+                    .setPositiveButton(okayText, new DialogInterface.OnClickListener()
+                    {
+                        @Override
+                        public void onClick(DialogInterface dialog, int which)
+                        {
+                            Intent intent=new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
+                            startActivity(intent);
+                        }
+                    })
+                    .setNegativeButton(cancelText, new DialogInterface.OnClickListener()
+                    {
+                        @Override
+                        public void onClick(DialogInterface dialog, int which)
+                        {
+                            dialog.cancel();
+                            Intent intent=new Intent(FarmerRegistrationActivity.this,LandingActivity.class);
+                            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+                            startActivity(intent);
+                        }
+                    });
+            AlertDialog alertDialog=alertDialogBuilder.create();
+            alertDialog.show();
+        }
+    }
+
+    private void sendDataToServer(JSONObject jsonObject)
+    {
+        ServerRegistrationThread serverRegistrationThread=new ServerRegistrationThread();
+        serverRegistrationThread.execute(jsonObject);
+    }
+
+    private boolean validateInput(boolean isInFarm)
+    {
+        String nameText=fullNameET.getText().toString();
+        if(nameText==null || nameText.equals(""))
+        {
+            Toast.makeText(this,nameETEmptyWarning,Toast.LENGTH_LONG).show();
+            return false;
+        }
+        else if(nameText.split(" ").length < 2){
+            Toast.makeText(this, Locale.getStringInLocale("enter_two_names", this), Toast.LENGTH_LONG).show();
+            return false;
+        }
+
+        String mobileNumberText=mobileNumberET.getText().toString();
+        if(mobileNumberText==null||mobileNumberText.equals(""))
+        {
+            Toast.makeText(this,mobileNoETEmptyWarning,Toast.LENGTH_LONG).show();
+            return false;
+        }
+        else if(mobileNumberText.length() != 10){
+            Toast.makeText(this, Locale.getStringInLocale("phone_number_not_valid", this), Toast.LENGTH_LONG).show();
+            return false;
+        }
+
+        if(vetNames == null){
+            Toast.makeText(this, Locale.getStringInLocale("epersonnel_tshoot", this), Toast.LENGTH_LONG).show();
+            return false;
+        }
+        else if(extensionPersonnelS.getSelectedItemPosition() == -1 || vetNames.get(extensionPersonnelS.getSelectedItemPosition()).length() == 0){
+            Toast.makeText(this, Locale.getStringInLocale("select_epersonnel", this), Toast.LENGTH_LONG).show();
+            return  false;
+        }
+
+        String[] sites = getResources().getStringArray(R.array.sites);
+        if(siteS.getSelectedItemPosition() != -1 && sites[siteS.getSelectedItemPosition()].length() == 0){
+            Toast.makeText(this, Locale.getStringInLocale("specify_site", this), Toast.LENGTH_LONG).show();
+            return false;
+        }
+
+        if(isInFarm && (longitude == null || longitude.length() == 0 || latitude == null || latitude.length() == 0)) {
+            //Toast.makeText(this,Locale.getStringInLocale("gps_narrowing_down_on_loc",this),Toast.LENGTH_LONG).show();
+            //return false;
+            Log.w(TAG, Locale.getStringInLocale("unable_to_lock_gps", this));
+        }
+
+        if(numberOfCowsET.getText().toString().length()==0){
+            Toast.makeText(this,Locale.getStringInLocale("enter_no_cows_own",this),Toast.LENGTH_LONG).show();
+            return false;
+        }
+        return true;
+    }
+
+    @Override
+    public void onLocationChanged(Location location)
+    {
+        latitude=String.valueOf(location.getLatitude());
+        longitude=String.valueOf(location.getLongitude());
+        Toast.makeText(this, Locale.getStringInLocale("gps_recorded", this), Toast.LENGTH_LONG).show();
+        Log.d(TAG,"latitude : "+latitude);
+        Log.d(TAG,"longitude : "+longitude);
+    }
+
+    @Override
+    public void onStatusChanged(String provider, int status, Bundle extras) {
+
+    }
+
+    @Override
+    public void onProviderEnabled(String provider) {
+
+    }
+
+    @Override
+    public void onProviderDisabled(String provider) {
+
+    }
+
+    private void buildGPSAlert(){
+        AlertDialog.Builder builder = new AlertDialog.Builder(this);
+        builder.setMessage(Locale.getStringInLocale("are_you_in_farm",this));
+        builder.setPositiveButton(Locale.getStringInLocale("yes",this), new DialogInterface.OnClickListener(){
+
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                dialog.dismiss();
+                registerButtonClicked(true);
+            }
+        });
+        builder.setNegativeButton(Locale.getStringInLocale("no",this), new DialogInterface.OnClickListener(){
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                dialog.dismiss();
+                registerButtonClicked(false);
+            }
+        });
+
+        AlertDialog alertDialog = builder.create();
+        alertDialog.show();
+    }
+
+    private class ServerRegistrationThread extends AsyncTask<JSONObject,Integer,String>
+    {
+        ProgressDialog progressDialog;
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(FarmerRegistrationActivity.this, "",loadingPleaseWait, true);
+        }
+
+        @Override
+        protected String doInBackground(JSONObject... params)
+        {
+            Log.d(TAG,"sending registration data to server");
+            String responseString=DataHandler.sendDataToServer(FarmerRegistrationActivity.this, params[0].toString(),DataHandler.FARMER_REGISTRATION_URL, true);
+
+            return responseString;
+        }
+
+        @Override
+        protected void onPostExecute(String result)
+        {
+            super.onPostExecute(result);
+            progressDialog.dismiss();
+
+            if(result == null){
+                String httpError = DataHandler.getSharedPreference(FarmerRegistrationActivity.this, "http_error", "No Error thrown to application. Something must be really wrong");
+                Toast.makeText(FarmerRegistrationActivity.this,httpError,Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
+                Toast.makeText(FarmerRegistrationActivity.this, Locale.getStringInLocale("generic_sms_error", FarmerRegistrationActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
+                Toast.makeText(FarmerRegistrationActivity.this, Locale.getStringInLocale("no_service", FarmerRegistrationActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
+                Toast.makeText(FarmerRegistrationActivity.this, Locale.getStringInLocale("radio_off", FarmerRegistrationActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
+                Toast.makeText(FarmerRegistrationActivity.this, Locale.getStringInLocale("server_not_receive_sms", FarmerRegistrationActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.CODE_NUMBER_IN_USE)){
+                Toast.makeText(FarmerRegistrationActivity.this, Locale.getStringInLocale("number_in_use", FarmerRegistrationActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.ACKNOWLEDGE_OK))
+            {
+                Log.d(TAG,"data successfully sent to server");
+                Utils.showSuccessfullRegistration(FarmerRegistrationActivity.this,null);
+                //Intent intent=new Intent(FarmerRegistrationActivity.this,LandingActivity.class);
+                //startActivity(intent);
+            }
+        }
+    }
+
+    private class FetchVetsThread extends AsyncTask<Integer, Integer, String>{
+        private ProgressDialog progressDialog;
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(FarmerRegistrationActivity.this, "",loadingPleaseWait, true);
+        }
+
+        @Override
+        protected String doInBackground(Integer... params) {
+            Log.d(TAG, "Fetching vets from server");
+
+            return DataHandler.sendDataToServer(FarmerRegistrationActivity.this, "", DataHandler.FARMER_FETCH_VETS_URL, true, DatabaseHelper.TABLE_EXTENSION_PERSONNEL);
+        }
+
+        @Override
+        protected void onPostExecute(String result) {
+            super.onPostExecute(result);
+            progressDialog.dismiss();
+
+            if(result == null){
+                Toast.makeText(FarmerRegistrationActivity.this, Locale.getStringInLocale("unable_to_get_epersonnel", FarmerRegistrationActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else{
+                try{
+                    Log.d(TAG, "result is "+result);
+                    JSONArray vetJsonArray = new JSONArray(result);
+                    vetNames = new ArrayList<String>();
+                    vetNames.add("");
+                    for(int i = 0; i < vetJsonArray.length(); i++){
+                        vetNames.add(vetJsonArray.getJSONObject(i).getString("name"));
+                    }
+
+                    int selection = 0;
+                    if(farmer != null){
+                        String selectedEP = farmer.getExtensionPersonnel();
+                        if(selectedEP != null && selectedEP.length() > 0){
+                            for(int i =0; i < vetNames.size(); i++){
+                                if(vetNames.get(i).equals(selectedEP)){
+                                    selection = i;
+                                }
+                            }
+                        }
+                    }
+
+                    ArrayAdapter<String> epArrayAdapter = new ArrayAdapter<String>(FarmerRegistrationActivity.this, android.R.layout.simple_spinner_item, vetNames);
+                    epArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+                    extensionPersonnelS.setAdapter(epArrayAdapter);
+                    extensionPersonnelS.setSelection(selection);
+                }
+                catch (Exception e){
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/FarmerSelectionActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/FarmerSelectionActivity.java
new file mode 100644
index 0000000..f4a174b
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/FarmerSelectionActivity.java
@@ -0,0 +1,310 @@
+package org.cgiar.ilri.np.farmer;
+
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.Intent;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.telephony.TelephonyManager;
+import android.util.Log;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.Spinner;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.actionbarsherlock.app.SherlockActivity;
+import com.actionbarsherlock.view.Menu;
+import com.actionbarsherlock.view.MenuInflater;
+import com.actionbarsherlock.view.MenuItem;
+
+import org.cgiar.ilri.np.farmer.backend.DataHandler;
+import org.cgiar.ilri.np.farmer.backend.Locale;
+import org.cgiar.ilri.np.farmer.carrier.Farmer;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.List;
+
+
+public class FarmerSelectionActivity extends SherlockActivity implements NPActivity, View.OnClickListener, AdapterView.OnItemSelectedListener {
+
+    private static final String TAG = "FarmerSelectionActivity";
+    public static final String KEY_ADMIN_DATA= "adminData";
+
+    private Menu menu;
+
+    private TextView filterFarmersTV;
+    private Spinner filterFarmersS;
+    private TextView selectFarmerTV;
+    private Spinner selectFarmerS;
+    private Button selectB;
+    private Button backB;
+
+    private List<Farmer> allFarmers;
+    private List<Farmer> filteredFarmers;
+    private JSONObject adminData;
+    private List<String> filters;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_farmer_selection);
+
+        filterFarmersTV = (TextView)findViewById(R.id.filter_farmers_tv);
+        filterFarmersS = (Spinner)findViewById(R.id.filter_farmers_s);
+        filterFarmersS.setOnItemSelectedListener(this);
+        selectFarmerTV = (TextView)findViewById(R.id.select_farmer_tv);
+        selectFarmerS = (Spinner)findViewById(R.id.select_farmer_s);
+
+        selectB = (Button)findViewById(R.id.select_b);
+        selectB.setOnClickListener(this);
+        backB = (Button)findViewById(R.id.back_b);
+        backB.setOnClickListener(this);
+
+        initTextInViews();
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        Bundle bundle=this.getIntent().getExtras();
+        if(bundle != null){
+            String adminJSONString = bundle.getString(KEY_ADMIN_DATA);
+            loadAdminData(adminJSONString);
+        }
+        else{
+            TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
+            if(telephonyManager != null){
+                GetFarmerDataThread getFarmerDataThread = new GetFarmerDataThread();
+                getFarmerDataThread.execute(telephonyManager.getSimSerialNumber());
+            }
+            else{
+                Toast.makeText(this,Locale.getStringInLocale("no_sim_card",this),Toast.LENGTH_LONG).show();
+            }
+        }
+    }
+
+    private void loadAdminData(String adminJSONString){
+        try {
+            adminData = new JSONObject(adminJSONString);
+            JSONArray farmerData = adminData.getJSONArray("farmers");
+
+            filters = new ArrayList<String>();
+            filters.add(Locale.getStringInLocale("all_farmers", this));
+            filters.add(Locale.getStringInLocale("farmers_no_epersonnel", this));
+            if(adminData.getInt("is_super") == 1){//admin is super
+                JSONArray allEPersonnel = adminData.getJSONArray("extension_personnel");
+                for(int i = 0; i < allEPersonnel.length(); i++){
+                    JSONObject currEPersonnel = allEPersonnel.getJSONObject(i);
+                    filters.add(Locale.getStringInLocale("farmers_tied_to", this) + " " + currEPersonnel.getString("name"));
+                }
+            }
+            else{
+                filters.add(Locale.getStringInLocale("farmers_tied_to", this) +" "+ adminData.getString("name"));
+            }
+            ArrayAdapter<String> filterArrayAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, filters);
+            filterArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+            filterFarmersS.setAdapter(filterArrayAdapter);
+
+            allFarmers = new ArrayList<Farmer>(farmerData.length());
+            filteredFarmers = new ArrayList<Farmer>(farmerData.length());
+            for (int i = 0; i < farmerData.length(); i++) {
+                Farmer currFarmer = new Farmer(farmerData.getJSONObject(i));
+                allFarmers.add(currFarmer);
+                filteredFarmers.add(currFarmer);
+            }
+
+            setFilteredFarmerList(filteredFarmers);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    private void setFilteredFarmerList(List<Farmer> filteredFarmers){
+        List<String> farmerNames = new ArrayList<String>(filteredFarmers.size());
+        for (int i = 0; i < filteredFarmers.size(); i++) {
+            Farmer currFarmer = filteredFarmers.get(i);
+            farmerNames.add(currFarmer.getFullName());
+        }
+
+        ArrayAdapter<String> farmerArrayAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, farmerNames);
+        farmerArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        selectFarmerS.setAdapter(farmerArrayAdapter);
+
+        if(this.filteredFarmers != filteredFarmers) {
+            this.filteredFarmers = filteredFarmers;
+        }
+    }
+
+    public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu) {
+        MenuInflater inflater = getSupportMenuInflater();
+        inflater.inflate(R.menu.farmer_selection, menu);
+        this.menu = menu;
+        initMenuText();
+        return true;
+    }
+
+    public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem item) {
+        // Handle item selection
+        if(Language.processLanguageMenuItemSelected(this, this, item)){
+            return true;
+        }
+        else if(item.getItemId() == R.id.action_back_main_menu) {
+            Intent intent = new Intent(this, MainMenu.class);
+            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_ADMIN);
+            intent.putExtra(MainMenu.KEY_ADMIN_DATA, adminData.toString());
+            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+            startActivity(intent);
+        }
+        return false;
+    }
+
+    @Override
+    public void initTextInViews() {
+        setTitle(Locale.getStringInLocale("select_farmer", this));
+
+        filterFarmersTV.setText(Locale.getStringInLocale("filter_farmers", this));
+        selectFarmerTV.setText(Locale.getStringInLocale("select_farmer", this));
+        selectB.setText(Locale.getStringInLocale("select", this));
+        backB.setText(Locale.getStringInLocale("back", this));
+    }
+
+    private void initMenuText(){
+        if(this.menu != null){
+            MenuItem mainMenuMI = menu.findItem(R.id.action_back_main_menu);
+            mainMenuMI.setTitle(Locale.getStringInLocale("back_to_main_menu", this));
+        }
+    }
+
+    @Override
+    public void onClick(View v) {
+        if(v.equals(selectB)){
+            if(selectFarmerS.getSelectedItemPosition() != -1 && filteredFarmers.size() > selectFarmerS.getSelectedItemPosition()){
+                Log.d(TAG, "Selected farmer index = "+String.valueOf(selectFarmerS.getSelectedItemPosition()));
+                Farmer selectedFarmer = filteredFarmers.get(selectFarmerS.getSelectedItemPosition());
+                Intent intent = new Intent(this, EditFarmerActivity.class);
+                Bundle bundle = new Bundle();
+                bundle.putParcelable(Farmer.PARCELABLE_KEY, selectedFarmer);
+                intent.putExtras(bundle);
+                intent.putExtra(KEY_ADMIN_DATA, adminData.toString());
+                startActivity(intent);
+            }
+        }
+        else if(v.equals(backB)){
+            Intent intent = new Intent(this, MainMenu.class);
+            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_ADMIN);
+            intent.putExtra(MainMenu.KEY_ADMIN_DATA, adminData.toString());
+            startActivity(intent);
+        }
+    }
+
+    @Override
+    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
+        if(parent == filterFarmersS){
+            if(filterFarmersS.getSelectedItemPosition() == 0){//all farmers
+                List<Farmer> newlyFilteredFarmers = this.allFarmers;
+                setFilteredFarmerList(newlyFilteredFarmers);
+            }
+            else if(filterFarmersS.getSelectedItemPosition() == 1){//farmers without extension personnel
+                List<Farmer> newlyFilteredFarmers = new ArrayList<Farmer>();
+                for(int i =0; i<allFarmers.size(); i++){
+                    Farmer currFarmer = allFarmers.get(i);
+                    if(DataHandler.isNull(currFarmer.getExtensionPersonnel()) || currFarmer.getExtensionPersonnel().length() == 0){
+                        newlyFilteredFarmers.add(currFarmer);
+                    }
+                    else{
+                        Log.d(TAG, currFarmer.getExtensionPersonnel()+" does not qualify to be null");
+                    }
+                }
+
+                setFilteredFarmerList(newlyFilteredFarmers);
+            }
+            else if(filterFarmersS.getSelectedItemPosition() != -1){
+                String selection = filters.get(filterFarmersS.getSelectedItemPosition());
+
+                List<Farmer> newlyFilteredFarmers = new ArrayList<Farmer>();
+                for(int i = 0; i < allFarmers.size(); i++){
+                    Farmer currFarmer = allFarmers.get(i);
+                    if(currFarmer.getExtensionPersonnel() != null && currFarmer.getExtensionPersonnel().length() > 0 &&
+                            selection.contains(currFarmer.getExtensionPersonnel())){
+                        newlyFilteredFarmers.add(currFarmer);
+                    }
+                    else{
+                        Log.d(TAG, currFarmer.getExtensionPersonnel()+" does not match "+selection);
+                    }
+                }
+
+                setFilteredFarmerList(newlyFilteredFarmers);
+            }
+        }
+    }
+
+    @Override
+    public void onNothingSelected(AdapterView<?> parent) {
+
+    }
+
+    private class GetFarmerDataThread extends AsyncTask<String, Integer, String>{
+
+        private ProgressDialog progressDialog;
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(FarmerSelectionActivity.this, "", Locale.getStringInLocale("loading_please_wait", FarmerSelectionActivity.this), true);
+        }
+
+        @Override
+        protected String doInBackground(String... params) {
+            JSONObject jsonObject=new JSONObject();
+            try
+            {
+                jsonObject.put("simCardSN",params[0]);
+                jsonObject.put("deviceType", "Android");
+                //jsonObject.put("mobileNumber",params[1]);
+                String result = DataHandler.sendDataToServer(FarmerSelectionActivity.this, jsonObject.toString(), DataHandler.ADMIN_AUTHENTICATION_URL, true);
+                return result;
+            }
+            catch (JSONException e)
+            {
+                e.printStackTrace();
+            }
+            return null;
+        }
+
+        @Override
+        protected void onPostExecute(String result) {
+            super.onPostExecute(result);
+            progressDialog.dismiss();
+            if(result==null){
+                String httpError = DataHandler.getSharedPreference(FarmerSelectionActivity.this, "http_error", "No Error thrown to application. Something must be really wrong");
+                Toast.makeText(FarmerSelectionActivity.this, httpError, Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
+                Toast.makeText(FarmerSelectionActivity.this, Locale.getStringInLocale("generic_sms_error", FarmerSelectionActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
+                Toast.makeText(FarmerSelectionActivity.this, Locale.getStringInLocale("no_service", FarmerSelectionActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
+                Toast.makeText(FarmerSelectionActivity.this, Locale.getStringInLocale("radio_off", FarmerSelectionActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
+                Toast.makeText(FarmerSelectionActivity.this, Locale.getStringInLocale("server_not_receive_sms", FarmerSelectionActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.CODE_USER_NOT_AUTHENTICATED)){
+                Log.w(TAG, "Admin not authenticated. May mean he/she changed sim cards after logging in");
+                Toast.makeText(FarmerSelectionActivity.this, Locale.getStringInLocale("sim_card_not_admin", FarmerSelectionActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else{
+                loadAdminData(result);
+            }
+        }
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/FertilityActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/FertilityActivity.java
new file mode 100644
index 0000000..27ef087
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/FertilityActivity.java
@@ -0,0 +1,124 @@
+package org.cgiar.ilri.np.farmer;
+
+import android.app.Dialog;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+
+import com.actionbarsherlock.app.SherlockActivity;
+import com.actionbarsherlock.view.Menu;
+import com.actionbarsherlock.view.MenuInflater;
+import com.actionbarsherlock.view.MenuItem;
+
+import org.cgiar.ilri.np.farmer.backend.Locale;
+import org.cgiar.ilri.np.farmer.carrier.Cow;
+
+public class FertilityActivity extends SherlockActivity implements NPActivity, View.OnClickListener{
+
+    private Menu menu;
+    private Button servicingB;
+    private Button calvingB;
+    private Button backB;
+
+    private Dialog servicingTypeDialog;
+    private Button bullB;
+    private Button aiB;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_fertility);
+
+        servicingB = (Button) this.findViewById(R.id.servicing_b);
+        servicingB.setOnClickListener(this);
+
+        calvingB = (Button) this.findViewById(R.id.calving_b);
+        calvingB.setOnClickListener(this);
+
+        backB = (Button) this.findViewById(R.id.back_b);
+        backB.setOnClickListener(this);
+
+        servicingTypeDialog =new Dialog(this);
+        servicingTypeDialog.setContentView(R.layout.dialog_servicing_type);
+        bullB =(Button) servicingTypeDialog.findViewById(R.id.bull_b);
+        bullB.setOnClickListener(this);
+
+        aiB = (Button) servicingTypeDialog.findViewById(R.id.ai_b);
+        aiB.setOnClickListener(this);
+        initTextInViews();
+    }
+
+    public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu) {
+        MenuInflater inflater = getSupportMenuInflater();
+        inflater.inflate(R.menu.milk_production, menu);
+        this.menu = menu;
+        initMenuText();
+        return true;
+    }
+
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle item selection
+        if(Language.processLanguageMenuItemSelected(this, this, item)){
+            return true;
+        }
+        else if(item.getItemId() == R.id.action_back_main_menu) {
+            Intent intent = new Intent(this, MainMenu.class);
+            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_FARMER);
+            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+            startActivity(intent);
+        }
+        return false;
+    }
+
+    @Override
+    public void initTextInViews(){
+        this.setTitle(Locale.getStringInLocale("fertility",this));
+        servicingB.setText(Locale.getStringInLocale("servicing",this));
+        calvingB.setText(Locale.getStringInLocale("calving",this));
+        servicingTypeDialog.setTitle(Locale.getStringInLocale("select_service_type",this));
+        aiB.setText(Locale.getStringInLocale("artificial_inseminamtion",this));
+        bullB.setText(Locale.getStringInLocale("bull_servicing",this));
+        backB.setText(Locale.getStringInLocale("back", this));
+        initMenuText();
+    }
+
+    private void initMenuText(){
+        if(this.menu != null){
+            MenuItem mainMenuMI = menu.findItem(R.id.action_back_main_menu);
+            mainMenuMI.setTitle(Locale.getStringInLocale("back_to_main_menu", this));
+        }
+    }
+
+    @Override
+    public void onClick(View view) {
+        if(view == servicingB){
+            servicingTypeDialog.show();
+        }
+        else if(view == calvingB){
+            Intent intent = new Intent(this, AddEventActivity.class);
+            intent.putExtra(AddEventActivity.KEY_MODE, AddEventActivity.MODE_CALVING);
+            startActivity(intent);
+        }
+        else if(view == bullB){
+            Intent intent = new Intent(this, AddEventActivity.class);
+            intent.putExtra(AddEventActivity.KEY_MODE, AddEventActivity.MODE_SERVICING);
+            intent.putExtra(AddEventActivity.KEY_SERVICING_TYPE, Cow.SERVICE_TYPE_BULL);
+            servicingTypeDialog.dismiss();
+            startActivity(intent);
+        }
+        else if(view == aiB){
+            Intent intent = new Intent(this, AddEventActivity.class);
+            intent.putExtra(AddEventActivity.KEY_MODE, AddEventActivity.MODE_SERVICING);
+            intent.putExtra(AddEventActivity.KEY_SERVICING_TYPE, Cow.SERVICE_TYPE_AI);
+            servicingTypeDialog.dismiss();
+            startActivity(intent);
+        }
+        else if(view == backB){
+            Intent intent = new Intent(this, MainMenu.class);
+            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_FARMER);
+            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+            startActivity(intent);
+        }
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/LandingActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/LandingActivity.java
new file mode 100644
index 0000000..de445ab
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/LandingActivity.java
@@ -0,0 +1,459 @@
+package org.cgiar.ilri.np.farmer;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.telephony.TelephonyManager;
+import android.util.Log;
+import android.view.View;
+import android.widget.Button;
+import android.widget.CheckBox;
+import android.widget.EditText;
+import android.widget.TextView;
+import android.widget.Toast;
+import com.actionbarsherlock.view.Menu;
+
+import com.actionbarsherlock.app.SherlockActivity;
+import com.actionbarsherlock.view.MenuInflater;
+import com.actionbarsherlock.view.MenuItem;
+
+import org.cgiar.ilri.np.farmer.backend.DataHandler;
+import org.cgiar.ilri.np.farmer.backend.Locale;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+public class LandingActivity extends SherlockActivity implements NPActivity, View.OnClickListener
+{
+    private static final String TAG="LandingActivity";
+    private Button loginButton;
+    private Button registerButton;
+    private boolean loginSessionOn=false;
+    private String loginText;
+    private String unsuccessfulAuthText;
+    private String okayText;
+    private String fromAnotherDevWarning;
+    private String yesText;
+    private String noText;
+    private String loginAnywayText;
+    private String registerText;
+    private Dialog changeSystemSimCardDialog;
+    private TextView oldMobileNumberTV;
+    private EditText oldMobileNumberET;
+    private TextView newMobileNumberTV;
+    private EditText newMobileNumberET;
+    private Button changeSystemSimCardB;
+    private String simCardRegistrationText;
+    private String oldNumberNotInSystemText;
+    private String welcomeText;
+    private String loadingPleaseWait;
+    private String serverError;
+    private CheckBox adminFuncCB;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState)
+    {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_landing);
+        //DataHandler.requestPermissionToUseSMS(this);
+
+        //initialize child views
+        loginButton=(Button)this.findViewById(R.id.login_button);
+        loginButton.setOnClickListener(this);
+        registerButton=(Button)this.findViewById(R.id.register_button);
+        registerButton.setOnClickListener(this);
+        changeSystemSimCardDialog=new Dialog(this);
+        changeSystemSimCardDialog.setContentView(R.layout.dialog_change_system_sim_card);
+        oldMobileNumberTV =(TextView)changeSystemSimCardDialog.findViewById(R.id.old_mobile_number_tv);
+        oldMobileNumberET =(EditText)changeSystemSimCardDialog.findViewById(R.id.old_mobile_number_et);
+        changeSystemSimCardB=(Button)changeSystemSimCardDialog.findViewById(R.id.dialog_change_system_ok_b);
+        changeSystemSimCardB.setOnClickListener(this);
+        newMobileNumberTV=(TextView)changeSystemSimCardDialog.findViewById(R.id.new_mobile_number_tv);
+        newMobileNumberET=(EditText)changeSystemSimCardDialog.findViewById(R.id.new_mobile_number_et);
+        TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
+        newMobileNumberET.setText(telephonyManager.getLine1Number());
+
+        adminFuncCB = (CheckBox)this.findViewById(R.id.admin_func_cb);
+
+        //init text according to locale
+        initTextInViews();
+
+        //get version name for the application and toast it
+        try {
+            PackageInfo pInfo = getPackageManager().getPackageInfo(getPackageName(), 0);
+            Toast.makeText(this, "Version "+pInfo.versionName, Toast.LENGTH_LONG).show();
+        } catch (PackageManager.NameNotFoundException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public boolean onCreateOptionsMenu(Menu menu) {
+        MenuInflater inflater = getSupportMenuInflater();
+        inflater.inflate(R.menu.landing_activity, menu);
+        return true;
+    }
+
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle item selection
+        if(Language.processLanguageMenuItemSelected(this, this, item)){
+            return true;
+        }
+        return false;
+    }
+
+    @Override
+    protected void onResume()
+    {
+        super.onResume();
+    }
+
+    @Override
+    public void initTextInViews()
+    {
+        loginButton.setText(Locale.getStringInLocale("login", this));
+        registerButton.setText(Locale.getStringInLocale("register", this));
+        loginText=Locale.getStringInLocale("login", this);
+        unsuccessfulAuthText=Locale.getStringInLocale("sim_card_not_registered", this);
+        okayText=Locale.getStringInLocale("okay", this);
+        fromAnotherDevWarning=Locale.getStringInLocale("logging_in_from_different_device", this);
+        yesText=Locale.getStringInLocale("yes", this);
+        noText=Locale.getStringInLocale("no", this);
+        loginAnywayText=Locale.getStringInLocale("login_anyway", this);
+        registerText=Locale.getStringInLocale("register", this);
+        oldMobileNumberTV.setText(Locale.getStringInLocale("old_mobile_number", this));
+        newMobileNumberTV.setText(Locale.getStringInLocale("new_mobile_number", this));
+        changeSystemSimCardDialog.setTitle(Locale.getStringInLocale("sim_card_registration", this));
+        changeSystemSimCardB.setText(Locale.getStringInLocale("okay", this));
+        simCardRegistrationText=Locale.getStringInLocale("sim_card_registration", this);
+        oldNumberNotInSystemText=Locale.getStringInLocale("old_number_not_in_system", this);
+        welcomeText=Locale.getStringInLocale("welcome", this);
+        loadingPleaseWait=Locale.getStringInLocale("loading_please_wait", this);
+        serverError=Locale.getStringInLocale("problem_connecting_to_server", this);
+        adminFuncCB.setText(Locale.getStringInLocale("admin_functions", this));
+    }
+
+    private void startRegistrationActivity()
+    {
+        Intent intent=new Intent(LandingActivity.this,FarmerRegistrationActivity.class);
+        startActivity(intent);
+    }
+
+    @Override
+    public void onClick(View view)
+    {
+        if(view==registerButton)
+        {
+            startRegistrationActivity();
+        }
+        else if(view==loginButton)
+        {
+            Log.d(TAG,"Login button clicked");
+            if(loginSessionOn == false)
+            {
+                //loginDialog.show();
+                authenticateUser();
+            }
+        }
+        else if(view==changeSystemSimCardB)
+        {
+            registerSimCard();
+        }
+    }
+
+
+
+    private void authenticateUser()
+    {
+        TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
+        if(!adminFuncCB.isChecked()){
+            Log.d(TAG, "Trying to log in as normal farmer");
+            if(telephonyManager.getSimSerialNumber()!=null)
+            {
+                UserAuthenticationThread authenticationThread=new UserAuthenticationThread();
+                authenticationThread.execute(telephonyManager.getSimSerialNumber());
+            }
+            else{
+                Toast.makeText(this,Locale.getStringInLocale("no_sim_card",this),Toast.LENGTH_LONG).show();
+            }
+        }
+        else{
+            Log.d(TAG, "Trying to log in as admin");
+            if(telephonyManager.getSimSerialNumber()!=null)
+            {
+                AdminAuthenticationThread authenticationThread=new AdminAuthenticationThread();
+                authenticationThread.execute(telephonyManager.getSimSerialNumber());
+            }
+            else{
+                Toast.makeText(this,Locale.getStringInLocale("no_sim_card",this),Toast.LENGTH_LONG).show();
+            }
+        }
+    }
+
+    private class UserAuthenticationThread extends AsyncTask<String,Integer,String> {
+        ProgressDialog progressDialog;
+
+        @Override
+        protected void onPreExecute()
+        {
+            super.onPreExecute();
+            loginSessionOn=true;
+            progressDialog= ProgressDialog.show(LandingActivity.this, "",loadingPleaseWait, true);
+
+        }
+
+        @Override
+        protected String doInBackground(String... params)
+        {
+            JSONObject jsonObject=new JSONObject();
+            try
+            {
+                jsonObject.put("simCardSN",params[0]);
+                jsonObject.put("deviceType", "Android");
+                //jsonObject.put("mobileNumber",params[1]);
+                String result = DataHandler.sendDataToServer(LandingActivity.this, jsonObject.toString(),DataHandler.FARMER_AUTHENTICATION_URL, true);
+                return result;
+            }
+            catch (JSONException e)
+            {
+                e.printStackTrace();
+            }
+            return null;
+        }
+
+        @Override
+        protected void onPostExecute(String result)
+        {
+            super.onPostExecute(result);
+            progressDialog.dismiss();
+            loginSessionOn=false;
+            if(result==null)
+            {
+                String httpError = DataHandler.getSharedPreference(LandingActivity.this, "http_error", "No Error thrown to application. Something must be really wrong");
+                Toast.makeText(LandingActivity.this,httpError,Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
+                Toast.makeText(LandingActivity.this, Locale.getStringInLocale("generic_sms_error", LandingActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
+                Toast.makeText(LandingActivity.this, Locale.getStringInLocale("no_service", LandingActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
+                Toast.makeText(LandingActivity.this, Locale.getStringInLocale("radio_off", LandingActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
+                Toast.makeText(LandingActivity.this, Locale.getStringInLocale("server_not_receive_sms", LandingActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.CODE_USER_NOT_AUTHENTICATED))
+            {
+                showRegisterOrLoginDialog();
+            }
+            else {
+                //save farmer data in the database
+                SaveFarmerDataThread saveFarmerDataThread = new SaveFarmerDataThread();
+                saveFarmerDataThread.execute(result);
+
+                Intent intent=new Intent(LandingActivity.this,MainMenu.class);
+                Log.d(TAG, result);
+                intent.putExtra(MainMenu.KEY_FARMER_DATA, result);
+                intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_FARMER);
+                startActivity(intent);
+            }
+        }
+
+        private void showRegisterOrLoginDialog()
+        {
+            AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(LandingActivity.this);
+            alertDialogBuilder.setTitle(loginText);
+            alertDialogBuilder
+                    .setMessage(unsuccessfulAuthText)
+                    .setCancelable(true)
+                    .setPositiveButton(loginAnywayText, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialog, int which)
+                        {
+                            changeSystemSimCardDialog.show();
+                        }
+                    })
+                    .setNegativeButton(registerText, new DialogInterface.OnClickListener() {
+
+                        @Override
+                        public void onClick(DialogInterface dialog, int which) {
+                            dialog.dismiss();
+                            startRegistrationActivity();
+                        }
+                    });
+            AlertDialog alertDialog=alertDialogBuilder.create();
+            alertDialog.show();
+        }
+    }
+
+    private class AdminAuthenticationThread extends AsyncTask<String,Integer,String> {
+        ProgressDialog progressDialog;
+
+        @Override
+        protected void onPreExecute()
+        {
+            super.onPreExecute();
+            loginSessionOn=true;
+            progressDialog= ProgressDialog.show(LandingActivity.this, "",loadingPleaseWait, true);
+
+        }
+
+        @Override
+        protected String doInBackground(String... params)
+        {
+            JSONObject jsonObject=new JSONObject();
+            try
+            {
+                jsonObject.put("simCardSN",params[0]);
+                jsonObject.put("deviceType", "Android");
+                //jsonObject.put("mobileNumber",params[1]);
+                String result = DataHandler.sendDataToServer(LandingActivity.this, jsonObject.toString(),DataHandler.ADMIN_AUTHENTICATION_URL, true);
+                return result;
+            }
+            catch (JSONException e)
+            {
+                e.printStackTrace();
+            }
+            return null;
+        }
+
+        @Override
+        protected void onPostExecute(String result)
+        {
+            super.onPostExecute(result);
+            progressDialog.dismiss();
+            loginSessionOn=false;
+            if(result==null)
+            {
+                String httpError = DataHandler.getSharedPreference(LandingActivity.this, "http_error", "No Error thrown to application. Something must be really wrong");
+                Toast.makeText(LandingActivity.this,httpError,Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
+                Toast.makeText(LandingActivity.this, Locale.getStringInLocale("generic_sms_error", LandingActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
+                Toast.makeText(LandingActivity.this, Locale.getStringInLocale("no_service", LandingActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
+                Toast.makeText(LandingActivity.this, Locale.getStringInLocale("radio_off", LandingActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
+                Toast.makeText(LandingActivity.this, Locale.getStringInLocale("server_not_receive_sms", LandingActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.CODE_USER_NOT_AUTHENTICATED))
+            {
+                Log.w(TAG, "User trying to log in as admin with an unregistered Sim Card");
+                Toast.makeText(LandingActivity.this, Locale.getStringInLocale("sim_card_not_admin", LandingActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else{
+                Log.d(TAG, "Admin data from server = "+result);
+                Intent intent=new Intent(LandingActivity.this,MainMenu.class);
+                intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_ADMIN);
+                intent.putExtra(MainMenu.KEY_ADMIN_DATA, result);
+                startActivity(intent);
+            }
+        }
+    }
+
+    private void registerSimCard()
+    {
+        if(oldMobileNumberET.getText().toString().length() == 0){
+            Toast.makeText(this, Locale.getStringInLocale("enter_old_phone_no", this), Toast.LENGTH_LONG).show();
+        }
+        else if(newMobileNumberET.getText().toString().length() == 0){
+            Toast.makeText(this, Locale.getStringInLocale("enter_new_phone_no", this), Toast.LENGTH_LONG).show();
+        }
+        else{
+            TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
+            if(telephonyManager.getSimSerialNumber()!=null) {
+                SimCardRegistrationThread simCardRegistrationThread=new SimCardRegistrationThread();
+                simCardRegistrationThread.execute(oldMobileNumberET.getText().toString(),newMobileNumberET.getText().toString(),telephonyManager.getSimSerialNumber());
+            }
+        }
+    }
+
+    private class SimCardRegistrationThread extends AsyncTask<String,Integer,String>
+    {
+        private ProgressDialog progressDialog;
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(LandingActivity.this, "",loadingPleaseWait, true);
+        }
+
+        @Override
+        protected String doInBackground(String... params)
+        {
+
+            JSONObject jsonObject=new JSONObject();
+            try
+            {
+                String result=null;
+                jsonObject.put("oldMobileNumber",params[0]);
+                jsonObject.put("newMobileNumber",params[1]);
+                jsonObject.put("newSimCardSN",params[2]);
+                result= DataHandler.sendDataToServer(LandingActivity.this, jsonObject.toString(),DataHandler.FARMER_SIM_CARD_REGISTRATION_URL, true);
+                return result;
+            }
+            catch (JSONException e)
+            {
+                e.printStackTrace();
+            }
+
+            return null;
+        }
+
+        @Override
+        protected void onPostExecute(String result)
+        {
+            super.onPostExecute(result);
+            progressDialog.dismiss();
+            Log.d(TAG,"sim card registration *****"+result);
+            if(result==null)
+            {
+                Toast.makeText(LandingActivity.this, Locale.getStringInLocale("problem_connecting_to_server", LandingActivity.this),Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.CODE_USER_NOT_AUTHENTICATED)) {
+                Utils.showGenericAlertDialog(LandingActivity.this,simCardRegistrationText,oldNumberNotInSystemText,okayText,null,null,null);
+            }
+            else if(result.equals(DataHandler.CODE_SIM_CARD_REGISTERED))
+            {
+                changeSystemSimCardDialog.dismiss();
+                authenticateUser();
+            }
+        }
+    }
+
+    private class SaveFarmerDataThread extends AsyncTask<String, Integer, Integer>{
+
+        @Override
+        protected Integer doInBackground(String... params) {
+            Log.d(TAG, "About to save farmer data in the database");
+
+            try {
+                JSONObject farmerData = new JSONObject(params[0]);
+                DataHandler.saveFarmerData(LandingActivity.this, farmerData);
+            } catch (JSONException e) {
+                e.printStackTrace();
+            }
+
+            return 0;
+        }
+
+        @Override
+        protected void onPostExecute(Integer integer) {
+            super.onPostExecute(integer);
+
+            Log.d(TAG, "Finished caching farmer data in SQLite database");
+        }
+    }
+
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/MainMenu.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/MainMenu.java
new file mode 100644
index 0000000..158a665
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/MainMenu.java
@@ -0,0 +1,345 @@
+package org.cgiar.ilri.np.farmer;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.location.Criteria;
+import android.location.Location;
+import android.location.LocationListener;
+import android.location.LocationManager;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.provider.Settings;
+import android.telephony.TelephonyManager;
+import android.util.Log;
+import android.view.View;
+import android.widget.Button;
+import android.widget.Toast;
+
+import com.actionbarsherlock.app.SherlockActivity;
+import com.actionbarsherlock.view.Menu;
+import com.actionbarsherlock.view.MenuInflater;
+import com.actionbarsherlock.view.MenuItem;
+
+import org.cgiar.ilri.np.farmer.backend.DataHandler;
+import org.cgiar.ilri.np.farmer.backend.Locale;
+import org.cgiar.ilri.np.farmer.carrier.Farmer;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.List;
+
+public class MainMenu extends SherlockActivity implements NPActivity, View.OnClickListener, LocationListener
+{
+    private static final String TAG="MainMenu";
+    public static final String KEY_LONGITUDE = "longitude";
+    public static final String KEY_LATITUDE = "latitude";
+    public static final String KEY_FARMER_DATA = "farmerData";
+    public static final String KEY_MODE = "mode";
+    public static final String KEY_ADMIN_DATA = "adminData";
+
+    public static final String MODE_FARMER = "isFarmer";
+    public static final String MODE_ADMIN = "isAdmin";
+
+    private Button milkProductionB;
+    private Button fertilityB;
+    private Button eventsB;
+    private Button editFarmerB;
+    private Button editCowB;
+    private Button logoutB;
+    private JSONObject farmerData;
+    private JSONObject adminData;
+    private LocationManager locationManager;
+    private String longitude;
+    private String latitude;
+    private List<Farmer> farmers;
+
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState)
+    {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main_menu);
+        //DataHandler.requestPermissionToUseSMS(this);
+
+        milkProductionB=(Button)this.findViewById(R.id.milk_production_b);
+        milkProductionB.setOnClickListener(this);
+        fertilityB = (Button)this.findViewById(R.id.fertility_b);
+        fertilityB.setOnClickListener(this);
+        eventsB =(Button)this.findViewById(R.id.events_b);
+        eventsB.setOnClickListener(this);
+        editFarmerB = (Button)this.findViewById(R.id.edit_farmer_b);
+        editFarmerB.setOnClickListener(this);
+        editCowB = (Button)this.findViewById(R.id.edit_cow_b);
+        editCowB.setOnClickListener(this);
+        logoutB = (Button)this.findViewById(R.id.logout_b);
+        logoutB.setOnClickListener(this);
+
+        Bundle bundle=this.getIntent().getExtras();
+        if(bundle != null){
+            String mode = bundle.getString(KEY_MODE);
+            if(mode != null){
+                switchMode(mode);
+                if(mode.equals(MODE_FARMER)){
+                    String farmerJSONString = bundle.getString(KEY_FARMER_DATA);
+
+                    try{
+                        farmerData = new JSONObject(farmerJSONString);
+                        registerCoords();
+
+                        Toast.makeText(this, Locale.getStringInLocale("welcome", this)+" "+farmerData.getString("name"), Toast.LENGTH_LONG).show();
+                    }
+                    catch (Exception e){
+                        e.printStackTrace();
+                    }
+                }
+                else if(mode.equals(MODE_ADMIN)){
+                    String adminJSONString = bundle.getString(KEY_ADMIN_DATA);
+                    Log.d(TAG, " *** Admin data from login screen = "+adminJSONString);
+                    try{
+                        adminData = new JSONObject(adminJSONString);
+                        String type = Locale.getStringInLocale("admin", this);
+                        if(adminData.getInt("is_super") == 1){
+                            type = Locale.getStringInLocale("super_admin", this);
+                        }
+                        Toast.makeText(this, Locale.getStringInLocale("welcome", this) + " " + adminData.getString("name") + " (" + type + ")", Toast.LENGTH_LONG).show();
+                    }
+                    catch (Exception e){
+                        e.printStackTrace();
+                    }
+                }
+                else{
+                    Log.e(TAG, "Unable to find out which mode to use in main menu");
+                }
+            }
+            else{
+                Log.e(TAG, "Mode is null. Not sure which mode to use");
+            }
+        }
+
+        initTextInViews();
+    }
+
+    public boolean onCreateOptionsMenu(Menu menu) {
+        MenuInflater inflater = getSupportMenuInflater();
+        inflater.inflate(R.menu.main_menu, menu);
+        return true;
+    }
+
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle item selection
+        if(Language.processLanguageMenuItemSelected(this, this, item)){
+            return true;
+        }
+        return false;
+    }
+
+    @Override
+    public void initTextInViews()
+    {
+        this.setTitle(Locale.getStringInLocale("main_menu",this));
+        milkProductionB.setText(Locale.getStringInLocale("milk_production", this));
+        fertilityB.setText(Locale.getStringInLocale("fertility", this));
+        eventsB.setText(Locale.getStringInLocale("events",this));
+        editFarmerB.setText(Locale.getStringInLocale("edit_farmer", this));
+        editCowB.setText(Locale.getStringInLocale("edit_cow", this));
+        logoutB.setText(Locale.getStringInLocale("logout", this));
+    }
+
+    private void switchMode(String mode){
+        milkProductionB.setVisibility(View.GONE);
+        fertilityB.setVisibility(View.GONE);
+        eventsB.setVisibility(View.GONE);
+        editFarmerB.setVisibility(View.GONE);
+        editCowB.setVisibility(View.GONE);
+        if(mode.equals(MODE_FARMER)){
+            milkProductionB.setVisibility(View.VISIBLE);
+            fertilityB.setVisibility(View.VISIBLE);
+            eventsB.setVisibility(View.VISIBLE);
+        }
+        else if(mode.equals(MODE_ADMIN)){
+            editFarmerB.setVisibility(View.VISIBLE);
+            editCowB.setVisibility(View.VISIBLE);
+        }
+    }
+
+    @Override
+    public void onClick(View view) {
+        sendDataToServer();
+        if(view==milkProductionB)
+        {
+            Intent intent=new Intent(this,MilkProductionActivity.class);
+            startActivity(intent);
+        }
+        else if(view == fertilityB){
+            Intent intent=new Intent(this,FertilityActivity.class);
+            startActivity(intent);
+        }
+        else if(view==eventsB)
+        {
+            Intent intent=new Intent(this,EventsActivity.class);
+            startActivity(intent);
+        }
+        else if(view==editFarmerB){
+            if(adminData != null){
+                Intent intent = new Intent(this, FarmerSelectionActivity.class);
+                intent.putExtra(FarmerSelectionActivity.KEY_ADMIN_DATA, adminData.toString());
+                startActivity(intent);
+            }
+            else {
+                Log.w(TAG, "Admin data is null. Unable to move to the next activity");
+            }
+        }
+        else if(view==editCowB){
+            if(adminData != null){
+                Intent intent = new Intent(this, CowSelectionActivity.class);
+                intent.putExtra(CowSelectionActivity.KEY_ADMIN_DATA, adminData.toString());
+                startActivity(intent);
+            }
+            else {
+                Log.w(TAG, "Admin data is null. Unable to move to the next activity");
+            }
+        }
+        else if(view==logoutB){
+            Intent intent = new Intent(this, LandingActivity.class);
+            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+            startActivity(intent);
+        }
+    }
+
+    private void registerCoords(){
+        try {
+            String regLongitude = farmerData.getString("gps_longitude");
+            String regLatitude = farmerData.getString("gps_latitude");
+            if(regLongitude==null || regLongitude.trim().length()==0 || regLatitude==null || regLatitude.trim().length()==0){
+                buildGPSAlert();
+            }
+        } catch (JSONException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private void buildGPSAlert(){
+        AlertDialog.Builder builder = new AlertDialog.Builder(this);
+        builder.setMessage(Locale.getStringInLocale("are_you_in_farm",this));
+        builder.setPositiveButton(Locale.getStringInLocale("yes",this), new DialogInterface.OnClickListener(){
+
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                dialog.dismiss();
+                getGPSCoordinates();
+            }
+        });
+        builder.setNegativeButton(Locale.getStringInLocale("no",this), new DialogInterface.OnClickListener(){
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                dialog.dismiss();
+            }
+        });
+
+        AlertDialog alertDialog = builder.create();
+        alertDialog.show();
+    }
+
+    private void getGPSCoordinates() {
+        locationManager=(LocationManager)getSystemService(LOCATION_SERVICE);
+        if(locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER))
+        {
+            //Toast.makeText(this,"gps started",Toast.LENGTH_LONG).show();
+            Criteria criteria=new Criteria();
+            String provider=locationManager.getBestProvider(criteria,false);
+            Location location=locationManager.getLastKnownLocation(provider);
+            locationManager.requestLocationUpdates(provider,18000,1000,this);//If farmer  is moving at 200km/h, will still be able to update!
+            if(location!=null)
+            {
+                onLocationChanged(location);
+            }
+        }
+        else
+        {
+            AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(this);
+            alertDialogBuilder.setTitle(Locale.getStringInLocale("enable_gps",this));
+            alertDialogBuilder
+                    .setMessage(Locale.getStringInLocale("reason_for_enabling_gps", this))
+                    .setCancelable(false)
+                    .setPositiveButton(Locale.getStringInLocale("okay",this), new DialogInterface.OnClickListener()
+                    {
+                        @Override
+                        public void onClick(DialogInterface dialog, int which)
+                        {
+                            Intent intent=new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
+                            startActivity(intent);
+                        }
+                    })
+                    .setNegativeButton(Locale.getStringInLocale("cancel",this), new DialogInterface.OnClickListener()
+                    {
+                        @Override
+                        public void onClick(DialogInterface dialog, int which)
+                        {
+                            dialog.cancel();
+                            Intent intent=new Intent(MainMenu.this,LandingActivity.class);
+                            startActivity(intent);
+                        }
+                    });
+            AlertDialog alertDialog=alertDialogBuilder.create();
+            alertDialog.show();
+
+        }
+    }
+
+    @Override
+    public void onLocationChanged(Location location) {
+        latitude=String.valueOf(location.getLatitude());
+        longitude=String.valueOf(location.getLongitude());
+        Log.d(TAG, "latitude : " + latitude);
+        Log.d(TAG, "longitude : " + longitude);
+    }
+
+    @Override
+    public void onStatusChanged(String provider, int status, Bundle extras) {
+
+    }
+
+    @Override
+    public void onProviderEnabled(String provider) {
+
+    }
+
+    @Override
+    public void onProviderDisabled(String provider) {
+
+    }
+
+    private void sendDataToServer(){
+        if(longitude!=null && longitude.trim().length()>0 && latitude!=null && latitude.trim().length()>0){
+            JSONObject jsonObject = new JSONObject();
+            try {
+                TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
+                jsonObject.put("simCardSN",telephonyManager.getSimSerialNumber());
+                jsonObject.put("longitude",longitude);
+                jsonObject.put("latitude",latitude);
+                CoordinateHandler coordinateHandler = new CoordinateHandler();
+                coordinateHandler.execute(jsonObject);
+            } catch (JSONException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    private class CoordinateHandler extends AsyncTask<JSONObject, Integer, String>{
+        @Override
+        protected String doInBackground(JSONObject... params) {
+            return DataHandler.sendDataToServer(MainMenu.this, params[0].toString(),DataHandler.FARMER_REGISTER_FARM_COORDS_URL, false);
+        }
+
+        @Override
+        protected void onPostExecute(String result) {
+            super.onPostExecute(result);
+
+            if(result!=null && result.equals(DataHandler.ACKNOWLEDGE_OK)){
+                Toast.makeText(MainMenu.this,Locale.getStringInLocale("farm_coords_successfully_reg", MainMenu.this),Toast.LENGTH_LONG).show();
+            }
+        }
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/MilkProcutionHistoryActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/MilkProcutionHistoryActivity.java
new file mode 100644
index 0000000..d0d5a56
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/MilkProcutionHistoryActivity.java
@@ -0,0 +1,589 @@
+package org.cgiar.ilri.np.farmer;
+
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.Intent;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.telephony.TelephonyManager;
+import android.util.DisplayMetrics;
+import android.util.Log;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TableLayout;
+import android.widget.TableRow;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.actionbarsherlock.app.SherlockActivity;
+import com.actionbarsherlock.view.Menu;
+import com.actionbarsherlock.view.MenuInflater;
+import com.actionbarsherlock.view.MenuItem;
+
+import org.cgiar.ilri.np.farmer.backend.DataHandler;
+import org.cgiar.ilri.np.farmer.backend.Locale;
+import org.cgiar.ilri.np.farmer.carrier.Cow;
+import org.cgiar.ilri.np.farmer.carrier.Farmer;
+import org.cgiar.ilri.np.farmer.carrier.MilkProduction;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class MilkProcutionHistoryActivity extends SherlockActivity implements NPActivity, View.OnClickListener
+{
+    private static final String TAG="MIlkProductionHistoryActivity";
+    private Menu menu;
+    private TextView dateTV;
+    private TextView cowNameTV;
+    private TextView timeTV;
+    private TextView quantityTV;
+    private List<String> productionHistoryIDs;
+    private String noDataWarning;
+    private DisplayMetrics metrics;
+    private TableLayout productionHistoryTL;
+    private TableLayout productionTotalTL;
+    private TextView totalDateTV;
+    private TextView totalCowNameTV;
+    private TextView totalQuantityTV;
+    private Button backB;
+
+    private String[] times;
+    private String todayText;
+    private String yesterdayText;
+    private String loadingPleaseWait;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState)
+    {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_milk_production_history);
+        //DataHandler.requestPermissionToUseSMS(this);
+
+        productionHistoryIDs=new ArrayList<String>();
+        metrics=new DisplayMetrics();
+
+        dateTV=(TextView)findViewById(R.id.date_tv);
+        cowNameTV=(TextView)findViewById(R.id.cow_name_tv);
+        timeTV=(TextView)findViewById(R.id.time_tv);
+        quantityTV=(TextView)findViewById(R.id.quantity_tv);
+        productionHistoryTL=(TableLayout)findViewById(R.id.production_history_tl);
+        productionTotalTL = (TableLayout)findViewById(R.id.production_total_tl);
+        totalDateTV = (TextView)findViewById(R.id.total_date_tv);
+        totalCowNameTV = (TextView)findViewById(R.id.total_cow_name_tv);
+        totalQuantityTV = (TextView)findViewById(R.id.total_quantity_tv);
+        backB = (Button)findViewById(R.id.back_b);
+        backB.setOnClickListener(this);
+
+        initTextInViews();
+        fetchProductionHistory();
+    }
+
+    public boolean onCreateOptionsMenu(Menu menu) {
+        MenuInflater inflater = getSupportMenuInflater();
+        inflater.inflate(R.menu.milk_procution_history, menu);
+        this.menu = menu;
+        initMenuText();
+        return true;
+    }
+
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle item selection
+        if(Language.processLanguageMenuItemSelected(this, this, item)){
+            return true;
+        }
+        else if(item.getItemId() == R.id.action_back_main_menu) {
+            Intent intent = new Intent(this, MainMenu.class);
+            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_FARMER);
+            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+            startActivity(intent);
+        }
+        return false;
+    }
+
+    @Override
+    public void initTextInViews()
+    {
+        dateTV.setText(Locale.getStringInLocale("date",this));
+        cowNameTV.setText(Locale.getStringInLocale("cow",this));
+        timeTV.setText(Locale.getStringInLocale("time",this));
+        quantityTV.setText(Locale.getStringInLocale("quantity",this));
+
+        totalDateTV.setText(Locale.getStringInLocale("date",this));
+        totalCowNameTV.setText(Locale.getStringInLocale("cow",this));
+        totalQuantityTV.setText(Locale.getStringInLocale("total", this));
+
+        noDataWarning=Locale.getStringInLocale("no_data_received",this);
+        times=Locale.getArrayInLocale("milking_times",this);
+        if(times == null) {
+            times = new String[1];
+            times[0] = "";
+        }
+        todayText=Locale.getStringInLocale("today",this);
+        yesterdayText=Locale.getStringInLocale("yesterday",this);
+        loadingPleaseWait=Locale.getStringInLocale("loading_please_wait",this);
+        backB.setText(Locale.getStringInLocale("back", this));
+        initMenuText();
+    }
+
+    private void initMenuText(){
+        if(this.menu != null){
+            MenuItem mainMenuMI = menu.findItem(R.id.action_back_main_menu);
+            mainMenuMI.setTitle(Locale.getStringInLocale("back_to_main_menu", this));
+        }
+    }
+
+    private void fetchProductionHistory()
+    {
+        TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
+        ProductionHistoryThread productionHistoryThread=new ProductionHistoryThread();
+        if(productionHistoryIDs.size()==0)
+        {
+            productionHistoryThread.execute(telephonyManager.getSimSerialNumber(),"-1");
+        }
+        else
+        {
+            productionHistoryThread.execute(telephonyManager.getSimSerialNumber(),productionHistoryIDs.get(productionHistoryIDs.size()-1));
+        }
+    }
+
+    @Override
+    public void onClick(View view) {
+        if(view == backB){
+            Intent intent = new Intent(this, MilkProductionActivity.class);
+            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+            startActivity(intent);
+        }
+    }
+
+    private class ProductionHistoryThread extends AsyncTask<String,Integer,Farmer>
+    {
+        private ProgressDialog progressDialog;
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(MilkProcutionHistoryActivity.this, "",loadingPleaseWait, true);
+        }
+
+        @Override
+        protected Farmer doInBackground(String... params)
+        {
+            /*JSONObject jsonObject=new JSONObject();
+            try
+            {
+                jsonObject.put("simCardSN",params[0]);
+                jsonObject.put("fromID",params[1]);
+                String result=DataHandler.sendDataToServer(MilkProcutionHistoryActivity.this, jsonObject.toString(),DataHandler.FARMER_FETCH_MILK_PRODUCTION_HISTORY_URL, true);
+                Log.d(TAG,"result gotten from server = "+result);
+                return result;
+            }
+            catch (JSONException e)
+            {
+                e.printStackTrace();
+            }
+            return null;*/
+
+
+            String result = DataHandler.sendCachedRequests(MilkProcutionHistoryActivity.this, true);//send cached data and receive updated farmer data
+            if(result != null && !result.equals(DataHandler.CODE_USER_NOT_AUTHENTICATED)){//no data fetched for this farmer
+                try {//try converting the response into a jsonobject. It might not work if the DataHandler returns a response code
+                    Log.d(TAG, "response is "+result);
+                    DataHandler.saveFarmerData(MilkProcutionHistoryActivity.this, new JSONObject(result));
+                } catch (JSONException e) {
+                    e.printStackTrace();
+                }
+            }
+            return DataHandler.getFarmerData(MilkProcutionHistoryActivity.this);
+        }
+
+        @Override
+        protected void onPostExecute(Farmer farmer)
+        {
+            super.onPostExecute(farmer);
+            progressDialog.dismiss();
+            if(farmer==null)
+            {
+                Toast.makeText(MilkProcutionHistoryActivity.this,"server error",Toast.LENGTH_LONG).show();
+            }
+            /*else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
+                Toast.makeText(MilkProcutionHistoryActivity.this, Locale.getStringInLocale("generic_sms_error", MilkProcutionHistoryActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
+                Toast.makeText(MilkProcutionHistoryActivity.this, Locale.getStringInLocale("no_service", MilkProcutionHistoryActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
+                Toast.makeText(MilkProcutionHistoryActivity.this, Locale.getStringInLocale("radio_off", MilkProcutionHistoryActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
+                Toast.makeText(MilkProcutionHistoryActivity.this, Locale.getStringInLocale("server_not_receive_sms", MilkProcutionHistoryActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.NO_DATA))
+            {
+                Toast.makeText(MilkProcutionHistoryActivity.this,noDataWarning,Toast.LENGTH_LONG).show();
+            }*/
+            else
+            {
+                /*try
+                {
+                    JSONObject jsonObject=new JSONObject(result);
+                    JSONArray historyArray=jsonObject.getJSONArray("history");
+                    addTotalTableRows(historyArray);
+                    addHistoryTableRows(historyArray);
+                }
+                catch (JSONException e)
+                {
+                    e.printStackTrace();
+                }*/
+                try{
+                    List<Cow> allCows = farmer.getCows();
+                    JSONArray historyArray = new JSONArray();
+                    for(int cowIndex = 0; cowIndex < allCows.size(); cowIndex++){
+                        //append all events for this cow to the UI
+                        List<MilkProduction> cowMP = allCows.get(cowIndex).getMilkProduction();
+                        for(int mpIndex = 0; mpIndex < cowMP.size(); mpIndex++){
+                            JSONObject currMP = new JSONObject();
+                            currMP.put("id", cowMP.get(mpIndex).getId());
+                            currMP.put("date", cowMP.get(mpIndex).getDate());
+                            currMP.put("time", cowMP.get(mpIndex).getTime());
+                            currMP.put("name", allCows.get(cowIndex).getName());
+                            currMP.put("ear_tag_number", allCows.get(cowIndex).getEarTagNumber());
+                            currMP.put("quantity_type", cowMP.get(mpIndex).getQuantityType());
+                            currMP.put("quantity", cowMP.get(mpIndex).getQuantity());
+
+                            historyArray.put(currMP);
+                        }
+                    }
+
+                    addTotalTableRows(historyArray);
+                    addHistoryTableRows(historyArray);
+                }
+                catch (Exception e){
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+
+    private TextView generateTextView(String text, int id,int tableRowHeight,int tableTextSize)
+    {
+        TextView textView=new TextView(this);
+        TableRow.LayoutParams dateLP=new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT,tableRowHeight);
+        textView.setId(id);
+        textView.setText(text);
+        textView.setTextSize(tableTextSize);
+        textView.setTextColor(getResources().getColor(R.color.text_input_color));
+        textView.setGravity(Gravity.CENTER);
+        textView.setLayoutParams(dateLP);
+        return textView;
+    }
+
+    private View generateRowSeparator(int id,int tableRowHeight)
+    {
+        final View rowSeperator=new View(this);
+        rowSeperator.setId(id);
+        rowSeperator.setLayoutParams(new TableRow.LayoutParams(1,tableRowHeight));
+        rowSeperator.setBackgroundColor(getResources().getColor(R.color.pressed_mistro));
+        return rowSeperator;
+    }
+
+    private void addHistoryTableRows(JSONArray history)
+    {
+        for (int i=0;i<history.length();i++)
+        {
+            try
+            {
+                JSONObject jsonObject=history.getJSONObject(i);
+                productionHistoryIDs.add(jsonObject.getString("id"));
+                final TableRow tableRow=new TableRow(this);
+                tableRow.setId(3424+Integer.parseInt(jsonObject.getString("id")));
+                int tableRowHeight=0;
+                int tableTextSideMargin=0;//4dp
+                int tableTextSize=0;//14dp
+                if(metrics.densityDpi==DisplayMetrics.DENSITY_XHIGH)
+                {
+                    tableRowHeight=58;//initially 30
+                    tableTextSideMargin=14;//initially 6
+                    tableTextSize=16;//initially 21
+                }
+                else if(metrics.densityDpi==DisplayMetrics.DENSITY_HIGH)
+                {
+                    tableRowHeight=44;//initially 30
+                    tableTextSideMargin=14;//initially 6
+                    tableTextSize=16;//initially 21
+                }
+                else if(metrics.densityDpi==DisplayMetrics.DENSITY_MEDIUM)
+                {
+                    tableRowHeight=27;//initially 20
+                    tableTextSideMargin=10;//initially 4
+                    tableTextSize=15;//initially 14
+                }
+                else if(metrics.densityDpi==DisplayMetrics.DENSITY_LOW)
+                {
+                    tableRowHeight=16;//initially 15
+                    tableTextSideMargin=6;//initially 3
+                    tableTextSize=15;//initially 11
+                }
+                else
+                {
+                    tableRowHeight=58;//initially 30
+                    tableTextSideMargin=14;//initially 6
+                    tableTextSize=16;//initially 21
+                }
+                tableRow.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,tableRowHeight));
+
+                SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd");
+                Date milkingDate=dateFormat.parse(jsonObject.getString("date"));
+                Date today=new Date();
+                long dateDifference=(today.getTime()-milkingDate.getTime())/86400000;
+
+                Calendar calendar=new GregorianCalendar();
+                calendar.setTime(milkingDate);
+                String dateText=String.valueOf(calendar.get(Calendar.DAY_OF_MONTH))+"/"+String.valueOf(calendar.get(Calendar.MONTH)+1)+"/"+calendar.get(Calendar.YEAR);
+                if(dateDifference<1)
+                {
+                    dateText=todayText;
+                }
+                else if(dateDifference>=1&&dateDifference<2)
+                {
+                    dateText=yesterdayText;
+                }
+
+                final TextView date=generateTextView(dateText,3424+jsonObject.getInt("id")+332,tableRowHeight,tableTextSize);
+                tableRow.addView(date);
+
+                final View rowSeparator1=generateRowSeparator(3424+jsonObject.getInt("id")+3322,tableRowHeight);
+                tableRow.addView(rowSeparator1);
+
+                String[] milkingTimesInEN = Locale.getArrayInLocale("milking_times",this,Locale.LOCALE_ENGLISH);
+                String milkingTime = "";
+                for(int j = 0; j < milkingTimesInEN.length; j++) {
+                    if(jsonObject.getString("time").equals(milkingTimesInEN[j])) {
+                        if(milkingTimesInEN.length == times.length){
+                            milkingTime = times[j];
+                        }
+                        break;
+                    }
+                }
+                final  TextView time=generateTextView(milkingTime,3424+jsonObject.getInt("id")+554,tableRowHeight,tableTextSize);
+                tableRow.addView(time);
+
+                final View rowSeparator2=generateRowSeparator(3424+jsonObject.getInt("id")+3432,tableRowHeight);
+                tableRow.addView(rowSeparator2);
+
+                //check if name is null and use ear tag number
+                String nameText=jsonObject.getString("name");
+                if(nameText==null||nameText.equals(""))
+                {
+                    nameText=jsonObject.getString("ear_tag_number");
+                }
+                final TextView name=generateTextView(nameText,3424+jsonObject.getInt("id")+432,tableRowHeight,tableTextSize);
+                tableRow.addView(name);
+
+                final View rowSeparator3=generateRowSeparator(3424+jsonObject.getInt("id")+3532,tableRowHeight);
+                tableRow.addView(rowSeparator3);
+
+                String quantityType = jsonObject.getString("quantity_type");
+                String quantityString = String.format("%.2f", Float.parseFloat(jsonObject.getString("quantity")));
+                String[] quantityTypesInEN = Locale.getArrayInLocale("quantity_types",this, Locale.LOCALE_ENGLISH);
+                String[] quantityTypes = Locale.getArrayInLocale("quantity_types", this);
+                if(quantityTypes != null && quantityTypesInEN.length == quantityTypes.length) {
+                    for(int j = 0; j < quantityTypesInEN.length; j++) {
+                        if(quantityType.equals(quantityTypesInEN[j])) {
+                            quantityString = quantityString +" "+quantityTypes[j];
+                            break;
+                        }
+                    }
+                }
+                final TextView quantity=generateTextView(quantityString,3424+jsonObject.getInt("id")+564,tableRowHeight,tableTextSize);
+                tableRow.addView(quantity);
+
+                productionHistoryTL.addView(tableRow, new TableLayout.LayoutParams(TableLayout.LayoutParams.MATCH_PARENT,tableRowHeight));
+
+            }
+            catch (JSONException e)
+            {
+                e.printStackTrace();
+            }
+            catch (ParseException e)
+            {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    private void addTotalTableRows(JSONArray history){
+        //get totals for each cow
+
+        // array["cowName-ear_tag_number"]{"name","ear_tag_number","startDateMilliseconds","endDateMilliseconds","total"}
+        HashMap<String, String[]> cowMilkTotalArray = new HashMap<String, String[]>();
+
+        for(int i = 0; i < history.length(); i++){
+            try {
+                JSONObject jsonObject=history.getJSONObject(i);
+                String cowKey = jsonObject.getString("name")+"-"+jsonObject.getString("ear_tag_number");
+
+                //2. Initialize the cow data
+                //TODO: do conversions for other quantity types if they come up
+                    /*
+                    Since 1KG = 1L of milk you don't need to do any quantity conversions as of now
+                     */
+                String convertedQuantity = jsonObject.getString("quantity");
+
+                SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd");
+                Date milkingDate=dateFormat.parse(jsonObject.getString("date"));
+                long milkingDateMilliseconds = milkingDate.getTime();
+
+                //1. check if the cow is in the cowMilkTotalArray
+                String[] currCowData = null;
+                if(cowMilkTotalArray.containsKey(cowKey)){
+                    currCowData = cowMilkTotalArray.get(cowKey);
+                }
+
+                if(currCowData == null){//no milk data from cow gotten until now in the loop
+                    /*
+                    Cow Data structure looks like:
+                        {"name","ear_tag_number","startDateMilliseconds","endDateMilliseconds","total", "quantity_type"}
+                     */
+
+                    Log.d(TAG, "Adding first time data for "+cowKey);
+                    String[] quantityTypesInEN = Locale.getArrayInLocale("quantity_types", this, Locale.LOCALE_ENGLISH);
+                    String[] quantityTypes = Locale.getArrayInLocale("quantity_types", this);
+                    //get translation of Litres in current locale
+                    String litresInLocale = null;
+                    for(int j = 0; j < quantityTypesInEN.length; j++){
+                        if(quantityTypesInEN[j].equals("Litres")){
+                            litresInLocale = quantityTypes[j];
+                        }
+                    }
+
+                    currCowData = new String[]{
+                            jsonObject.getString("name"),
+                            jsonObject.getString("ear_tag_number"),
+                            String.valueOf(milkingDateMilliseconds),
+                            String.valueOf(milkingDateMilliseconds),
+                            convertedQuantity,
+                            litresInLocale
+                    };
+                }
+                else{//Milk production from this cow already iterated through before i
+                    //3. Increment quantity and dates
+                    Log.d(TAG, "Updating data for "+cowKey);
+                    currCowData[4] = String.valueOf(Float.parseFloat(currCowData[4]) + Float.parseFloat(convertedQuantity));
+
+                    //4. Check if current milk reading is in the date extremes (first date or last date)
+                    Log.d(TAG, "start time string = "+currCowData[2]);
+                    Log.d(TAG, "end time string = "+currCowData[3]);
+                    long startDateMilliseconds = Long.parseLong(currCowData[2]);
+                    long endDateMilliseconds = Long.parseLong(currCowData[3]);
+
+                    Log.d(TAG, "Current milking Date Milliseconds = "+String.valueOf(milkingDateMilliseconds));
+                    Log.d(TAG, "Start Date Milliseconds = "+String.valueOf(startDateMilliseconds));
+                    Log.d(TAG, "End Date Milliseconds = "+String.valueOf(endDateMilliseconds));
+
+                    if(milkingDateMilliseconds < startDateMilliseconds){
+                        startDateMilliseconds = milkingDateMilliseconds;
+                    }
+                    else if(milkingDateMilliseconds > endDateMilliseconds){
+                        endDateMilliseconds = milkingDateMilliseconds;
+                    }
+
+                    currCowData[2] = String.valueOf(startDateMilliseconds);
+                    currCowData[3] = String.valueOf(endDateMilliseconds);
+                }
+
+                cowMilkTotalArray.put(cowKey, currCowData);
+            }
+            catch (Exception e){
+                e.printStackTrace();
+            }
+        }
+
+        //render cow milk totals data to the user
+        int index = 0;
+        for(Map.Entry currCow : cowMilkTotalArray.entrySet()){
+
+            String[] currCowData = (String[]) currCow.getValue();
+
+            final TableRow tableRow=new TableRow(this);
+            tableRow.setId(1522+index);
+            int tableRowHeight=0;
+            int tableTextSideMargin=0;//4dp
+            int tableTextSize=0;//14dp
+            if(metrics.densityDpi==DisplayMetrics.DENSITY_XHIGH)
+            {
+                tableRowHeight=58;//initially 30
+                tableTextSideMargin=14;//initially 6
+                tableTextSize=16;//initially 21
+            }
+            else if(metrics.densityDpi==DisplayMetrics.DENSITY_HIGH)
+            {
+                tableRowHeight=44;//initially 30
+                tableTextSideMargin=14;//initially 6
+                tableTextSize=16;//initially 21
+            }
+            else if(metrics.densityDpi==DisplayMetrics.DENSITY_MEDIUM)
+            {
+                tableRowHeight=27;//initially 20
+                tableTextSideMargin=10;//initially 4
+                tableTextSize=15;//initially 14
+            }
+            else if(metrics.densityDpi==DisplayMetrics.DENSITY_LOW)
+            {
+                tableRowHeight=16;//initially 15
+                tableTextSideMargin=6;//initially 3
+                tableTextSize=15;//initially 11
+            }
+            else
+            {
+                tableRowHeight=58;//initially 30
+                tableTextSideMargin=14;//initially 6
+                tableTextSize=16;//initially 21
+            }
+            tableRow.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,tableRowHeight));
+
+            Calendar startDate=new GregorianCalendar();
+            startDate.setTime(new Date(Long.valueOf(currCowData[2])));
+            Calendar endDate = new GregorianCalendar();
+            endDate.setTime(new Date(Long.valueOf(currCowData[3])));
+
+            String startDateText=String.valueOf(startDate.get(Calendar.DAY_OF_MONTH))+"/"+String.valueOf(startDate.get(Calendar.MONTH)+1)+"/"+startDate.get(Calendar.YEAR);
+            String endDateText=String.valueOf(endDate.get(Calendar.DAY_OF_MONTH))+"/"+String.valueOf(endDate.get(Calendar.MONTH) + 1)+"/"+endDate.get(Calendar.YEAR);
+
+            final TextView date=generateTextView(startDateText + " - " + endDateText, 3343 + index,tableRowHeight,tableTextSize);
+            tableRow.addView(date);
+
+            final View rowSeparator1=generateRowSeparator(index + 3322, tableRowHeight);
+            tableRow.addView(rowSeparator1);
+
+            String cowName = currCowData[0];
+            if(cowName == null || cowName.length() == 0){//if cow doesnt have a name, use its ear tag number
+                cowName = currCowData[1];
+            }
+            final TextView cow = generateTextView(cowName, 7343 + index,tableRowHeight,tableTextSize);
+            tableRow.addView(cow);
+
+            final View rowSeparator2=generateRowSeparator(index + 2322, tableRowHeight);
+            tableRow.addView(rowSeparator2);
+
+            String formattedQuantity = String.format("%.2f" ,Float.parseFloat(currCowData[4]));
+
+            final TextView quantity = generateTextView(formattedQuantity+" "+currCowData[5] ,922+index, tableRowHeight, tableTextSize);
+            tableRow.addView(quantity);
+
+            productionTotalTL.addView(tableRow, new TableLayout.LayoutParams(TableLayout.LayoutParams.MATCH_PARENT,tableRowHeight));
+
+            index++;
+        }
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/MilkProductionActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/MilkProductionActivity.java
new file mode 100644
index 0000000..37ad64f
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/MilkProductionActivity.java
@@ -0,0 +1,532 @@
+package org.cgiar.ilri.np.farmer;
+
+import android.app.DatePickerDialog;
+import android.app.Dialog;
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.Intent;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.telephony.TelephonyManager;
+import android.util.Log;
+import android.view.View;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.DatePicker;
+import android.widget.EditText;
+import android.widget.Spinner;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.actionbarsherlock.app.SherlockActivity;
+import com.actionbarsherlock.view.Menu;
+import com.actionbarsherlock.view.MenuInflater;
+import com.actionbarsherlock.view.MenuItem;
+
+import org.cgiar.ilri.np.farmer.backend.DataHandler;
+import org.cgiar.ilri.np.farmer.backend.Locale;
+import org.cgiar.ilri.np.farmer.carrier.Cow;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+
+public class MilkProductionActivity extends SherlockActivity implements NPActivity, View.OnClickListener, DatePickerDialog.OnDateSetListener
+{
+    private final String dateFormat="dd/MM/yyyy";
+
+    private static final String TAG="MilkProductionActivity";
+    private Menu menu;
+    private Button addProductionB;
+    private Button productionHistoryB;
+    private Button backB;
+    private Dialog addMilkProductionDialog;
+    private TextView cowTV;
+    private Spinner cowS;
+    private TextView timeTV;
+    private Spinner timeS;
+    private TextView quantityTV;
+    private EditText quantityET;
+    private Button addMilkProductionAddB;
+    private String[] cowNameArray;
+    private String[] cowEarTagNumberArray;
+    private String quantityETEmptyWarning;
+    private String infoSuccessfullySent;
+    private String problemInData;
+    private String loadingPleaseWait;
+    private TextView quantityTypeTV;
+    private Spinner quantityTypeS;
+    private String[] quantityTypes;
+    private TextView dateTV;
+    private EditText dateET;
+    private DatePickerDialog datePickerDialog;
+    private TextView noMilkingTV;
+    private EditText noMilkingET;
+    private TextView calfSucklingTV;
+    private String[] calfSucklingTypes;
+    private Spinner calfSucklingS;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState)
+    {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_milk_production);
+        //DataHandler.requestPermissionToUseSMS(this);
+
+        addProductionB=(Button)this.findViewById(R.id.add_production_b);
+        addProductionB.setOnClickListener(this);
+        productionHistoryB =(Button)this.findViewById(R.id.production_history_b);
+        productionHistoryB.setOnClickListener(this);
+        backB = (Button)this.findViewById(R.id.back_b);
+        backB.setOnClickListener(this);
+        addMilkProductionDialog=new Dialog(this);
+        addMilkProductionDialog.setContentView(R.layout.dialog_add_milk_production);
+        cowTV=(TextView)addMilkProductionDialog.findViewById(R.id.cow_tv);
+        cowS=(Spinner)addMilkProductionDialog.findViewById(R.id.cow_s);
+        dateTV=(TextView)addMilkProductionDialog.findViewById(R.id.date_tv);
+        dateET=(EditText)addMilkProductionDialog.findViewById(R.id.date_et);
+        dateET.setOnClickListener(this);
+        timeTV=(TextView)addMilkProductionDialog.findViewById(R.id.time_tv);
+        timeS=(Spinner)addMilkProductionDialog.findViewById(R.id.time_s);
+        quantityTV=(TextView)addMilkProductionDialog.findViewById(R.id.quantity_tv);
+        quantityET=(EditText)addMilkProductionDialog.findViewById(R.id.quantity_et);
+        quantityTypeTV=(TextView)addMilkProductionDialog.findViewById(R.id.quantity_type_tv);
+        quantityTypeS=(Spinner)addMilkProductionDialog.findViewById(R.id.quantity_type_s);
+        addMilkProductionAddB=(Button)addMilkProductionDialog.findViewById(R.id.dialog_add_milk_add_b);
+        noMilkingTV = (TextView)addMilkProductionDialog.findViewById(R.id.no_milking_tv);
+        noMilkingET = (EditText)addMilkProductionDialog.findViewById(R.id.no_milking_et);
+        calfSucklingTV = (TextView)addMilkProductionDialog.findViewById(R.id.calf_suckling_tv);
+        calfSucklingS = (Spinner)addMilkProductionDialog.findViewById(R.id.calf_suckling_s);
+        addMilkProductionAddB.setOnClickListener(this);
+
+        initTextInViews();
+        //fetchCowIdentifiers();
+    }
+
+    public boolean onCreateOptionsMenu(Menu menu) {
+        MenuInflater inflater = getSupportMenuInflater();
+        inflater.inflate(R.menu.milk_production, menu);
+        this.menu = menu;
+        initMenuText();
+        return true;
+    }
+
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle item selection
+        if(Language.processLanguageMenuItemSelected(this, this, item)){
+            return true;
+        }
+        else if(item.getItemId() == R.id.action_back_main_menu) {
+            Intent intent = new Intent(this, MainMenu.class);
+            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_FARMER);
+            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+            startActivity(intent);
+        }
+        return false;
+    }
+
+    @Override
+    public void initTextInViews()
+    {
+        this.setTitle(Locale.getStringInLocale("milk_production",this));
+        addProductionB.setText(Locale.getStringInLocale("add_production",this));
+        productionHistoryB.setText(Locale.getStringInLocale("production_history",this));
+        addMilkProductionDialog.setTitle(Locale.getStringInLocale("add_production",this));
+        cowTV.setText(Locale.getStringInLocale("cow",this));
+        dateTV.setText(Locale.getStringInLocale("date",this));
+        timeTV.setText(Locale.getStringInLocale("time",this));
+        quantityTV.setText(Locale.getStringInLocale("quantity",this));
+        addMilkProductionAddB.setText(Locale.getStringInLocale("add",this));
+        int milkingTimesArrayID = Locale.getArrayIDInLocale("milking_times",this);
+        if(milkingTimesArrayID != 0) {
+            ArrayAdapter<CharSequence> milkingTimesArrayAdapter=ArrayAdapter.createFromResource(this, milkingTimesArrayID, android.R.layout.simple_spinner_item);
+            milkingTimesArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+            timeS.setAdapter(milkingTimesArrayAdapter);
+        }
+        quantityETEmptyWarning=Locale.getStringInLocale("enter_quantity_of_milk_produced",this);
+        infoSuccessfullySent=Locale.getStringInLocale("information_successfully_sent_to_server",this);
+        problemInData=Locale.getStringInLocale("production_for_time_already_exists",this);
+        loadingPleaseWait = Locale.getStringInLocale("loading_please_wait",this);
+        quantityTypeTV.setText(Locale.getStringInLocale("measurement_type",this));
+
+        quantityTypes = Locale.getArrayInLocale("quantity_types",this);
+        int defaultQuantityTypeIndex = 0;
+        if(quantityTypes == null ) {
+            quantityTypes = new String[1];
+            quantityTypes[0] = "";
+        }
+        else {
+            defaultQuantityTypeIndex = Integer.parseInt(DataHandler.getSharedPreference(this, DataHandler.SP_KEY_MILK_QUANTITY_TYPE,"0"));
+        }
+        ArrayAdapter<String> quantityTypesArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,quantityTypes);
+        quantityTypesArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        quantityTypeS.setAdapter(quantityTypesArrayAdapter);
+        if(defaultQuantityTypeIndex < quantityTypes.length)
+            quantityTypeS.setSelection(defaultQuantityTypeIndex);
+
+
+        noMilkingTV.setText(Locale.getStringInLocale("no_times_milked_in_a_day",this));
+        calfSucklingTV.setText(Locale.getStringInLocale("calf_suckling",this));
+
+        calfSucklingTypes = Locale.getArrayInLocale("calf_suckling_types",this);
+        ArrayAdapter<String> calfSucklingTypesArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,calfSucklingTypes);
+        calfSucklingTypesArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        calfSucklingS.setAdapter(calfSucklingTypesArrayAdapter);
+        backB.setText(Locale.getStringInLocale("back", this));
+
+        initMenuText();
+    }
+
+    private void initMenuText(){
+        if(this.menu != null){
+            MenuItem mainMenuMI = menu.findItem(R.id.action_back_main_menu);
+            mainMenuMI.setTitle(Locale.getStringInLocale("back_to_main_menu", this));
+        }
+    }
+
+    @Override
+    public void onClick(View view)
+    {
+        if(view==addProductionB)
+        {
+            //addMilkProductionDialog.show();
+            Intent intent = new Intent(MilkProductionActivity.this, AddMilkProductionActivity.class);
+            startActivity(intent);
+        }
+        else if(view==addMilkProductionAddB)
+        {
+            sendMilkProductionData();
+        }
+        else if(view==productionHistoryB)
+        {
+            Intent intent=new Intent(MilkProductionActivity.this,MilkProcutionHistoryActivity.class);
+            startActivity(intent);
+        }
+        else if(view==dateET) {
+            dateETClicked();
+        }
+        else if(view==backB){
+            SendCachedDataThread sendCachedDataThread = new SendCachedDataThread();
+            sendCachedDataThread.execute(1);
+
+            Intent intent = new Intent(this, MainMenu.class);
+            intent.putExtra(MainMenu.KEY_MODE, MainMenu.MODE_FARMER);
+            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+            startActivity(intent);
+        }
+    }
+
+    private void dateETClicked()
+    {
+        Date date=new Date();
+        Calendar calendar=new GregorianCalendar();
+        calendar.setTime(date);
+        datePickerDialog=new DatePickerDialog(this,this,calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH));
+        //datePickerDialog=createDialogWithoutDateField(this,calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH));
+        datePickerDialog.show();
+    }
+
+    @Override
+    public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth)
+    {
+        String dateString=String.valueOf(dayOfMonth)+"/"+String.valueOf(monthOfYear+1)+"/"+String.valueOf(year);
+        dateET.setText(dateString);
+        if(!validateDate()){
+            dateET.setText("");
+        }
+    }
+
+    private void fetchCowIdentifiers()
+    {
+        CowIdentifierThread cowIdentifierThread=new CowIdentifierThread();
+        TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
+        cowIdentifierThread.execute(telephonyManager.getSimSerialNumber());
+    }
+
+    private void setCowIdentifiers(String[] cowArray)
+    {
+        if(cowS!=null)
+        {
+            ArrayAdapter<String> cowsArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_dropdown_item,cowArray);
+            cowsArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+            cowS.setAdapter(cowsArrayAdapter);
+        }
+    }
+    
+    private class CowIdentifierThread extends AsyncTask<String,Integer,String>
+    {
+        private ProgressDialog progressDialog;
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(MilkProductionActivity.this, "",loadingPleaseWait, true);
+        }
+
+        @Override
+        protected String doInBackground(String... params)
+        {
+            JSONObject jsonObject=new JSONObject();
+            try
+            {
+                jsonObject.put("simCardSN",params[0]);
+                jsonObject.put("cowSex", Cow.SEX_FEMALE);
+                String result=DataHandler.sendDataToServer(MilkProductionActivity.this, jsonObject.toString(),DataHandler.FARMER_FETCH_COW_IDENTIFIERS_URL, true);
+                return result;
+            }
+            catch (JSONException e)
+            {
+                e.printStackTrace();
+            }
+            return null;
+        }
+
+        @Override
+        protected void onPostExecute(String result)
+        {
+            super.onPostExecute(result);
+            progressDialog.dismiss();
+            if(result == null ){
+                Toast.makeText(MilkProductionActivity.this,"server error",Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
+                Toast.makeText(MilkProductionActivity.this, Locale.getStringInLocale("generic_sms_error", MilkProductionActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
+                Toast.makeText(MilkProductionActivity.this, Locale.getStringInLocale("no_service", MilkProductionActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
+                Toast.makeText(MilkProductionActivity.this, Locale.getStringInLocale("radio_off", MilkProductionActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
+                Toast.makeText(MilkProductionActivity.this, Locale.getStringInLocale("server_not_receive_sms", MilkProductionActivity.this), Toast.LENGTH_LONG).show();
+            }
+            else{
+                try
+                {
+                    JSONObject jsonObject=new JSONObject(result);
+                    JSONArray cowNamesArray=jsonObject.getJSONArray("cowNames");
+                    JSONArray earTagNumbersArray=jsonObject.getJSONArray("earTagNumbers");
+                    String[] cowArray=new String[cowNamesArray.length()];
+                    String[] earTagArray=new String[cowNamesArray.length()];
+                    for(int i=0;i<cowNamesArray.length();i++)
+                    {
+                        cowArray[i]=cowNamesArray.get(i).toString();
+                        earTagArray[i]=earTagNumbersArray.get(i).toString();
+                    }
+                    //TODO: warn user if no cows
+                    if(cowArray.length==0)
+                    {
+                        Toast.makeText(MilkProductionActivity.this,"no cows fetched",Toast.LENGTH_LONG).show();
+                    }
+                    MilkProductionActivity.this.cowNameArray =cowArray;
+                    MilkProductionActivity.this.cowEarTagNumberArray=earTagArray;
+                    String[] identifierArray=new String[cowArray.length];
+                    for (int i=0;i<cowArray.length;i++)
+                    {
+                        if(cowArray[i]!=null&&!cowArray[i].equals(""))
+                        {
+                            identifierArray[i]=cowArray[i];
+                        }
+                        else
+                        {
+                            identifierArray[i]=earTagArray[i];
+                        }
+                    }
+                    setCowIdentifiers(identifierArray);
+                }
+                catch (JSONException e)
+                {
+                    e.printStackTrace();
+                }
+            }
+
+        }
+    }
+
+    private void sendMilkProductionData()
+    {
+        if(validateInput())
+        {
+            TelephonyManager telephonyManager=(TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
+            MilkProductionDataAdditionThread milkProductionDataAdditionThread=new MilkProductionDataAdditionThread();
+            String[] quantityTypesInEN = Locale.getArrayInLocale("quantity_types",this,Locale.LOCALE_ENGLISH);
+            String[] milkingTimesInEN = Locale.getArrayInLocale("milking_times", this, Locale.LOCALE_ENGLISH);
+            String quantityType = "";
+            if(quantityTypesInEN.length == quantityTypes.length) {
+                DataHandler.setSharedPreference(MilkProductionActivity.this, DataHandler.SP_KEY_MILK_QUANTITY_TYPE, String.valueOf(quantityTypeS.getSelectedItemPosition()));
+                quantityType = quantityTypesInEN[quantityTypeS.getSelectedItemPosition()];
+            }
+            String milkingTime = "";
+            if(milkingTimesInEN.length > 0){
+                milkingTime = milkingTimesInEN[timeS.getSelectedItemPosition()];
+            }
+
+            String[] calfSucklingTypesInEN = Locale.getArrayInLocale("calf_suckling_types",this,Locale.LOCALE_ENGLISH);
+            String calfSucklingType = calfSucklingTypesInEN[calfSucklingS.getSelectedItemPosition()];
+            milkProductionDataAdditionThread.execute(telephonyManager.getSimSerialNumber(),cowNameArray[cowS.getSelectedItemPosition()],cowEarTagNumberArray[cowS.getSelectedItemPosition()],milkingTime,quantityET.getText().toString(),quantityType,dateET.getText().toString(),noMilkingET.getText().toString(),calfSucklingType);
+        }
+    }
+
+    private boolean validateInput()
+    {
+        String[] quantityTypesInEN = Locale.getArrayInLocale("quantity_types",this,Locale.LOCALE_ENGLISH);
+        String quantityType = quantityTypesInEN[quantityTypeS.getSelectedItemPosition()];
+        if(quantityET.getText().toString()==null)
+        {
+            Toast.makeText(this,quantityETEmptyWarning,Toast.LENGTH_LONG).show();
+            return false;
+        }
+        else if(quantityET.getText().toString().length()<=0)
+        {
+            Toast.makeText(this,quantityETEmptyWarning,Toast.LENGTH_LONG).show();
+            return false;
+        }
+        else if(dateET.getText().toString()==null||dateET.getText().toString().length()==0)
+        {
+            Toast.makeText(this,Locale.getStringInLocale("enter_date",this),Toast.LENGTH_LONG).show();
+            return false;
+        }
+        else if(!validateDate()) {
+            return false;
+        }
+        else if(quantityType.equals("Litres") || quantityType.equals("KGs")) {
+            if(Integer.parseInt(quantityET.getText().toString()) > 30) {
+                Toast.makeText(this, Locale.getStringInLocale("milk_too_much",this),Toast.LENGTH_LONG).show();
+                return false;
+            }
+        }
+        else if(quantityType.equals("Cups")) {
+            if(Integer.parseInt(quantityET.getText().toString()) > (30*3.3)) {
+                Toast.makeText(this, Locale.getStringInLocale("milk_too_much",this),Toast.LENGTH_LONG).show();
+                return false;
+            }
+        }
+        if(noMilkingET.getText().toString()==null || noMilkingET.getText().toString().trim().length()==0){
+            Toast.makeText(this, Locale.getStringInLocale("enter_number_times_cow_milked",this),Toast.LENGTH_LONG).show();
+            return false;
+        }
+        else if(Integer.parseInt(noMilkingET.getText().toString())>10){
+            Toast.makeText(this, Locale.getStringInLocale("milking_times_too_much",this), Toast.LENGTH_LONG).show();
+            return false;
+        }
+        return true;
+    }
+
+    private boolean validateDate() {
+        try
+        {
+            Date dateEntered=new SimpleDateFormat(dateFormat, java.util.Locale.ENGLISH).parse(dateET.getText().toString());
+            Date today=new Date();
+            long milisecondDifference = today.getTime() - dateEntered.getTime();
+            long days = milisecondDifference / 86400000;
+            if((today.getTime()-dateEntered.getTime())<0)
+            {
+                Toast.makeText(this,Locale.getStringInLocale("date_in_future",this),Toast.LENGTH_LONG).show();
+                return false;
+            }
+            else if(days > 30) {//more than one month
+                Toast.makeText(this,Locale.getStringInLocale("milk_data_too_old",this),Toast.LENGTH_LONG).show();
+                return false;
+            }
+            else {
+                return true;
+            }
+        }
+        catch (ParseException e)
+        {
+            e.printStackTrace();
+            return false;
+        }
+    }
+
+    private class MilkProductionDataAdditionThread extends AsyncTask<String,Integer,String>
+    {
+        private ProgressDialog progressDialog;
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(MilkProductionActivity.this, "",loadingPleaseWait, true);
+        }
+
+        @Override
+        protected String doInBackground(String... params)
+        {
+            Log.d(TAG,"at milkProductionDataAdditionThread");
+            JSONObject jsonObject=new JSONObject();
+            try
+            {
+                jsonObject.put("simCardSN",params[0]);
+                jsonObject.put("cowName",params[1]);
+                jsonObject.put("cowEarTagNumber",params[2]);
+                jsonObject.put("time",params[3]);
+                jsonObject.put("quantity",params[4]);
+                jsonObject.put("quantityType",params[5]);
+                jsonObject.put("date", params[6]);
+                jsonObject.put("noMilkingTimes",params[7]);
+                jsonObject.put("calfSuckling",params[8]);
+                String result=DataHandler.sendDataToServer(MilkProductionActivity.this, jsonObject.toString(),DataHandler.FARMER_ADD_MILK_PRODUCTION_URL, true);
+                Log.d(TAG,"data sent to server, result = "+result);
+                return result;
+            }
+            catch (JSONException e)
+            {
+                e.printStackTrace();
+            }
+            return null;
+        }
+
+        @Override
+        protected void onPostExecute(String result)
+        {
+            super.onPostExecute(result);
+            progressDialog.dismiss();
+            if(result==null)
+            {
+                Toast.makeText(MilkProductionActivity.this,"server error",Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.ACKNOWLEDGE_OK))
+            {
+                addMilkProductionDialog.dismiss();
+                Toast.makeText(MilkProductionActivity.this,infoSuccessfullySent,Toast.LENGTH_LONG).show();
+            }
+            else if(result.equals(DataHandler.DATA_ERROR))
+            {
+                Toast.makeText(MilkProductionActivity.this,problemInData,Toast.LENGTH_LONG).show();
+            }
+        }
+    }
+
+    private class SendCachedDataThread extends AsyncTask<Integer, Integer, Boolean>{
+
+        @Override
+        protected Boolean doInBackground(Integer... params) {
+            String result = DataHandler.sendCachedRequests(MilkProductionActivity.this, true);//send cached data and receive updated farmer data
+            if(result != null && !result.equals(DataHandler.CODE_USER_NOT_AUTHENTICATED)){//no data fetched for this farmer
+                try {//try converting the response into a jsonobject. It might not work if the DataHandler returns a response code
+                    Log.d(TAG, "response is " + result);
+                    DataHandler.saveFarmerData(MilkProductionActivity.this, new JSONObject(result));
+                    return true;
+                } catch (JSONException e) {
+                    e.printStackTrace();
+                }
+            }
+            return false;
+        }
+
+        @Override
+        protected void onPostExecute(Boolean result) {
+            super.onPostExecute(result);
+
+            if(result == true){
+                Toast.makeText(MilkProductionActivity.this, Locale.getStringInLocale("information_successfully_sent_to_server", MilkProductionActivity.this), Toast.LENGTH_LONG).show();
+            }
+        }
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/NPActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/NPActivity.java
new file mode 100644
index 0000000..22a17d1
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/NPActivity.java
@@ -0,0 +1,49 @@
+package org.cgiar.ilri.np.farmer;
+
+import android.content.Context;
+
+import com.actionbarsherlock.view.MenuItem;
+
+import org.cgiar.ilri.np.farmer.backend.Locale;
+
+/**
+ * Created by jrogena on 14/05/14.
+ */
+public interface NPActivity {
+    public void initTextInViews();
+    public class Language{
+        public static boolean processLanguageMenuItemSelected(NPActivity nPActivity, Context context, MenuItem item){
+            if(item.getItemId() == R.id.action_english) {
+                Locale.switchLocale(Locale.LOCALE_ENGLISH, context);
+                nPActivity.initTextInViews();
+                return true;
+            }
+            else if(item.getItemId() == R.id.action_swahili) {
+                Locale.switchLocale(Locale.LOCALE_SWAHILI, context);
+                nPActivity.initTextInViews();
+                return true;
+            }
+            else if(item.getItemId() == R.id.action_lutsotso) {
+                Locale.switchLocale(Locale.LOCALE_LUTSOTSO, context);
+                nPActivity.initTextInViews();
+                return true;
+            }
+            else if(item.getItemId() == R.id.action_nandi) {
+                Locale.switchLocale(Locale.LOCALE_NANDI, context);
+                nPActivity.initTextInViews();
+                return true;
+            }
+            else if(item.getItemId() == R.id.action_kikabras) {
+                Locale.switchLocale(Locale.LOCALE_KIKABRAS, context);
+                nPActivity.initTextInViews();
+                return true;
+            }
+            else if(item.getItemId() == R.id.action_kipsigis) {
+                Locale.switchLocale(Locale.LOCALE_KIPSIGIS, context);
+                nPActivity.initTextInViews();
+                return true;
+            }
+            return false;
+        }
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/Utils.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/Utils.java
new file mode 100644
index 0000000..6d92ea4
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/Utils.java
@@ -0,0 +1,118 @@
+package org.cgiar.ilri.np.farmer;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+
+import org.cgiar.ilri.np.farmer.backend.Locale;
+
+/**
+ * Created by jason on 8/6/13.
+ */
+public class Utils
+{
+    public static void showSuccessfullRegistration(final Context context, String localeCode)
+    {
+        String title= Locale.getStringInLocale("string.successful_registration",context);
+        String instructions = Locale.getStringInLocale("successful_registration_instructions",context);
+        String okayText = Locale.getStringInLocale("okay",context);
+        AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(context);
+
+        alertDialogBuilder.setTitle(title);
+        alertDialogBuilder
+                .setMessage(instructions)
+                .setCancelable(false)
+                .setPositiveButton(okayText, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        dialog.dismiss();
+                        Intent intent = new Intent(context, LandingActivity.class);
+                        context.startActivity(intent);
+                    }
+                });
+        AlertDialog alertDialog=alertDialogBuilder.create();
+        alertDialog.show();
+    }
+
+    public static void showGenericAlertDialog(final Context context, String title,String text, String positiveButtonText, String negativeButtonText, final Class<?> nextActivity, final Class<?> nextActivityNeg)
+    {
+        AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(context);
+        alertDialogBuilder.setTitle(title);
+        alertDialogBuilder
+                .setMessage(text)
+                .setCancelable(true)
+                .setPositiveButton(positiveButtonText, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which)
+                    {
+                        if(nextActivity!=null)
+                        {
+                            dialog.dismiss();
+                            Intent intent = new Intent(context,nextActivity);
+                            context.startActivity(intent);
+                        }
+                        else
+                        {
+                            dialog.dismiss();
+                        }
+                    }
+                });
+        if(negativeButtonText!=null)
+        {
+            alertDialogBuilder.setNegativeButton(negativeButtonText, new DialogInterface.OnClickListener()
+            {
+
+                @Override
+                public void onClick(DialogInterface dialog, int which)
+                {
+                    if(nextActivityNeg!=null)
+                    {
+                        dialog.dismiss();
+                        Intent intent = new Intent(context,nextActivityNeg);
+                        context.startActivity(intent);
+                    }
+                    else
+                    {
+                        dialog.dismiss();
+                    }
+                }
+            });
+        }
+        AlertDialog alertDialog=alertDialogBuilder.create();
+        alertDialog.show();
+    }
+
+    public static AlertDialog createSMSDialog(Context context, DialogInterface.OnClickListener onClickListener){
+        AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(context);
+        alertDialogBuilder.setTitle(Locale.getStringInLocale("sms_charges", context));
+        alertDialogBuilder
+                .setMessage(Locale.getStringInLocale("incur_network_sms_charges", context))
+                .setCancelable(false)
+                .setPositiveButton(Locale.getStringInLocale("okay",context), onClickListener)
+                .setNegativeButton(Locale.getStringInLocale("cancel",context), onClickListener);
+        return alertDialogBuilder.create();
+    }
+
+    public static AlertDialog createMainMenuDialog(Context context, DialogInterface.OnClickListener onClickListener){
+        AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(context);
+        alertDialogBuilder.setTitle(Locale.getStringInLocale("warning", context));
+        alertDialogBuilder
+                .setMessage(Locale.getStringInLocale("action_will_be_canceled", context))
+                .setCancelable(false)
+                .setPositiveButton(Locale.getStringInLocale("okay",context), onClickListener)
+                .setNegativeButton(Locale.getStringInLocale("cancel",context), onClickListener);
+        return alertDialogBuilder.create();
+    }
+
+    public static AlertDialog createMilkFluctuationDialog(Context context, DialogInterface.OnClickListener onClickListener){
+        AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(context);
+        alertDialogBuilder.setTitle(Locale.getStringInLocale("warning", context));
+        alertDialogBuilder
+                .setMessage(Locale.getStringInLocale("milk_inconsistent", context))
+                .setCancelable(false)
+                .setPositiveButton(Locale.getStringInLocale("okay",context), onClickListener)
+                .setNegativeButton(Locale.getStringInLocale("cancel",context), onClickListener);
+        return alertDialogBuilder.create();
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/backend/DataHandler.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/backend/DataHandler.java
new file mode 100644
index 0000000..de91390
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/backend/DataHandler.java
@@ -0,0 +1,1086 @@
+package org.cgiar.ilri.np.farmer.backend;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.PendingIntent;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.SharedPreferences;
+import android.database.sqlite.SQLiteDatabase;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
+import android.os.Bundle;
+import android.telephony.SmsManager;
+import android.telephony.SmsMessage;
+import android.telephony.TelephonyManager;
+import android.util.Log;
+
+import org.cgiar.ilri.np.farmer.R;
+
+import org.apache.http.HttpEntity;
+import org.apache.http.HttpResponse;
+import org.apache.http.NameValuePair;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.entity.UrlEncodedFormEntity;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.impl.client.DefaultHttpClient;
+import org.apache.http.message.BasicNameValuePair;
+import org.apache.http.params.BasicHttpParams;
+import org.apache.http.params.HttpConnectionParams;
+import org.apache.http.params.HttpParams;
+import org.cgiar.ilri.np.farmer.Utils;
+import org.cgiar.ilri.np.farmer.backend.database.DatabaseHelper;
+import org.cgiar.ilri.np.farmer.carrier.Cow;
+import org.cgiar.ilri.np.farmer.carrier.Dam;
+import org.cgiar.ilri.np.farmer.carrier.Event;
+import org.cgiar.ilri.np.farmer.carrier.EventConstraint;
+import org.cgiar.ilri.np.farmer.carrier.Farmer;
+import org.cgiar.ilri.np.farmer.carrier.MilkProduction;
+import org.cgiar.ilri.np.farmer.carrier.Sire;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.BufferedReader;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.net.URL;
+import java.net.URLConnection;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+/**
+ * Created by jason on 8/6/13.
+ */
+public class DataHandler
+{
+    public static final String ACKNOWLEDGE_OK="533783";
+    public static final String NO_DATA="77732";
+    public static final String DATA_ERROR="934342";
+    public static final String CODE_USER_NOT_AUTHENTICATED="43322";
+    public static final String CODE_SIM_CARD_REGISTERED="83242";
+    public static final String CODE_NUMBER_IN_USE="032443";
+    public static final String NO_CONNECTION = "43387";
+
+    private static final String TAG="DataHandler";
+    private static final long SMS_RESPONSE_TIMEOUT = 300000;
+    private static final int HTTP_POST_TIMEOUT =20000;
+    private static final int HTTP_RESPONSE_TIMEOUT =20000;
+    public static final String SMS_SERVER_ADDRESS = "+254708090206";
+    private static final String BASE_URL="http://azizi.ilri.cgiar.org/ngombe_planner";
+    //private static final String BASE_URL="http://192.168.14.102/~jason/ngombe_planner/WebServer";
+    //private static final String BASE_URL="http://172.26.23.48/~jason/ngombe_planner/WebServer";
+    public static final String FARMER_REGISTRATION_URL="/php/farmer/registration.php";
+    public static final String FARMER_FETCH_VETS_URL="/php/farmer/fetch_vets.php";
+    public static final String FARMER_AUTHENTICATION_URL="/php/farmer/authentication.php";
+    public static final String FARMER_SIM_CARD_REGISTRATION_URL="/php/farmer/sim_card_registration.php";
+    public static final String FARMER_FETCH_COW_IDENTIFIERS_URL="/php/farmer/fetch_cow_identifiers.php";
+    public static final String FARMER_ADD_MILK_PRODUCTION_URL="/php/farmer/add_milk_production.php";
+    public static final String FARMER_FETCH_MILK_PRODUCTION_HISTORY_URL="/php/farmer/fetch_milk_production_history.php";
+    public static final String FARMER_ADD_COW_EVENT_URL="/php/farmer/add_cow_event.php";
+    public static final String FARMER_FETCH_COW_EVENTS_HISTORY_URL="/php/farmer/fetch_cow_events_history.php";
+    public static final String FARMER_FETCH_COW_SERVICING_EVENTS_URL="/php/farmer/fetch_servicing_events.php";
+    public static final String FARMER_REGISTER_FARM_COORDS_URL="/php/farmer/register_farm_coords.php";
+    public static final String FARMER_ADD_CACHED_DATA_URL="/php/farmer/add_cached_data.php";
+
+    public static final String ADMIN_AUTHENTICATION_URL="/php/admin/authentication.php";
+    public static final String ADMIN_EDIT_FARMER_URL="/php/admin/edit_farmer.php";
+    public static final String ADMIN_GET_COWS_URL="/php/admin/fetch_cows.php";
+    public static final String ADMIN_EDIT_COW_URL="/php/admin/edit_cow.php";
+
+    public static final String SP_KEY_LOCALE = "locale";
+    public static final String SP_KEY_MILK_QUANTITY_TYPE = "milkQuantityTYpe";
+    public static final String SP_KEY_USE_SMS_TO_SEND_DATA = "useSMSToSendData";
+    public static final String SP_KEY_SMS_RESPONSE = "smsResponse";
+    public static final String SP_KEY_SMS_CACHE = "smsCache";
+
+    public static final String SP_KEY_AEA_DATE = "addEventActivityDate";
+    public static final String SP_KEY_AEA_REMARKS = "addEventActivityRemarks";
+    public static final String SP_KEY_AEA_STRAW_NUMBER = "addEventActivityStrawNumber";
+    public static final String SP_KEY_AEA_VET_USED = "addEventActivityVetUsed";
+    public static final String SP_KEY_AEA_BULL_NAME = "addEventActivityBullName";
+    public static final String SP_KEY_AEA_BULL_OWNER = "addEventActivityBullOwner";
+    public static final String SP_KEY_AEA_NO_SERVICING_DAYS = "addEventActivityNoServicingDays";
+    public static final String SP_KEY_AMPA_DATE = "addMilkProductionActivityDate";
+    public static final String SP_KEY_AMPA_QUANTITY = "addMilkProductionActivityQuantity";
+    public static final String SP_KEY_CRA_NAME = "cowRegistrationActivityName";
+    public static final String SP_KEY_CRA_EAR_TAG_NUMBER = "cowRegistrationActivityEarTagNumber";
+    public static final String SP_KEY_CRA_AGE = "cowRegistrationActivityAge";
+    public static final String SP_KEY_CRA_DATE_OF_BIRTH = "cowRegistrationActivityDateOfBirth";
+    public static final String SP_KEY_CRA_BREED = "cowRegistrationActivityBreed";
+    public static final String SP_KEY_CRA_BREED_OTHER = "cowRegistrationActivityOtherBreed";
+    public static final String SP_KEY_CRA_DEFORMITY = "cowRegistrationActivityDeformity";
+    public static final String SP_KEY_CRA_STRAW_NUMBER = "cowRegistrationActivityStrawNumber";
+    public static final String SP_KEY_CRA_DAM = "cowRegistrationActivityDam";
+    public static final String SP_KEY_CRA_SIRE = "cowRegistrationActivitySire";
+    public static final String SP_KEY_CRA_EMBRYO_NUMBER = "cowRegistrationActivityEmbryoNumber";
+    public static final String SP_KEY_CRA_COUNTRY_OF_ORIGIN = "cowRegistrationActivityCountryOfOrigin";
+    public static final String SP_KEY_FRA_FULL_NAME = "farmerRegistrationActivityFullName";
+    public static final String SP_KEY_FRA_EXTENSION_PERSONNEL = "farmerRegistrationActivityExtensionPersonnel";
+    public static final String SP_KEY_FRA_MOBILE_NUMBER = "farmerRegistrationActivityMobileNumber";
+
+    public static final String CAN_SEND_USING_SMS = "canSend";
+    public static final String CANNOT_SEND_USING_SMS = "cannotSend";
+    public static final String SMS_DELIMITER = "#*#*";
+    public static final String ACTION_SMS_SENT = "SMS_SENT_MISTRO";
+    public static final String ACTION_SMS_DELIVERED = "SMS_DELIVERED_MISTRO";
+    public static final String ACTION_SMS_RECEIVED = "SMS_RECEIVED_MISTRO";
+    public static final String SMS_ERROR_GENERIC_FAILURE = "sms_generic_failure_error";
+    public static final String SMS_ERROR_NO_SERVICE = "sms_no_service_error";
+    public static final String SMS_ERROR_RADIO_OFF = "sms_radio_off_error";
+    public static final String SMS_ERROR_RESULT_CANCELLED = "sms_result_cancelled_error";
+
+    /**
+     * This method checks whether the application can access the internet
+     *
+     * @param context   The activity/service from where you want to check for the connection
+     *
+     * @return  True if the application can connect to the internet and False if not
+     */
+    public static boolean checkNetworkConnection(Context context){
+        ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
+        NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();
+        if(networkInfo==null){ //no connection
+            return false;
+        }
+        else {
+            return true;
+        }
+    }
+
+    /**
+     * This method checks if an internet connection is available and asks the user whether it can use SMS instead
+     * if no internet connection is found.
+     * Please do not run this method in the UI thread.
+     *
+     * @param context   The activity/service from where you want to check for the connection
+     */
+    public static void requestPermissionToUseSMS(final Context context){
+        if(!checkNetworkConnection(context)){
+            if(getSharedPreference(context, SP_KEY_USE_SMS_TO_SEND_DATA,CANNOT_SEND_USING_SMS).equals(CANNOT_SEND_USING_SMS)){
+                DialogInterface.OnClickListener onClickListener = new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        if(which==DialogInterface.BUTTON_POSITIVE){
+                            dialog.dismiss();
+                            setSharedPreference(context, SP_KEY_USE_SMS_TO_SEND_DATA,CAN_SEND_USING_SMS);
+                        }
+                        else{
+                            dialog.cancel();
+                            setSharedPreference(context, SP_KEY_USE_SMS_TO_SEND_DATA,CANNOT_SEND_USING_SMS);
+                        }
+                    }
+                };
+                AlertDialog simCardAlertDialog = Utils.createSMSDialog(context, onClickListener);
+                simCardAlertDialog.show();
+            }
+        }
+        else{
+            setSharedPreference(context, SP_KEY_USE_SMS_TO_SEND_DATA,CANNOT_SEND_USING_SMS);
+        }
+    }
+
+    /**
+     * This method sends the string corresponding to a jsonObject or jsonArray to the server. Note that if string is not from the specified types of
+     * objects the server might not reply as expected.
+     * This method should only be called from within an asynchronous thread. Refer to android.os.AsyncTask
+     *
+     * @param context The context from where the data is being sent
+     * @param jsonString The string corresponding to either a jsonObject or a jsonArray
+     * @param appendedURL The page on the server to which the data is to be sent. All pages accessible from this app are specified in DataHandler
+     *                    eg DataHandler.FARMER_REGISTRATION_URL
+     * @param waitForResponse Set to true if UI will be waiting for a response from the server
+     *
+     * @return The response from the server
+     */
+    public static String sendDataToServer(Context context, String jsonString, String appendedURL, boolean waitForResponse) {
+        String response;
+        if(checkNetworkConnection(context)){
+            response = sendDataUsingHttpConnection(context, jsonString, appendedURL);
+        }
+        else{
+            //response = sendDataUsingSMS(context, jsonString, appendedURL, waitForResponse);
+            return null;
+        }
+        return response;
+    }
+
+    /**
+     * This method sends the string corresponding to a jsonObject or jsonArray to the server. Note that if string is not from the specified types of
+     * objects the server might not reply as expected. This function also caches the results from the server into the specified table and fetches
+     * data from the cache table if no response from the server.
+     * This method should only be called from within an asynchronous thread. Refer to android.os.AsyncTask
+     *
+     * @param context The context from where the data is being sent
+     * @param jsonString The string corresponding to either a jsonObject or a jsonArray
+     * @param appendedURL The page on the server to which the data is to be sent. All pages accessible from this app are specified in DataHandler
+     *                    eg DataHandler.FARMER_REGISTRATION_URL
+     * @param waitForResponse Set to true if UI will be waiting for a response from the server
+     * @param cacheTable The table to be used as a cache for the data obtained from the server
+     *
+     * @return The response from the server
+     */
+    public static String sendDataToServer(Context context, String jsonString, String appendedURL, boolean waitForResponse, String cacheTable) {
+        String response = null;
+        if(checkNetworkConnection(context)){//try to
+            response = sendDataUsingHttpConnection(context, jsonString, appendedURL);
+
+            cacheServerData(context, response, cacheTable);
+        }
+        if(response == null){//means that either there was no connection to the server or a null was returned
+            return getCachedServerData(context, cacheTable);
+        }
+        return response;
+    }
+
+    private static void cacheServerData(Context context, String serverResponse, String cacheTable){
+        if(serverResponse != null){
+            try{
+                DatabaseHelper databaseHelper = new DatabaseHelper(context);
+                SQLiteDatabase writableDatabase = databaseHelper.getWritableDatabase();
+
+                JSONArray serverData = new JSONArray(serverResponse);
+                String[] columns = null;
+
+                databaseHelper.runTruncateQuery(writableDatabase, cacheTable);//Delete the cache that was already in the database
+
+                for(int i = 0; i < serverData.length(); i++){
+                    JSONObject currentRow = serverData.getJSONObject(i);
+                    if(i == 0){//initialize the columns to be saved in the cache table
+                        List<String> tmpColumns = new ArrayList<String>();
+                        Iterator<String> keys = currentRow.keys();
+                        while(keys.hasNext()){
+                            tmpColumns.add(keys.next());
+                        }
+
+                        columns = tmpColumns.toArray(new String[tmpColumns.size()]);
+                        Log.d(TAG, "Columns for the cache table are "+String.valueOf(columns));
+                    }
+
+                    if(columns != null){
+                        String[] columnValues = new String[columns.length];
+                        for(int j = 0; j < columns.length; j++){
+                            columnValues[j] = currentRow.getString(columns[j]);
+                        }
+
+                        databaseHelper.runInsertQuery(cacheTable, columns, columnValues, -1, writableDatabase);
+                    }
+                }
+            }
+            catch (Exception e){
+                e.printStackTrace();
+            }
+        }
+    }
+
+    private static String getCachedServerData(Context context, String cacheTable){
+        try{
+            DatabaseHelper databaseHelper = new DatabaseHelper(context);
+            SQLiteDatabase readableDatabase = databaseHelper.getReadableDatabase();
+
+            String[] columns = databaseHelper.getAllColumns(cacheTable);
+            if(columns != null){
+                String[][] results = databaseHelper.runSelectQuery(readableDatabase, cacheTable, columns, null, null, null, null, null, null);
+                JSONArray jsonArray = new JSONArray();
+                for(int i = 0; i < results.length; i++){
+                    JSONObject currRow = new JSONObject();
+
+                    for(int j = 0; j < results[i].length; j++){
+                        currRow.put(columns[j], results[i][j]);
+                    }
+
+                    jsonArray.put(currRow);
+                }
+
+                return jsonArray.toString();
+            }
+        }
+        catch (Exception e){
+            e.printStackTrace();
+        }
+
+        return null;
+    }
+
+    /**
+     * This method sends data to the server using SMS
+     *
+     * @param context   The activity/service sending the data
+     * @param jsonString    The json string to be sent
+     * @param appendedURL   The page on the server to which the data is to be sent. All pages accessible from this app are specified in DataHandler
+     *                      eg DataHandler.FARMER_REGISTRATION_URL
+     * @param waitForResponse   Set to true if UI will be waiting for a response from the server
+     *
+     * @return  The response from the server
+     */
+    private static String sendDataUsingSMS(final Context context, String jsonString, String appendedURL, boolean waitForResponse){
+        if(getSharedPreference(context, SP_KEY_USE_SMS_TO_SEND_DATA,CANNOT_SEND_USING_SMS).equals(CAN_SEND_USING_SMS)){
+            //clear shared preference meant to store server's response
+            setSharedPreference(context, SP_KEY_SMS_RESPONSE, "");
+            setSharedPreference(context, SP_KEY_SMS_CACHE, "");
+
+            SmsManager smsManager = SmsManager.getDefault();
+            String message = appendedURL+SMS_DELIMITER+jsonString;
+            ArrayList<String> multipartMessage = smsManager.divideMessage(message);
+            int noOfParts = multipartMessage.size();
+
+
+            MistroSMSSentReceiver mistroSMSSentReceiver = new MistroSMSSentReceiver(message, noOfParts);
+            context.registerReceiver(mistroSMSSentReceiver, new IntentFilter(ACTION_SMS_SENT));
+            MistroSMSDeliveredReceiver mistroSMSDeliveredReceiver = new MistroSMSDeliveredReceiver(message, noOfParts);
+            context.registerReceiver(mistroSMSDeliveredReceiver, new IntentFilter(ACTION_SMS_DELIVERED));
+            if(waitForResponse){//method will be waiting for a response sms from the server
+                MistroSMSReceiver mistroSMSReceiver = new MistroSMSReceiver();
+                IntentFilter smsReceivedIntentFilter = new IntentFilter(ACTION_SMS_RECEIVED);
+                smsReceivedIntentFilter.addAction("android.provider.Telephony.SMS_RECEIVED");
+                context.registerReceiver(mistroSMSReceiver, smsReceivedIntentFilter);
+            }
+
+
+            //register a new sent and delivered intent for each of the parts
+            ArrayList<PendingIntent> sentPendingIntents = new ArrayList<PendingIntent>();
+            ArrayList<PendingIntent> deliveredPendingIntents = new ArrayList<PendingIntent>();
+            for(int i = 0; i<noOfParts; i++){
+                PendingIntent newSentPE = PendingIntent.getBroadcast(context, 0, new Intent(ACTION_SMS_SENT), 0);
+                sentPendingIntents.add(newSentPE);
+                PendingIntent newDeliveredPE = PendingIntent.getBroadcast(context, 0, new Intent(ACTION_SMS_DELIVERED), 0);
+                deliveredPendingIntents.add(newDeliveredPE);
+            }
+            smsManager.sendMultipartTextMessage(SMS_SERVER_ADDRESS, null, multipartMessage, sentPendingIntents, deliveredPendingIntents);
+
+            long startTime = System.currentTimeMillis();
+            if(waitForResponse){
+                while(true){
+                    long currTime = System.currentTimeMillis();
+                    long timeDiff = currTime - startTime;
+                    if(getSharedPreference(context, SP_KEY_SMS_RESPONSE,"").length()>0){
+                        return getSharedPreference(context, SP_KEY_SMS_RESPONSE,"");
+                    }
+                    else if(timeDiff>SMS_RESPONSE_TIMEOUT){
+                        Log.w(TAG, "SMS response timeout exceeded");
+                        return null;
+                    }
+                }
+            }
+            else{
+                return ACKNOWLEDGE_OK;
+            }
+        }
+        return null;
+    }
+
+    private static String sendDataUsingHttpConnection(Context context, String jsonString, String appendedURL) {
+        HttpParams httpParameters = new BasicHttpParams();
+        HttpConnectionParams.setConnectionTimeout(httpParameters, HTTP_POST_TIMEOUT);
+        HttpConnectionParams.setSoTimeout(httpParameters, HTTP_RESPONSE_TIMEOUT);
+        HttpClient httpClient=new DefaultHttpClient(httpParameters);
+        HttpPost httpPost=new HttpPost(BASE_URL+appendedURL);
+        try{
+            List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(1);
+            nameValuePairs.add(new BasicNameValuePair("json", jsonString));
+            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
+
+            HttpResponse httpResponse=httpClient.execute(httpPost);
+            if(httpResponse.getStatusLine().getStatusCode()==200)
+            {
+                HttpEntity httpEntity=httpResponse.getEntity();
+                if(httpEntity!=null)
+                {
+                    InputStream inputStream=httpEntity.getContent();
+                    String responseString=convertStreamToString(inputStream);
+                    return responseString.trim();
+                }
+            }
+            else
+            {
+                Log.e(TAG, "Status Code "+String.valueOf(httpResponse.getStatusLine().getStatusCode())+" passed");
+            }
+        }
+        catch (Exception e){
+            e.printStackTrace();
+            setSharedPreference(context, "http_error", e.getMessage());
+        }
+        if(isConnectedToServer(HTTP_POST_TIMEOUT)){
+            setSharedPreference(context, "http_error", "This application was unable to reach http://azizi.ilri.cgiar.org within "+String.valueOf(HTTP_POST_TIMEOUT/1000)+" seconds. Try resetting your network connection");
+        }
+        return  null;
+    }
+
+    private static boolean isConnectedToServer(int timeout) {
+        try{
+            URL myUrl = new URL("http://azizi.ilri.cgiar.org");
+            URLConnection connection = myUrl.openConnection();
+            connection.setConnectTimeout(timeout);
+            connection.connect();
+            return true;
+        } catch (Exception e) {
+            // Handle your exceptions
+            return false;
+        }
+    }
+
+    private static String convertStreamToString(InputStream inputStream)
+    {
+        BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream));
+        StringBuilder stringBuilder=new StringBuilder();
+        String line=null;
+        try
+        {
+            while((line=bufferedReader.readLine()) != null)
+            {
+                stringBuilder.append(line+"\n");
+            }
+        }
+        catch (Exception e)
+        {
+            e.printStackTrace();
+        }
+        finally
+        {
+            try
+            {
+                inputStream.close();
+
+            } catch (Exception e2)
+            {
+                e2.printStackTrace();
+            }
+        }
+        return stringBuilder.toString();
+    }
+
+    /**
+     * This method sets a shared preference to the specified value. Note that shared preferences can only handle strings
+     *
+     * @param context The context from where you want to set the value
+     * @param sharedPreferenceKey The key corresponding to the shared preference. All shared preferences accessible by this app are defined in
+     *                            DataHandler e.g DataHandler.SP_KEY_LOCALE
+     * @param value The value the sharedPreference is to be set to
+     */
+    public static void setSharedPreference(Context context, String sharedPreferenceKey, String value) {
+        SharedPreferences.Editor editor = context.getSharedPreferences(context.getString(R.string.app_name),Context.MODE_PRIVATE).edit();
+        editor.putString(sharedPreferenceKey,value);
+        editor.commit();
+        Log.d(TAG, sharedPreferenceKey+" shared preference saved as "+value);
+    }
+
+    /**
+     * Gets the vaule of a shared preference accessible by the context
+     *
+     * @param context Context e.g activity that is requesting for the shared preference
+     * @param sharedPreferenceKey The key corresponding to the shared preference. All shared preferences accessible by this app are defined in
+     *                            DataHandler e.g DataHandler.SP_KEY_LOCALE
+     * @param defaultValue What will be returned by this method if the sharedPreference is empty or unavailable
+     *
+     * @return The value of the sharedPreference or the default value specified if the sharedPreference is empty
+     */
+    public static String getSharedPreference(Context context, String sharedPreferenceKey, String defaultValue) {
+        SharedPreferences sharedPreferences = context.getSharedPreferences(context.getString(R.string.app_name), Context.MODE_PRIVATE);
+        //Log.d(TAG, "value of " + sharedPreferenceKey + " is " + sharedPreferences.getString(sharedPreferenceKey, defaultValue));
+        return sharedPreferences.getString(sharedPreferenceKey, defaultValue);
+    }
+
+    /**
+     * Responsible for handling errors that might occur while sms is sending
+     */
+    private static class MistroSMSSentReceiver extends BroadcastReceiver{
+
+        private final int noOfParts;
+        private final String originalMessage;
+        private int numberSent;
+        private int numberNotSent;
+
+        public MistroSMSSentReceiver(String originalMessage, int noOfParts){
+            this.noOfParts = noOfParts;
+            this.originalMessage = originalMessage;
+
+            numberSent = 0;
+            numberNotSent = 0;
+        }
+
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            //check if messages sent successfully
+            switch (getResultCode()){
+                case Activity.RESULT_OK:
+                    numberSent++;
+                    //do not put anything in the sharedPreference. Silence means everyting is A-Okay
+                    Log.d(TAG, "Message  "+String.valueOf(numberSent)+" of "+String.valueOf(noOfParts)+" successfully sent");
+                    break;
+                case SmsManager.RESULT_ERROR_GENERIC_FAILURE:
+                    numberNotSent++;
+                    if(getSharedPreference(context, SP_KEY_SMS_RESPONSE,"").length()==0){
+                        setSharedPreference(context, SP_KEY_SMS_RESPONSE, SMS_ERROR_GENERIC_FAILURE);
+                    }
+                    Log.e(TAG, "Message "+String.valueOf(numberNotSent)+" of "+String.valueOf(noOfParts)+" not sent due to GENERIC_FAILURE error");
+                    break;
+                case SmsManager.RESULT_ERROR_NO_SERVICE:
+                    numberNotSent++;
+                    if(getSharedPreference(context, SP_KEY_SMS_RESPONSE,"").length()==0){
+                        setSharedPreference(context, SP_KEY_SMS_RESPONSE, SMS_ERROR_NO_SERVICE);
+                    }
+                    Log.e(TAG, "Message "+String.valueOf(numberNotSent)+" of "+String.valueOf(noOfParts)+" not sent due to NO_SERVICE error");
+                    break;
+                case SmsManager.RESULT_ERROR_NULL_PDU:
+                    numberNotSent++;
+                    if(getSharedPreference(context, SP_KEY_SMS_RESPONSE,"").length()==0){
+                        setSharedPreference(context, SP_KEY_SMS_RESPONSE, SMS_ERROR_GENERIC_FAILURE);
+                    }
+                    Log.e(TAG, "Message "+String.valueOf(numberNotSent)+" of "+String.valueOf(noOfParts)+" not sent due to NULL_PDU error");
+                    break;
+                case SmsManager.RESULT_ERROR_RADIO_OFF:
+                    numberNotSent++;
+                    if(getSharedPreference(context, SP_KEY_SMS_RESPONSE,"").length()==0){
+                        setSharedPreference(context, SP_KEY_SMS_RESPONSE, SMS_ERROR_RADIO_OFF);
+                    }
+                    Log.e(TAG, "Message "+String.valueOf(numberNotSent)+" of "+String.valueOf(noOfParts)+" not sent due to RADIO_OFF error");
+                    break;
+            }
+        }
+    }
+
+    /**
+     * Handles errors that might occur when SMS has been sent and not yet received on the other side
+     */
+    private static class MistroSMSDeliveredReceiver extends BroadcastReceiver{
+
+        private final String originalMessage;
+        private final int noOfParts;
+        private int noDelivered;
+        private int noNotDelivered;
+
+        public MistroSMSDeliveredReceiver(String originalMessage, int noOfParts){
+            this.originalMessage = originalMessage;
+            this.noOfParts = noOfParts;
+
+            noDelivered = 0;
+            noNotDelivered = 0;
+        }
+
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            switch (getResultCode()) {
+                case Activity.RESULT_OK:
+                    noDelivered++;
+                    Log.d(TAG, "Message  "+String.valueOf(noDelivered)+" of "+String.valueOf(noOfParts)+" successfully sent");
+                    //do not insert anything into sharedPreferences, silence means everything is okay
+                    break;
+                case Activity.RESULT_CANCELED:
+                    noNotDelivered++;
+                    if(getSharedPreference(context, SP_KEY_SMS_RESPONSE,"").length()==0){
+                        setSharedPreference(context, SP_KEY_SMS_RESPONSE, SMS_ERROR_RESULT_CANCELLED);
+                    }
+                    Log.e(TAG, "Message "+String.valueOf(noNotDelivered)+" of "+String.valueOf(noOfParts)+" not sent due to RADIO_OFF error");
+                    break;
+            }
+        }
+    }
+
+    /**
+     * This method saves farmer details into a SQLite database.
+     * Run this method in a thread running asynchronously to the UI thread.
+     *
+     * @param context The activity/service from where you want to save the farmer details
+     * @param farmerData Data for the farmer represented as a JSONObject
+     */
+    public static void saveFarmerData(Context context, JSONObject farmerData){
+        DatabaseHelper databaseHelper = new DatabaseHelper(context);
+        SQLiteDatabase writableDB = databaseHelper.getWritableDatabase();
+
+
+        //insert farmer data
+        if(writableDB.isOpen()){
+            try{
+                //remove all the data associated to farmer
+                databaseHelper.runTruncateQuery(writableDB, databaseHelper.TABLE_FARMER);
+                databaseHelper.runTruncateQuery(writableDB, databaseHelper.TABLE_COW);
+                databaseHelper.runTruncateQuery(writableDB, databaseHelper.TABLE_MILK_PRODUCTION);
+                databaseHelper.runTruncateQuery(writableDB, databaseHelper.TABLE_EVENT);
+
+                String[] columns = new String[]{"id","name","mobile_no","location_county","location_district","gps_longitude", "gps_latitude", "date_added", "sim_card_sn"};
+                String[] columnValues = new String[columns.length];
+
+                columnValues[0] = farmerData.getString("id");
+                columnValues[1] = farmerData.getString("name");
+                columnValues[2] = farmerData.getString("mobile_no");
+                columnValues[3] = farmerData.getString("location_county");
+                columnValues[4] = farmerData.getString("location_district");
+                columnValues[5] = farmerData.getString("gps_longitude");
+                columnValues[6] = farmerData.getString("gps_latitude");
+                columnValues[7] = farmerData.getString("date_added");
+                columnValues[8] = farmerData.getString("sim_card_sn");
+
+                databaseHelper.runInsertQuery(databaseHelper.TABLE_FARMER, columns, columnValues, 0, writableDB);
+
+                //insert cow data
+                JSONArray cowData = farmerData.getJSONArray("cows");
+                for(int i = 0; i < cowData.length(); i++){
+                    JSONObject currCow = cowData.getJSONObject(i);
+                    columns = new String[]{"id", "farmer_id", "name", "ear_tag_number", "date_of_birth", "age", "age_type", "sex", "sire_id", "dam_id", "date_added", "service_type", "country_id", "bull_owner", "owner_name", "milking_status"};
+                    columnValues = new String[columns.length];
+
+                    columnValues[0] = currCow.getString("id");
+                    columnValues[1] = currCow.getString("farmer_id");
+                    columnValues[2] = currCow.getString("name");
+                    columnValues[3] = currCow.getString("ear_tag_number");
+                    columnValues[4] = currCow.getString("date_of_birth");
+                    columnValues[5] = currCow.getString("age");
+                    columnValues[6] = currCow.getString("age_type");
+                    columnValues[7] = currCow.getString("sex");
+                    columnValues[8] = currCow.getString("sire_id");
+                    columnValues[9] = currCow.getString("dam_id");
+                    columnValues[10] = currCow.getString("date_added");
+                    columnValues[11] = currCow.getString("service_type");
+                    columnValues[12] = currCow.getString("country_id");
+                    columnValues[13] = currCow.getString("bull_owner");
+                    columnValues[14] = currCow.getString("owner_name");
+                    columnValues[15] = currCow.getString("milking_status");
+
+                    databaseHelper.runInsertQuery(databaseHelper.TABLE_COW, columns, columnValues, 0, writableDB);
+
+                    JSONArray cowEvents = currCow.getJSONArray("events");
+                    for(int j = 0; j < cowEvents.length(); j++){
+                        JSONObject currEvent = cowEvents.getJSONObject(j);
+
+                        columns = new String[]{"id", "cow_id", "event_name", "remarks", "event_date", "birth_type", "parent_cow_event", "bull_id", "servicing_days", "cod", "no_of_live_births", "saved_on_server", "date_added"};
+                        columnValues = new String[columns.length];
+
+                        columnValues[0] = currEvent.getString("id");
+                        columnValues[1] = currEvent.getString("cow_id");
+                        columnValues[2] = currEvent.getString("event_name");
+                        columnValues[3] = currEvent.getString("remarks");
+                        columnValues[4] = currEvent.getString("event_date");
+                        columnValues[5] = currEvent.getString("birth_type");
+                        columnValues[6] = currEvent.getString("parent_cow_event");
+                        columnValues[7] = currEvent.getString("bull_id");
+                        columnValues[8] = currEvent.getString("servicing_days");
+                        columnValues[9] = currEvent.getString("cause_of_death");
+                        columnValues[10] = currEvent.getString("no_of_live_births");
+                        columnValues[11] = "1";
+                        columnValues[12] = currEvent.getString("date_added");
+
+                        databaseHelper.runInsertQuery(databaseHelper.TABLE_EVENT, columns, columnValues, 0, writableDB);
+                    }
+
+                    JSONArray cowMilkProduction = currCow.getJSONArray("milk_production");
+                    for(int j = 0; j < cowMilkProduction.length(); j++){
+                        JSONObject currMProduction = cowMilkProduction.getJSONObject(j);
+                        //(id INTEGER PRIMARY KEY, cow_id INTEGER, time TEXT, quantity INTEGER, date_added TEXT, date TEXT, quantity_type TEXT)");
+                        columns = new String[]{"id", "cow_id", "time", "quantity", "date_added", "date", "quantity_type"};
+
+                        columnValues = new String[columns.length];
+
+                        columnValues[0] = currMProduction.getString("id");
+                        columnValues[1] = currMProduction.getString("cow_id");
+                        columnValues[2] = currMProduction.getString("time");
+                        columnValues[3] = currMProduction.getString("quantity");
+                        columnValues[4] = currMProduction.getString("date_added");
+                        columnValues[5] = currMProduction.getString("date");
+                        columnValues[6] = currMProduction.getString("quantity_type");
+
+                        databaseHelper.runInsertQuery(databaseHelper.TABLE_MILK_PRODUCTION, columns, columnValues, 0, writableDB);
+
+                    }
+                }
+
+                JSONArray eventsConstraints = farmerData.getJSONArray("event_constraints");
+                for(int i = 0; i < eventsConstraints.length(); i++){
+                    JSONObject currConstraint = eventsConstraints.getJSONObject(i);
+
+                    //id INTEGER PRIMARY KEY, event TEXT, time INTEGER, time_units TEXT
+                    columns = new String[]{"id", "event", "time", "time_units"};
+                    columnValues = new String[columns.length];
+
+                    columnValues[0] = currConstraint.getString("id");
+                    columnValues[1] = currConstraint.getString("event");
+                    columnValues[2] = currConstraint.getString("time");
+                    columnValues[3] = currConstraint.getString("time_units");
+
+                    databaseHelper.runInsertQuery(databaseHelper.TABLE_EVENTS_CONSTRAINTS, columns, columnValues, 0, writableDB);
+                }
+            }
+            catch (Exception e){
+                e.printStackTrace();
+            }
+        }
+        else{
+            Log.e(TAG, "Writable database did not open. Was unable to save cow data into the SQLite DB");
+        }
+
+        //close the database
+        writableDB.close();
+        databaseHelper.close();
+    }
+
+    /**
+     * This method gets cached farmer data from the SQLite database
+     * @param context The activity/service from where you want to get the farmer data
+     *
+     * @return Returns null if something goes wrong or a farmer object if successful
+     */
+    public static Farmer getFarmerData(Context context){
+        Farmer farmer = null;
+        DatabaseHelper databaseHelper = new DatabaseHelper(context);
+        SQLiteDatabase readableDB = databaseHelper.getReadableDatabase();
+
+        //fetch farmer data
+        TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
+        String simCardSN = telephonyManager.getSimSerialNumber();
+
+        String[] columns = new String[]{"id","name","mobile_no","gps_longitude", "gps_latitude", "sim_card_sn"};
+        String selection  = "sim_card_sn='"+simCardSN+"'";
+        String[][] farmerResult = databaseHelper.runSelectQuery(readableDB,databaseHelper.TABLE_FARMER, columns, selection, null, null, null, null, null);
+        if(farmerResult.length == 1){//only one farmer should have this sim card sn
+
+            String farmerID = farmerResult[0][0];
+            farmer = new Farmer();
+            farmer.setFullName(farmerResult[0][1]);
+            farmer.setMobileNumber(farmerResult[0][2]);
+            farmer.setLongitude(farmerResult[0][3]);
+            farmer.setLatitude(farmerResult[0][4]);
+            farmer.setSimCardSN(farmerResult[0][5]);
+
+            //fetch cow data
+            columns = new String[]{"id", "name", "ear_tag_number", "date_of_birth", "age", "age_type", "sex", "sire_id", "dam_id", "date_added", "service_type", "country_id", "bull_owner", "owner_name", "milking_status"};
+            selection = "farmer_id="+farmerID;
+
+            String[][] cowResult = databaseHelper.runSelectQuery(readableDB, databaseHelper.TABLE_COW, columns, selection, null, null, null, null, null);
+            if(cowResult.length > 0){
+                for(int cowIndex = 0 ; cowIndex < cowResult.length; cowIndex++){
+                    Cow currCow = new Cow(true);
+
+                    String cowID = cowResult[cowIndex][0];
+                    currCow.setName(cowResult[cowIndex][1]);
+                    currCow.setEarTagNumber(cowResult[cowIndex][2]);
+                    Log.d(TAG, "Current cow's name and eartag number are "+cowResult[cowIndex][1]+ " " + cowResult[cowIndex][2]);
+                    currCow.setDateOfBirth(cowResult[cowIndex][3]); //TODO: not sure if this will work
+                    if(cowResult[cowIndex][4].length() > 0){
+                        currCow.setAge(Integer.parseInt(cowResult[cowIndex][4]));
+                    }
+                    currCow.setDateAdded(cowResult[cowIndex][9]);
+                    currCow.setAgeType(cowResult[cowIndex][5]);
+                    currCow.setSex(cowResult[cowIndex][6]);
+                    currCow.setServiceType(cowResult[cowIndex][10]);
+                    currCow.setMilkingStatus(cowResult[cowIndex][14]);
+
+                    //set sire
+                    if(cowResult[cowIndex][7].length() > 0){
+                        columns = new String[]{"id", "name", "ear_tag_number", "date_of_birth", "age", "age_type", "sex", "sire_id", "dam_id", "date_added", "service_type", "country_id", "bull_owner", "owner_name"};
+                        selection = "id="+cowResult[cowIndex][7];
+                        String[][] sireRes = databaseHelper.runSelectQuery(readableDB, databaseHelper.TABLE_COW, columns, selection, null, null, null, null, null);
+                        if(sireRes.length == 1){
+                            Sire sire = new Sire();
+                            sire.setName(sireRes[0][1]);
+                            sire.setEarTagNumber(sireRes[0][2]);
+                            sire.setDateAdded(sireRes[0][9]);
+
+                            currCow.setSire(sire);
+                        }
+                        else{
+                            Log.w(TAG, "No sire fetched for current cow");
+                            Log.w(TAG, " cow's id = "+cowResult[cowIndex][0]);
+                            Log.w(TAG, " sire's id = "+cowResult[cowIndex][7]);
+                        }
+                    }
+
+                    //set dam
+                    if(cowResult[cowIndex][8].length() > 0){
+                        columns = new String[]{"id", "name", "ear_tag_number", "date_of_birth", "age", "age_type", "sex", "sire_id", "dam_id", "date_added", "service_type", "country_id", "bull_owner", "owner_name"};
+                        selection = "id="+cowResult[cowIndex][8];
+                        String[][] damRes = databaseHelper.runSelectQuery(readableDB, databaseHelper.TABLE_COW, columns, selection, null, null, null, null, null);
+                        if(damRes.length == 1){
+                            Dam dam = new Dam();
+                            dam.setName(damRes[0][1]);
+                            dam.setEarTagNumber(damRes[0][2]);
+                            dam.setDateAdded(damRes[0][9]);
+
+                            currCow.setDam(dam);
+                        }
+                        else{
+                            Log.w(TAG, "No dam fetched for current cow");
+                            Log.w(TAG, " cow's id = "+cowResult[cowIndex][0]);
+                            Log.w(TAG, " dam's id = "+cowResult[cowIndex][8]);
+                        }
+                    }
+
+                    //fetch cow events
+                    columns = new String[] {"id", "cow_id", "event_name", "remarks", "event_date", "birth_type", "parent_cow_event", "bull_id", "servicing_days", "cod", "no_of_live_births", "saved_on_server", "date_added"};
+                    selection = "cow_id="+cowID;
+                    String[][] eventResult = databaseHelper.runSelectQuery(readableDB, databaseHelper.TABLE_EVENT, columns, selection, null, null, null, null, null);
+                    for(int eventIndex = 0; eventIndex < eventResult.length; eventIndex++){
+                        Event currEvent = new Event();
+
+                        currEvent.setId(Integer.parseInt(eventResult[eventIndex][0]));
+                        currEvent.setType(eventResult[eventIndex][2]);
+                        currEvent.setRemarks(eventResult[eventIndex][3]);
+                        currEvent.setEventDate(eventResult[eventIndex][4]);
+                        currEvent.setBirthType(eventResult[eventIndex][5]);
+                        if(eventResult[eventIndex][6].length() > 0)
+                            currEvent.setParentCowEventID(Integer.parseInt(eventResult[eventIndex][6]));
+                        if(eventResult[eventIndex][7].length() > 0)
+                            currEvent.setBullID(Integer.parseInt(eventResult[eventIndex][7]));
+                        if(eventResult[eventIndex][8].length() > 0)
+                            currEvent.setServicingDays(Integer.parseInt(eventResult[eventIndex][8]));
+                        currEvent.setCod(eventResult[eventIndex][9]);
+                        if(eventResult[eventIndex][10].length() > 0)
+                            currEvent.setNoOfLiveBirths(Integer.parseInt(eventResult[eventIndex][10]));
+                        if(eventResult[eventIndex][11].equals("1")){
+                            currEvent.setSavedOnServer(true);
+                        }
+                        else{
+                            currEvent.setSavedOnServer(false);
+                        }
+                        currEvent.setDateAdded(eventResult[eventIndex][12]);
+
+                        currCow.addEvent(currEvent);
+                    }
+
+                    //(id INTEGER PRIMARY KEY, cow_id INTEGER, time TEXT, quantity INTEGER, date_added TEXT, date TEXT, quantity_type TEXT)");
+                    columns = new String[] {"id", "cow_id", "time", "quantity", "date_added", "date", "quantity_type"};
+                    selection = "cow_id="+cowID;
+                    String[][] mpResult = databaseHelper.runSelectQuery(readableDB, databaseHelper.TABLE_MILK_PRODUCTION, columns, selection, null, null, null, null, null);
+                    for(int mpIndex = 0; mpIndex < mpResult.length; mpIndex++){
+                        MilkProduction currMP = new MilkProduction();
+
+                        currMP.setId(Integer.parseInt(mpResult[mpIndex][0]));
+                        currMP.setTime(mpResult[mpIndex][2]);
+                        currMP.setQuantity(Float.parseFloat(mpResult[mpIndex][3]));
+                        currMP.setDateAdded(mpResult[mpIndex][4]);
+                        currMP.setDate(mpResult[mpIndex][5]);
+                        currMP.setQuantityType(mpResult[mpIndex][6]);
+
+                        currCow.addMilkProduction(currMP);
+                    }
+                    farmer.addCow(currCow);
+                }
+            }
+            else{
+                Log.w(TAG, "No cows fetched from database");
+                Log.w(TAG, " farmer's id = "+farmerID);
+                Log.w(TAG, " farmer's name = "+farmer.getFullName());
+            }
+        }
+        else{
+            Log.e(TAG, "Unable to get cached farmer data. Might be because no farmer in has the provided simCardSN or more than one do");
+            Log.e(TAG, " SimcardSN = "+simCardSN);
+            Log.e(TAG, " Number of fetched farmers = "+String.valueOf(farmerResult.length));
+        }
+
+        return farmer;
+    }
+
+    public static List<EventConstraint> getEventConstraints(Context context){
+        List<EventConstraint> result = new ArrayList<EventConstraint>();
+        DatabaseHelper databaseHelper = new DatabaseHelper(context);
+        SQLiteDatabase readableDB = databaseHelper.getReadableDatabase();
+
+        String[] columns = new String[]{"id", "event", "time", "time_units"};
+        String[][] constraintResult = databaseHelper.runSelectQuery(readableDB,databaseHelper.TABLE_EVENTS_CONSTRAINTS, columns, null, null, null, null, null, null);
+        if(constraintResult.length > 0){
+            for(int i = 0; i < constraintResult.length; i++){
+                String[] currConstraint = constraintResult[i];
+                result.add(new EventConstraint(Integer.parseInt(currConstraint[0]), currConstraint[1], Integer.parseInt(currConstraint[2]), currConstraint[3]));
+            }
+        }
+
+        return result;
+    }
+
+    /**
+     * This method caches data that would have been sent to the server. Note that this method has an almost identical arguement
+     * signature similar to the sendDataToServer method.
+     *
+     * @param context   The activity/service from where you want to save cache the request
+     * @param jsonString    The valid json string containing data for the request as you would have sent it in a normal request
+     * @param appendedURL   The URI for the module on the server which you want the request to go to (eventually) e.g FARMER_ADD_COW_EVENT_URL
+     */
+    public static final boolean cacheRequest(Context context, String jsonString, String appendedURL){
+        //TODO: do stuff
+        DatabaseHelper databaseHelper = new DatabaseHelper(context);
+        SQLiteDatabase writableDB = databaseHelper.getWritableDatabase();
+        if(writableDB.isOpen()){
+            String[] columns = new String[]{"url", "json"};
+            String[] values = new String[columns.length];
+            values[0] = appendedURL;
+            values[1] = jsonString;
+
+            databaseHelper.runInsertQuery(databaseHelper.TABLE_CACHED_REQUESTS, columns, values, -1, writableDB);
+            return true;
+        }
+        else{
+            Log.e(TAG, "Writable database did not open. Was unable to cache request in the SQLite DB. Choosing to send the data to the server instead");
+            sendDataToServer(context, jsonString, appendedURL, false);
+        }
+        return false;
+    }
+
+    /**
+     * This method sends cached data to the server
+     *
+     * @param waitForResponse If set to true, this method will wait for the response from the server and returns it to the caller
+     * @param context   The activity/service from where you want to send the data to the server
+     */
+    public static final String sendCachedRequests(Context context, boolean waitForResponse){
+        Log.d(TAG, "Trying to send cached data to server");
+        //public static String sendDataToServer(Context context, String jsonString, String appendedURL, boolean waitForResponse) {
+        DatabaseHelper databaseHelper = new DatabaseHelper(context);
+        SQLiteDatabase writableDB = databaseHelper.getWritableDatabase();
+        if(writableDB.isOpen()){
+            String[] columns = new String[]{"id","url", "json"};
+            String[][] result = databaseHelper.runSelectQuery(writableDB, databaseHelper.TABLE_CACHED_REQUESTS, columns, null, null, null, null, null, null);
+            List<String> ids = new ArrayList<String>();
+            if(result != null){
+                try{
+                    JSONArray requests = new JSONArray();
+                    for(int requestIndex = 0; requestIndex < result.length; requestIndex++){
+                        JSONObject currRequest = new JSONObject();
+                        ids.add(result[requestIndex][0]);
+                        String currRequestURL = result[requestIndex][1];
+                        JSONObject currRequestData = new JSONObject(result[requestIndex][2]);
+                        currRequest.put("requestURL", currRequestURL);
+                        currRequest.put("requestData", currRequestData);
+                        requests.put(currRequest);
+                    }
+                    TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
+                    String simCardSN = telephonyManager.getSimSerialNumber();
+                    if(simCardSN!=null){
+                        JSONObject finalRequest = new JSONObject();
+                        finalRequest.put("simCardSN", simCardSN);
+                        finalRequest.put("pastRequests", requests);
+                        if(requests.length() > 0){
+                            Log.d(TAG, "Sending the following cached data "+finalRequest.toString());
+                            String response = sendDataToServer(context, finalRequest.toString(), FARMER_ADD_CACHED_DATA_URL, waitForResponse);
+                            if(response != null && !response.equals(CODE_USER_NOT_AUTHENTICATED)){
+                                //delete the saved data from cache
+                                databaseHelper.runTruncateQuery(writableDB, databaseHelper.TABLE_CACHED_REQUESTS);
+                                /*String[] idsArray = new String[ids.size()];
+                                idsArray = ids.toArray(idsArray);
+                                databaseHelper.runDeleteQuery(writableDB, databaseHelper.TABLE_CACHED_REQUESTS, "id", idsArray);*/
+                                Log.d(TAG, "Deleted cached requests from SQLite database");
+                            }
+                            return response;
+                        }
+                        else {
+                            Log.d(TAG, "No Cached data in database");
+                            return  NO_DATA;
+                        }
+                    }
+                }
+                catch (Exception e){
+                    e.printStackTrace();
+                }
+            }
+            else{
+                Log.w(TAG, "Did not get any cached requests in the SQLite database, exiting");
+            }
+        }
+        else{
+            Log.e(TAG, "Readable database did not open. Was una");
+        }
+        return null;
+    }
+
+    /**
+     * This broadcast receiver is responsible for watching for SMSs coming for the server and concatenating SMS fragments in SMSs that are
+     * longer than the standard SMS length
+     */
+    private static class MistroSMSReceiver extends BroadcastReceiver{
+
+        private final SmsManager smsManager;
+
+        public MistroSMSReceiver(){
+            smsManager = SmsManager.getDefault();
+        }
+
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            final Bundle bundle = intent.getExtras();
+            try{
+                if(bundle != null){
+                    final Object[] pdusObject = (Object[])bundle.get("pdus");
+                    for(int i = 0; i < pdusObject.length; i++){
+                        SmsMessage currentMessage = SmsMessage.createFromPdu((byte[]) pdusObject[i]);
+                        String phoneNumber = currentMessage.getDisplayOriginatingAddress();
+                        String message = currentMessage.getDisplayMessageBody();
+
+                        if(phoneNumber.equals(SMS_SERVER_ADDRESS)){
+                            Log.d(TAG, "SMS received from server");
+                            if(getSharedPreference(context, SP_KEY_SMS_RESPONSE,"").length()==0){
+                                if(isExpectedString(message)){
+                                    Log.d(TAG, "SMS is valid json saved to shared preferences");
+                                    setSharedPreference(context, SP_KEY_SMS_RESPONSE, message);
+                                }
+                                else{
+                                    String cachedMessage = getSharedPreference(context, SP_KEY_SMS_CACHE, "");
+                                    cachedMessage = cachedMessage + message;
+                                    if(isExpectedString(cachedMessage)){
+                                        Log.d(TAG, "cached message + SMS is valid json saved to shared preferences");
+                                        setSharedPreference(context, SP_KEY_SMS_RESPONSE, cachedMessage);
+                                    }
+                                    else{
+                                        Log.d(TAG, "cached message + SMS is invalid json, cached in shared preference and waiting for other messages");
+                                        setSharedPreference(context, SP_KEY_SMS_CACHE, cachedMessage);
+                                    }
+                                }
+                            }
+                        }
+                        else{
+                            Log.w(TAG, "Message received from "+phoneNumber+" which is not the servers address ("+SMS_SERVER_ADDRESS+")");
+                        }
+                    }
+                }
+                else{
+                    Log.w(TAG, "Bundle containing sms contains null. Skipping this one");
+                }
+            }
+            catch (Exception e){
+                Log.e(TAG, "Exception thrown while trying to receive message"+e);
+            }
+        }
+
+        private boolean isExpectedString(String test) {
+            boolean valid = false;
+
+            try{
+                new JSONObject(test);
+                valid = true;
+            }
+            catch (JSONException e){
+                valid = false;
+            }
+
+            if(valid==false){
+                try {
+                    new JSONArray(test);
+                    valid = true;
+                }
+                catch(JSONException ex) {
+                    valid = false;
+                }
+            }
+
+            if(valid==false && test!=null){
+                if(test.equals(ACKNOWLEDGE_OK)) valid = true;
+                else if(test.equals(DATA_ERROR)) valid = true;
+                else if(test.equals(NO_DATA)) valid = true;
+                else if(test.equals(CODE_SIM_CARD_REGISTERED)) valid = true;
+                else if(test.equals(CODE_NUMBER_IN_USE)) valid = true;
+            }
+
+            return valid;
+        }
+    }
+
+    public static boolean isNull(String string){
+        if(string == null || string.equals("NULL") || string.equals("null")){
+            return true;
+        }
+        else{
+            return false;
+        }
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/backend/Locale.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/backend/Locale.java
new file mode 100644
index 0000000..73edbaf
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/backend/Locale.java
@@ -0,0 +1,221 @@
+package org.cgiar.ilri.np.farmer.backend;
+
+import android.content.Context;
+import android.util.Log;
+import org.cgiar.ilri.np.farmer.R;
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Created by jason on 9/5/13.
+ */
+public class Locale {
+    private static final String TAG = "Locale";
+    public static final String LOCALE_ENGLISH="en";
+    public static final String LOCALE_SWAHILI="sw";
+    public static final String LOCALE_LUTSOTSO="lu";
+    public static final String LOCALE_NANDI="nn";
+    public static final String LOCALE_KIKABRAS="kr";
+    public static final String LOCALE_KIPSIGIS="kp";
+
+    //public static final String SHARED_PREFERENCES_KEY = "locale";
+    public static String getStringInLocale(String stringName, Context context) {
+        String localeCode = getLocaleCode(context);
+        String name = stringName+"_"+localeCode;
+        String value = null;
+        try {
+            Field field = R.string.class.getDeclaredField(name);
+            int id = field.getInt(field);
+            if(id != 0) {
+                value = context.getString(id);
+            }
+            else {
+                Log.e(TAG,"no field in class R.string with the name "+name);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return value;
+    }
+
+    public static String[] getArrayInLocale(String arrayName, Context context) {
+        String localeCode = getLocaleCode(context);
+        String name = arrayName+"_"+localeCode;
+        String[] value = null;
+        try {
+            Field field = R.array.class.getDeclaredField(name);
+            int id = field.getInt(field);
+            if(id != 0) {
+                value = context.getResources().getStringArray(id);
+            }
+            else {
+                Log.e(TAG,"no field in class R.string with the name "+name);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return value;
+    }
+
+    public static String[] getArrayInLocale(String arrayName, Context context, String localeCode) {
+        String name = arrayName+"_"+localeCode;
+        String[] value = null;
+        try {
+            Field field = R.array.class.getDeclaredField(name);
+            int id = field.getInt(field);
+            if(id != 0) {
+                value = context.getResources().getStringArray(id);
+            }
+            else {
+                Log.e(TAG,"no field in class R.string with the name "+name);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return value;
+    }
+
+    public static int getArrayIDInLocale(String arrayName, Context context) {
+        String localeCode = getLocaleCode(context);
+        String name = arrayName+"_"+localeCode;
+        int value = 0;
+        try {
+            Field field = R.array.class.getDeclaredField(name);
+            int id = field.getInt(field);
+            if(id != 0) {
+                value = id;
+            }
+            else {
+                Log.e(TAG,"no field in class R.string with the name "+name);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return value;
+    }
+
+    public static String[] translateArrayToEnglish(Context context, String arrayName, String[] arrayInLocale){
+        if(arrayInLocale != null){
+            //Log.d(TAG, "Trying to translate array to english");
+            String[] allStringsInEN = Locale.getArrayInLocale(arrayName, context, Locale.LOCALE_ENGLISH);
+            String[] allStringsInLocale = Locale.getArrayInLocale(arrayName, context);
+
+            String[] translatedArray = new String[arrayInLocale.length];
+            for(int i = 0; i < arrayInLocale.length; i++){
+                for(int j = 0; j < allStringsInLocale.length; j++){
+                    //Log.d(TAG, "Current actual string = "+arrayInLocale[i]);
+                    //Log.d(TAG, "Current string in english =  "+allStringsInEN[j]);
+                    //Log.d(TAG, "Current string in locale = "+allStringsInLocale[j]);
+                    if(arrayInLocale[i].equals(allStringsInLocale[j])){
+                        translatedArray[i] = allStringsInEN[j];
+                    }
+                }
+            }
+
+            return translatedArray;
+        }
+        return null;
+    }
+
+    public static String[] translateArrayToLocale(Context context, String arrayName, String[] arrayInEN){
+        if(arrayInEN != null){
+            //Log.d(TAG, "Trying to translate array to current locale");
+            String[] allStringsInEN = Locale.getArrayInLocale(arrayName, context, Locale.LOCALE_ENGLISH);
+            String[] allStringsInLocale = Locale.getArrayInLocale(arrayName, context);
+
+            String[] translatedArray = new String[arrayInEN.length];
+            for(int i = 0; i < arrayInEN.length; i++){
+                for(int j = 0; j < allStringsInEN.length; j++){
+                    //Log.d(TAG, "Current actual string = "+arrayInEN[i]);
+                    //Log.d(TAG, "Current string in english =  "+allStringsInEN[j]);
+                    //Log.d(TAG, "Current string in locale = "+allStringsInLocale[j]);
+                    if(arrayInEN[i].equals(allStringsInEN[j])){
+                        translatedArray[i] = allStringsInLocale[j];
+                    }
+                }
+            }
+
+            return translatedArray;
+        }
+        return null;
+    }
+
+    public static String translateStringToEnglish(Context context, String arrayName, String string){
+        if(string != null){
+            String[] allStringsInLocale = Locale.getArrayInLocale(arrayName, context);
+            String[] allStringsInEN = Locale.getArrayInLocale(arrayName, context, LOCALE_ENGLISH);
+
+            for(int i = 0; i < allStringsInLocale.length; i++){
+                if(string.equals(allStringsInLocale[i])){
+                    return allStringsInEN[i];
+                }
+            }
+        }
+        return null;
+    }
+
+    public static String translateStringToLocale(Context context, String arrayName, String string){
+        if(string != null){
+            String[] allStringsInLocale = Locale.getArrayInLocale(arrayName, context);
+            String[] allStringsInEN = Locale.getArrayInLocale(arrayName, context, LOCALE_ENGLISH);
+
+            for(int i = 0; i < allStringsInEN.length; i++){
+                if(string.equals(allStringsInEN[i])){
+                    return allStringsInLocale[i];
+                }
+            }
+        }
+        return null;
+    }
+
+    public static void switchLocale(String newLocaleCode, Context context) {
+        /*SharedPreferences.Editor editor = context.getSharedPreferences(context.getString(R.string.app_name),Context.MODE_PRIVATE).edit();
+        editor.putString(SHARED_PREFERENCES_KEY,newLocaleCode);
+        editor.commit();*/
+        DataHandler.setSharedPreference(context,DataHandler.SP_KEY_LOCALE,newLocaleCode);
+    }
+
+    public static String getLocaleCode(Context context) {
+        /*SharedPreferences sharedPreferences = context.getSharedPreferences(context.getString(R.string.app_name), Context.MODE_PRIVATE);
+        return sharedPreferences.getString(SHARED_PREFERENCES_KEY, LOCALE_ENGLISH);*/
+        return DataHandler.getSharedPreference(context, DataHandler.SP_KEY_LOCALE, LOCALE_ENGLISH);
+    }
+
+    public static String getLocaleCode(Context context, String language){
+        String code = "";
+        if(language.equals(context.getString(R.string.english))) code = LOCALE_ENGLISH;
+        else if(language.equals(context.getString(R.string.swahili))) code = LOCALE_SWAHILI;
+        else if(language.equals(context.getString(R.string.nandi))) code = LOCALE_NANDI;
+        else if(language.equals(context.getString(R.string.kipsigis))) code = LOCALE_KIPSIGIS;
+        else if(language.equals(context.getString(R.string.kikabrasi))) code = LOCALE_KIKABRAS;
+        else if(language.equals(context.getString(R.string.lutsotso))) code = LOCALE_LUTSOTSO;
+
+        return code;
+    }
+
+    public static String getLanguage(Context context, String localeCode){
+        String language = "";
+
+        if(localeCode.equals(LOCALE_ENGLISH)) language = context.getString(R.string.english);
+        if(localeCode.equals(LOCALE_SWAHILI)) language = context.getString(R.string.swahili);
+        if(localeCode.equals(LOCALE_NANDI)) language = context.getString(R.string.nandi);
+        if(localeCode.equals(LOCALE_KIPSIGIS)) language = context.getString(R.string.kipsigis);
+        if(localeCode.equals(LOCALE_KIKABRAS)) language = context.getString(R.string.kikabrasi);
+        if(localeCode.equals(LOCALE_LUTSOTSO)) language = context.getString(R.string.lutsotso);
+
+        return language;
+    }
+
+    public static List<String> getAllLanguages(Context context){
+        List<String> languages = new ArrayList<String>();
+        languages.add(context.getString(R.string.english));
+        languages.add(context.getString(R.string.swahili));
+        languages.add(context.getString(R.string.lutsotso));
+        languages.add(context.getString(R.string.kikabrasi));
+        languages.add(context.getString(R.string.nandi));
+        languages.add(context.getString(R.string.kipsigis));
+
+        return languages;
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/backend/database/DatabaseHelper.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/backend/database/DatabaseHelper.java
new file mode 100644
index 0000000..93fdf41
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/backend/database/DatabaseHelper.java
@@ -0,0 +1,213 @@
+package org.cgiar.ilri.np.farmer.backend.database;
+
+import android.content.ContentValues;
+import android.content.Context;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+import android.util.Log;
+
+import java.io.Serializable;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * This class handles transactions to the SQLite database
+ * Please handle with care and always call methods herein in an asynchronous thread (asynchronous to the UI thread)
+ *
+ * Created by jrogena on 03/04/14.
+ */
+public class DatabaseHelper extends SQLiteOpenHelper implements Serializable{
+
+    public static final String DB_NAME = "ngombe_planner";
+    public static final int DB_VERSION = 13;
+    public static final String TABLE_FARMER = "farmer";
+    public static final String TABLE_COW = "cow";
+    public static final String TABLE_EVENT = "event";
+    public static final String TABLE_CACHED_REQUESTS = "cached_requests";
+    public static final String TABLE_MILK_PRODUCTION = "milk_production";
+    public static final String TABLE_EVENTS_CONSTRAINTS = "events_constraints";
+    public static final String TABLE_EXTENSION_PERSONNEL = "extension_personnel";
+
+    public static final String[] COLUMNS_EXTENSION_PERSONNEL = {"id", "name", "mobile_no", "date_added"};
+
+    private final Map<String, String[]> tableColumns = new HashMap<String, String[]>();
+
+    private static final String TAG = "DatabaseHelper";
+
+    /**
+     * Constructor for the DatabaseHelper class
+     *
+     * @param context   Context e.g activity/service requesting for the data
+     */
+    public DatabaseHelper(Context context){
+        super(context, DB_NAME, null, DB_VERSION);
+        Log.d(TAG, "Database version = "+DB_VERSION);
+
+        tableColumns.put(TABLE_EXTENSION_PERSONNEL, COLUMNS_EXTENSION_PERSONNEL);
+    }
+
+    public String[] getAllColumns(String table){
+        return tableColumns.get(table);
+    }
+
+    /**
+     * This should be called only when the database does not exist or a new version of the database has been defined
+     *
+     * @param db    The writable database
+     */
+    @Override
+    public void onCreate(SQLiteDatabase db) {
+        db.execSQL("CREATE TABLE " + TABLE_FARMER + " (id INTEGER PRIMARY KEY, name TEXT, mobile_no TEXT, location_county TEXT, location_district TEXT, gps_longitude TEXT, gps_latitude TEXT, date_added TEXT, sim_card_sn TEXT);");
+		db.execSQL("CREATE TABLE " + TABLE_COW + " (id INTEGER PRIMARY KEY, farmer_id INTEGER, name TEXT, ear_tag_number TEXT, date_of_birth TEXT, age INTEGER, age_type TEXT, sex TEXT, sire_id INTEGER, dam_id INTEGER, date_added TEXT, service_type TEXT, country_id INTEGER, bull_owner TEXT, owner_name TEXT, milking_status TEXT);");
+        db.execSQL("CREATE TABLE " + TABLE_EVENT + " (id INTEGER PRIMARY KEY, cow_id INTEGER, event_name TEXT, remarks TEXT, event_date TEXT, birth_type TEXT, parent_cow_event INTEGER, bull_id INTEGER, servicing_days INTEGER, cod TEXT, no_of_live_births INTEGER, saved_on_server INTEGER, date_added TEXT)");
+        db.execSQL("CREATE TABLE " + TABLE_CACHED_REQUESTS + " (id INTEGER PRIMARY KEY AUTOINCREMENT, url TEXT, json TEXT)");
+        db.execSQL("CREATE TABLE " + TABLE_MILK_PRODUCTION + " (id INTEGER PRIMARY KEY, cow_id INTEGER, time TEXT, quantity INTEGER, date_added TEXT, date TEXT, quantity_type TEXT)");
+        db.execSQL("CREATE TABLE " + TABLE_EVENTS_CONSTRAINTS + " (id INTEGER PRIMARY KEY, event TEXT, time INTEGER, time_units TEXT)");
+        db.execSQL("CREATE TABLE " + TABLE_EXTENSION_PERSONNEL + " (id INTEGER PRIMARY KEY, name TEXT, mobile_no TEXT, date_added TEXT)");
+        //insert any static data to the db now
+    }
+
+    /**
+     * Called when a new version of the database is detected
+     *      (i.e when the constructor is called with an updated version number)
+     *
+     * @param db    the writable database
+     * @param oldVersion    the old version number for the database
+     * @param newVersion    the new version number for the database
+     */
+    @Override
+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+        Log.w(TAG, "About to update the database. All data will be lost");
+        db.execSQL("DROP TABLE IF EXISTS " + TABLE_COW);
+        db.execSQL("DROP TABLE IF EXISTS " + TABLE_FARMER);
+        db.execSQL("DROP TABLE IF EXISTS " + TABLE_EVENT);
+        db.execSQL("DROP TABLE IF EXISTS " + TABLE_CACHED_REQUESTS);
+        db.execSQL("DROP TABLE IF EXISTS " + TABLE_MILK_PRODUCTION);
+        db.execSQL("DROP TABLE IF EXISTS " + TABLE_EVENTS_CONSTRAINTS);
+        db.execSQL("DROP TABLE IF EXISTS " + TABLE_EXTENSION_PERSONNEL);
+
+        //recreate the database
+        onCreate(db);
+    }
+
+    /**
+     * This method is use dto run select queries to the database
+     *
+     * @param db    The readable database
+     * @param table The name of the table where the select query is to be run
+     * @param columns   An array of column names to be fetched in the query
+     * @param selection The selection criteria in the form column=value
+     * @param selectionArgs You may include ?s in selection, which will be replaced by the values from selectionArgs, in order that they appear in the selection. The values will be bound as Strings.
+     * @param groupBy   A filter declaring how to group rows, formatted as an SQL GROUP BY clause (excluding the GROUP BY itself). Passing null will cause the rows to not be grouped.
+     * @param having    A filter declare which row groups to include in the cursor, if row grouping is being used, formatted as an SQL HAVING clause (excluding the HAVING itself). Passing null will cause all row groups to be included, and is required when row grouping is not being used.
+     * @param orderBy   How to order the rows, formatted as an SQL ORDER BY clause (excluding the ORDER BY itself). Passing null will use the default sort order, which may be unordered.
+     * @param limit Limits the number of rows returned by the query, formatted as LIMIT clause. Passing null denotes no LIMIT clause.
+     *
+     * @return  A multidimensional array in the form array[selected_rows][selected_columns]
+     */
+    public String[][] runSelectQuery(SQLiteDatabase db, String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy, String limit) {
+
+        Log.d(TAG, "About to run select query on " + table + " table");
+        Cursor cursor=db.query(table, columns, selection, selectionArgs, groupBy, having, orderBy, limit);
+        if(cursor.getCount()!=-1) {
+            String[][] result=new String[cursor.getCount()][columns.length];
+            Log.d(TAG, "number of rows " + String.valueOf(cursor.getCount()));
+            int c1=0;
+            cursor.moveToFirst();
+            while(c1<cursor.getCount()) {
+                int c2=0;
+                while(c2<columns.length) {
+                    String currResult = cursor.getString(c2);
+                    if(currResult == null || currResult.equals("null"))
+                        currResult = "";//nulls from server not handled well by json. Set 'null' and null to empty string
+
+                    result[c1][c2] = currResult;
+                    c2++;
+                }
+                if(c1!=cursor.getCount()-1) {//is not the last row
+                    cursor.moveToNext();
+                }
+                c1++;
+            }
+            cursor.close();
+
+            return result;
+        }
+        else {
+            return null;
+        }
+    }
+
+    /**
+     * This method deletes rows form a table
+     *
+     * @param db    The writable database
+     * @param table The table from which rows are to be deleted
+     * @param referenceColumn   Column to be used as a reference for the delete
+     * @param columnValues   The values of the reference column. All rows with these values will be deleted
+     */
+    public void runDeleteQuery(SQLiteDatabase db, String table, String referenceColumn, String[] columnValues) {
+        Log.d(TAG, "About to run delete query on "+table+" table");
+
+        db.delete(table, referenceColumn+"=?", columnValues);
+    }
+
+    /**
+     * This method Runs an insert query (duh)
+     *
+     * @param table The table where you want to insert the data
+     * @param columns   An array of the columns to be inserted
+     * @param values    An array of the column values. Should correspond to the array of column names
+     * @param uniqueColumnIndex Index of the unique key (primary key). Set this to -1 if none
+     * @param db    The writable database
+     */
+    public void runInsertQuery(String table,String[] columns,String[] values, int uniqueColumnIndex,SQLiteDatabase db) {
+        Log.d(TAG, "About to run insert query on "+table+" table");
+        if(columns.length==values.length) {
+            ContentValues cv=new ContentValues();
+            int count=0;
+            while(count<columns.length) {
+                cv.put(columns[count], values[count]);
+                count++;
+            }
+
+            //delete row with same unique key
+            if(uniqueColumnIndex != -1){
+                Log.w(TAG, "About to delete any row with "+columns[uniqueColumnIndex]+" = "+values[uniqueColumnIndex]);
+                runDeleteQuery(db, table, columns[uniqueColumnIndex], new String[]{values[uniqueColumnIndex]});
+            }
+
+            db.insert(table, null, cv);
+
+            cv.clear();
+        }
+    }
+
+    /**
+     * This method deletes all data in a table. Please be careful, this method will delete all the data in that table
+     *
+     * @param db    The writable database
+     * @param table The table to truncate
+     */
+    public void runTruncateQuery(SQLiteDatabase db, String table){
+        Log.w(TAG, "About to truncate table "+table);
+        String query = "DELETE FROM "+table;
+        runQuery(db, query);
+    }
+
+    /**
+     * This method runs a generic query in the database.
+     * If you want to run:
+     *      select queries, please use runSelectQuery()
+     *      insert queries, please use runInsertQuery()
+     *      delete queries, please use runDeleteQuery()
+     *
+     * @param db    The readable/writable database to use depending on whether you need to write into the database
+     * @param query The query that you want to run. Please use SQLite friendly queries
+     */
+    public void runQuery(SQLiteDatabase db, String query) {//non return queries
+        Log.d(TAG, "about to run generic query on the database");
+        db.execSQL(query);
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/Cow.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/Cow.java
new file mode 100644
index 0000000..665efe5
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/Cow.java
@@ -0,0 +1,710 @@
+package org.cgiar.ilri.np.farmer.carrier;
+
+import android.content.Context;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.util.Log;
+
+import org.cgiar.ilri.np.farmer.backend.DataHandler;
+import org.cgiar.ilri.np.farmer.backend.Locale;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.Serializable;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Date;
+import java.util.List;
+
+/**
+ * Created by jason on 8/5/13.
+ */
+public class Cow implements Parcelable, Serializable {
+    public static final String PARCELABLE_KEY = "thisCow";
+    private static final String DEFAULT_DOB = "0000-00-00 00:00:00";
+    private static final String DOB_FORMAT = "yyyy-MM-dd HH:mm:ss";
+    private static final String OTHER_BREED = "Another Breed";
+    public static final String TAG = "Cow";
+    public static final String SEX_MALE = "Male";
+    public static final String SEX_FEMALE = "Female";
+    public static final String AGE_TYPE_DAY = "Days";
+    public static final String AGE_TYPE_MONTH = "Months";
+    public static final String AGE_TYPE_YEAR = "Years";
+    public static final String MODE_ADULT_COW_REGISTRATION = "adultCowRegistration";
+    public static final String MODE_BORN_CALF_REGISTRATION = "bornCalfRegistration";
+    public static final String SERVICE_TYPE_BULL = "Bull";
+    public static final String SERVICE_TYPE_AI = "AI";
+    public static final String SERVICE_TYPE_ET = "ET";
+
+    public static final String MILKING_S_HEIFER = "heifer";
+    public static final String MILKING_S_ADULT_MILKING = "adult_milking";
+    public static final String MILKING_S_ADULT_NOT_MILKING = "adult_not_milking";
+
+    public static final String COW_IN_CALF = "In calf";
+    public static final String COW_NOT_IN_CALF = "Not in calf";
+
+    private int id;
+    private String name;
+    private String earTagNumber;
+    private String dateOfBirth;
+    private String dateAdded;
+    private int age;
+    private String ageType;
+    private List<String> breeds;
+    private String sex;
+    private List<String> deformities;
+    private Sire sire;
+    private Dam dam;
+    private String countryOfOrigin;
+    private boolean isNotDamOrSire;
+    private String mode;
+    private String serviceType;
+    private String otherDeformity;
+    private String otherBreed;
+    private String piggyBack;
+    private List<Event> events;
+    private List<MilkProduction> milkProduction;
+    private String milkingStatus;
+    private boolean inCalf;
+
+
+    public Cow(boolean isNotDamOrSire) {
+        name = "";
+        earTagNumber = "";
+        dateOfBirth = "";
+        dateAdded = "";
+        age = -1;
+        ageType = "";
+        this.breeds = new ArrayList<String>();
+        sex = "";
+        this.deformities = new ArrayList<String>();
+        this.isNotDamOrSire = isNotDamOrSire;
+        if (isNotDamOrSire)//LOL, brings StackOverflowError if you init sire object inside sire object
+        {
+            sire = new Sire();
+            dam = new Dam();
+        }
+        mode = "";
+        countryOfOrigin = "";
+        serviceType = "";
+        otherDeformity = "";
+        otherBreed = "";
+        piggyBack = "";
+        this.events = new ArrayList<Event>();
+        this.milkProduction = new ArrayList<MilkProduction>();
+        milkingStatus = "";
+        inCalf = false;
+        id = -1;
+    }
+
+    public Cow(Parcel in) {
+        this(true);
+        readFromParcel(in);
+    }
+
+    public Cow(JSONArray allCows, int index){
+        try {
+            JSONObject thisCow = allCows.getJSONObject(index);
+            initFromJSON(thisCow);
+
+            int sireID = (DataHandler.isNull(thisCow.getString("sire_id"))) ? -1 : thisCow.getInt("sire_id");
+            int damID = (DataHandler.isNull(thisCow.getString("dam_id"))) ? -1 : thisCow.getInt("dam_id");
+
+            if(sireID != -1){
+                for(int i = 0; i < allCows.length(); i++){
+                    JSONObject possibleSire = allCows.getJSONObject(i);
+                    if(possibleSire.getInt("id") == sireID){
+                        Sire sire = new Sire();
+                        sire.setName(possibleSire.getString("name"));
+                        sire.setEarTagNumber(possibleSire.getString("ear_tag_number"));
+                        sire.setOwner((DataHandler.isNull(possibleSire.getString("owner_name"))) ? "" : possibleSire.getString("owner_name"));
+                        sire.setOwnerType((DataHandler.isNull(possibleSire.getString("bull_owner"))) ? "" : possibleSire.getString("owner_name"));
+
+                        this.sire = sire;
+                    }
+                }
+            }
+            this.sire.setStrawNumber((DataHandler.isNull(thisCow.getString("straw"))) ? "" : thisCow.getString("straw"));
+
+            if(damID != -1){
+                for(int i = 0; i < allCows.length(); i++){
+                    JSONObject possibleDam = allCows.getJSONObject(i);
+                    if(possibleDam.getInt("id") == damID){
+                        Dam dam = new Dam();
+                        dam.setName(possibleDam.getString("name"));
+                        dam.setEarTagNumber(possibleDam.getString("ear_tag_number"));
+
+                        this.dam = dam;
+                    }
+                }
+            }
+            this.dam.setEmbryoNumber((DataHandler.isNull(thisCow.getString("embryo"))) ? "" : thisCow.getString("embryo"));
+        }
+        catch (Exception e){
+            e.printStackTrace();
+        }
+    }
+
+    public int getId(){
+        return this.id;
+    }
+
+    private void initFromJSON(JSONObject jsonObject){
+        try {
+            id = jsonObject.getInt("id");
+            name = jsonObject.getString("name");
+            earTagNumber = jsonObject.getString("ear_tag_number");
+            dateOfBirth = (DataHandler.isNull(jsonObject.getString("date_of_birth"))) ? "" : jsonObject.getString("date_of_birth");
+            dateAdded = jsonObject.getString("date_added");
+            age = (DataHandler.isNull(jsonObject.getString("age"))) ? -1 : jsonObject.getInt("age");
+            ageType = (DataHandler.isNull(jsonObject.getString("age_type"))) ? "" : jsonObject.getString("age_type");
+
+            JSONArray breedArray = jsonObject.getJSONArray("breed");
+            this.breeds = new ArrayList<String>(breedArray.length());
+            for(int i = 0; i < breedArray.length(); i++){
+                this.breeds.add(breedArray.getString(i));
+            }
+
+            sex = jsonObject.getString("sex");
+
+            JSONArray deformityArray = jsonObject.getJSONArray("deformity");
+            this.deformities = new ArrayList<String>(deformityArray.length());
+            for(int i = 0; i < deformityArray.length(); i++){
+                this.deformities.add(deformityArray.getString(i));
+            }
+            otherDeformity = jsonObject.getString("other_deformity");
+
+            sire = new Sire();
+            dam = new Dam();
+
+            mode = "";
+            countryOfOrigin = jsonObject.getString("country");
+            serviceType = (DataHandler.isNull(jsonObject.getString("service_type"))) ? "" : jsonObject.getString("service_type");
+            otherBreed = "";
+            piggyBack = "";
+            this.events = new ArrayList<Event>();
+            this.milkProduction = new ArrayList<MilkProduction>();
+            if(this.sex.equals(SEX_MALE)){
+                milkingStatus = "";
+                inCalf = false;
+            }
+            else if(this.sex.equals(SEX_FEMALE)){
+                milkingStatus = (DataHandler.isNull(jsonObject.getString("milking_status"))) ? MILKING_S_ADULT_MILKING : jsonObject.getString("milking_status");
+                if(jsonObject.getString("in_calf").equals("1")){
+                    inCalf = true;
+                }
+                else{
+                    inCalf = false;
+                }
+            }
+        }
+        catch (Exception e){
+            e.printStackTrace();
+        }
+    }
+
+    /**
+     * This method returns the milking status of cow in english
+     *
+     * @return Milking status in English or a blank string if unable to
+     *          convert milking status to english text
+     */
+    public String getMilkingStatus() {
+        if(milkingStatus.equals(MILKING_S_HEIFER)){
+            return "Heifer";
+        }
+        else if(milkingStatus.equals(MILKING_S_ADULT_MILKING)){
+            return "Cow being milked";
+        }
+        else if(milkingStatus.equals(MILKING_S_ADULT_NOT_MILKING)){
+            return "Cow not being milked";
+        }
+        return "";
+    }
+
+    /**
+     * This method sets the milking status for the cow
+     *
+     * @param milkingStatus The milking status text (not code) in english
+     * @param context The activity/service you are calling this method from
+     */
+    public void setMilkingStatus(String milkingStatus, Context context) {
+        if(milkingStatus.equals("Heifer")){
+            this.milkingStatus = MILKING_S_HEIFER;
+        }
+        else if(milkingStatus.equals("Cow being milked")){
+            this.milkingStatus = MILKING_S_ADULT_MILKING;
+        }
+        else if(milkingStatus.equals("Cow not being milked")){
+            this.milkingStatus = MILKING_S_ADULT_NOT_MILKING;
+        }
+
+        Log.d(TAG, " ****************** Milking status now is  "+this.milkingStatus);
+    }
+
+    public void setMilkingStatus(String milkingStatus){
+        this.milkingStatus = milkingStatus;
+    }
+
+    /**
+     * This method returns the milking status code for the cow
+     * Compare with Cow.MILKING_S_HEIFER etc
+     *
+     * @return
+     */
+    public String getMilkingStatusCode() {
+        return this.milkingStatus;
+    }
+
+    public boolean isInCalf() {
+        return inCalf;
+    }
+
+    public void setInCalf(boolean inCalf) {
+        this.inCalf = inCalf;
+    }
+
+    public void setMode(String mode) {
+        this.mode = mode;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public void setEarTagNumber(String earTagNumber) {
+        this.earTagNumber = earTagNumber;
+    }
+
+    public void setDateOfBirth(String dateOfBirth) {
+        this.dateOfBirth = dateOfBirth;
+    }
+
+    public void setDateAdded(String dateAdded){
+        this.dateAdded = dateAdded;
+    }
+
+    public String getDateAdded(){
+        return dateAdded;
+    }
+
+    public void setAge(int age) {
+        this.age = age;
+    }
+
+    public void setAgeType(String ageType) {
+        this.ageType = ageType;
+    }
+
+    public void setBreeds(String[] breeds, Context context, boolean commonBreeds) {
+        if(breeds.length == 1){//might mean that there were no breeds
+            if(breeds[0].length() == 0){
+                Log.w(TAG, "Appears like the user did not specify any breed, Setting size of breed array to 0");
+                breeds = new String[0];
+            }
+        }
+
+        Log.d(TAG, "***** size of breeds = "+String.valueOf(breeds.length));
+        //translate breeds to english
+        String[] translatedBreeds  = null;
+        if(commonBreeds){
+            translatedBreeds =  Locale.translateArrayToEnglish(context, "c_breeds_array", breeds);//assuming that the breeds array is a member of c_breeds_array
+        }
+        else{
+            translatedBreeds =  Locale.translateArrayToEnglish(context, "breeds_array", breeds);//assuming that the breeds array is a member of c_breeds_array
+        }
+
+        this.breeds = new ArrayList<String>();
+        for (int i = 0; i < translatedBreeds.length; i++) {
+            this.breeds.add(translatedBreeds[i]);
+        }
+    }
+
+    public void setPiggyBack(String piggyBack) {
+        this.piggyBack = piggyBack;
+    }
+
+    public void setServiceType(String serviceType) {
+        this.serviceType = serviceType;
+    }
+
+    public void setOtherDeformity(String otherDeformity) {
+        this.otherDeformity = otherDeformity;
+        Log.d(TAG, "other deformity set to "+otherDeformity);
+    }
+
+    public void setOtherBreed(Context context, String otherBreed){
+        //translate to english
+        String translatedBreed = Locale.translateStringToEnglish(context, "breeds_array", otherBreed);
+        this.otherBreed = translatedBreed;
+    }
+
+    public String getOtherBreed(Context context){
+        //other breed stored here is in english
+        String translatedBreed = Locale.translateStringToLocale(context, "breeds_array", otherBreed);
+
+        return translatedBreed;
+    }
+
+    public void addBreed(Context context, String breed) {
+        //translate to english
+
+        String translatedString = Locale.translateStringToEnglish(context, "breeds_array", breed);//assuming here that breed is not going to be 'Other breed' string
+        this.breeds.add(translatedString);
+    }
+
+    public void setSex(String sex) {
+        this.sex = sex;
+    }
+
+    public void setDeformities(String[] deformities, Context context) {
+        if(deformities.length == 1){//might mean that there were no breeds
+            if(deformities[0].length() == 0){
+                Log.w(TAG, "Appears like user did not specify any deformity, setting size of deformity array to 0");
+                deformities = new String[0];
+            }
+        }
+
+        //translate to english
+        String[] translatedDeformities = Locale.translateArrayToEnglish(context, "deformities_array", deformities);
+
+        this.deformities = new ArrayList<String>();
+        for (int i = 0; i < translatedDeformities.length; i++) {
+            this.deformities.add(translatedDeformities[i]);
+        }
+    }
+
+    public void addDeformity(Context context, String deformity) {
+        //translate to english
+        String translatedDeformity = Locale.translateStringToEnglish(context, "deformities_array", deformity);
+
+        this.deformities.add(translatedDeformity);
+    }
+
+    public void setSire(Sire sire) {
+        this.sire = sire;
+    }
+
+    public void setDam(Dam dam) {
+        this.dam = dam;
+    }
+
+    public void setCountryOfOrigin(String countryOfOrigin) {
+        this.countryOfOrigin = countryOfOrigin;
+    }
+
+    public void addEvent(Event event){
+        this.events.add(event);
+    }
+
+    public void setEvents(List<Event> events){
+        this.events = events;
+    }
+
+    public void addMilkProduction(MilkProduction milkProduction){
+        this.milkProduction.add(milkProduction);
+    }
+
+    public void setMilkProduction(List<MilkProduction> milkProduction){
+        this.milkProduction = milkProduction;
+    }
+
+    public List<MilkProduction> getMilkProduction(){
+        return this.milkProduction;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public String getMode() {
+        return mode;
+    }
+
+    public String getEarTagNumber() {
+        return earTagNumber;
+    }
+
+    public String getDateOfBirth() {
+        return dateOfBirth;
+    }
+
+    public int getAge() {
+        return age;
+    }
+
+    public String getPiggyBack() {
+        return piggyBack;
+    }
+
+    public String getAgeType() {
+        return ageType;
+    }
+
+    public String getServiceType() {
+        return serviceType;
+    }
+
+    public String getOtherDeformity() {
+        Log.d(TAG,"other deformity is = "+otherDeformity);
+        return otherDeformity;
+    }
+
+    public List<String> getBreeds(Context context) {
+        //breeds stored in this object are in english, translate them to current locale
+        String[] stringArray = Locale.translateArrayToLocale(context, "c_breeds_array", breeds.toArray(new String[breeds.size()]));
+
+        List<String> translatedBreeds = new ArrayList<String>(Arrays.asList(stringArray));
+
+        return translatedBreeds;
+    }
+
+    public String getSex() {
+        return sex;
+    }
+
+    public List<String> getDeformities(Context context) {
+        //deformities are in english. translate them to current locale
+        String[] deformitiesInLocale = Locale.translateArrayToLocale(context, "deformities_array", deformities.toArray(new String[deformities.size()]));//TODO: not sure that will work
+
+        List<String> translatedDeformities = new ArrayList<String>(Arrays.asList(deformitiesInLocale));
+
+        return translatedDeformities;
+    }
+
+    public Sire getSire() {
+        return sire;//TODO: handle nullpointerexception
+    }
+
+    public Dam getDam() {
+        if (dam == null) {
+            Log.d(TAG, "dam is null");
+        }
+        return dam;
+    }
+
+    public String getCountryOfOrigin() {
+        return countryOfOrigin;
+    }
+
+    public List<Event> getEvents(){
+        return this.events;
+    }
+
+    public long getAgeMilliseconds(){
+        SimpleDateFormat dateFormat = new SimpleDateFormat(DOB_FORMAT);
+
+        long ageFromDOB = 0l;
+        if(!dateOfBirth.equals(DEFAULT_DOB)){
+            try {
+
+                Date dob=dateFormat.parse(this.dateOfBirth);
+                long dobMilliseconds = dob.getTime();
+
+                Date today = new Date();
+                ageFromDOB = today.getTime() - dobMilliseconds;
+            }
+            catch (ParseException e) {
+                e.printStackTrace();
+            }
+        }
+
+        long ageFromAge = 0l;
+        long ageUnits = 0l;
+        if(ageType.equals(AGE_TYPE_DAY)) ageUnits = 86400000l;
+        else if(ageType.equals(AGE_TYPE_MONTH)) ageUnits = 86400000l * 30;
+        else if(ageType.equals(AGE_TYPE_YEAR)) ageUnits = 86400000l * 365;
+
+        ageFromAge = ageUnits * this.age;
+        try {
+            Date dateAdded = dateFormat.parse(this.dateAdded);
+            long dateAddedMill = dateAdded.getTime();
+
+            Date today = new Date();
+
+            ageFromAge = ageFromAge + (today.getTime() - dateAddedMill);
+        }
+        catch (ParseException e) {
+            e.printStackTrace();
+        }
+
+
+
+        if(ageFromAge>ageFromDOB) {
+            Log.d(TAG, "We might want to use the cows age instead of date of birth");
+            Log.d(TAG, "Cows age "+this.ageType+" = "+String.valueOf(this.age));
+            Log.d(TAG, "Cows date of birth = "+this.dateOfBirth);
+            Log.d(TAG, "Age in milliseconds = "+String.valueOf(ageFromAge));
+            Log.d(TAG, "Alternate age = "+String.valueOf(ageFromDOB));
+            return ageFromAge;
+        }
+        else {
+            Log.d(TAG, "We might want to use the cows date of birth instead of age");
+            Log.d(TAG, "Cows age "+this.ageType+" = "+String.valueOf(this.age));
+            Log.d(TAG, "Cows date of birth = "+this.dateOfBirth);
+            Log.d(TAG, "Age in milliseconds = "+String.valueOf(ageFromDOB));
+            Log.d(TAG, "Alternate age = "+String.valueOf(ageFromAge));
+            return ageFromDOB;
+        }
+    }
+
+    public MilkProduction getLastMilking(String milkingTime){
+        MilkProduction lastMP = new MilkProduction();
+
+        long latestTime = 0;
+        int latestMPIndex = -1;
+        for(int i = 0; i < milkProduction.size(); i++){
+            MilkProduction currMP = milkProduction.get(i);
+            if(currMP.getTime().equals(milkingTime) && currMP.getDateMilliseconds() > latestTime){
+                latestTime = currMP.getDateMilliseconds();
+                latestMPIndex = i;
+            }
+        }
+
+        if(latestMPIndex != -1){
+            lastMP = milkProduction.get(latestMPIndex);
+        }
+
+        return lastMP;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(id);
+        dest.writeString(name);
+        dest.writeString(earTagNumber);
+        dest.writeString(dateOfBirth);
+        dest.writeInt(age);
+        dest.writeString(ageType);
+        dest.writeStringList(breeds);
+        dest.writeString(sex);
+        dest.writeStringList(deformities);
+        if (isNotDamOrSire) {
+            dest.writeInt(1);
+            dest.writeSerializable(sire);
+            dest.writeSerializable(dam);
+        } else {
+            dest.writeInt(0);
+        }
+
+        dest.writeString(countryOfOrigin);
+        dest.writeString(mode);
+        dest.writeString(serviceType);
+        dest.writeString(otherDeformity);
+        dest.writeString(otherBreed);
+        dest.writeString(piggyBack);
+        dest.writeString(milkingStatus);
+        if(isInCalf()){
+            dest.writeInt(1);
+        }
+        else{
+            dest.writeInt(0);
+        }
+    }
+
+    public void readFromParcel(Parcel in) {
+        id = in.readInt();
+        name = in.readString();
+        earTagNumber = in.readString();
+        dateOfBirth = in.readString();
+        age = in.readInt();
+        ageType = in.readString();
+        in.readStringList(breeds);
+        sex = in.readString();
+        in.readStringList(deformities);
+        int x = in.readInt();
+        if (x == 1)//isnotsireordam
+        {
+            this.isNotDamOrSire = true;
+            sire = (Sire) in.readSerializable();
+            dam = (Dam) in.readSerializable();
+        } else {
+            this.isNotDamOrSire = false;
+        }
+
+        countryOfOrigin = in.readString();
+        mode = in.readString();
+        serviceType = in.readString();
+        otherDeformity = in.readString();
+        otherBreed = in.readString();
+        piggyBack = in.readString();
+        milkingStatus = in.readString();
+        int inCalf = in.readInt();
+        if(inCalf == 1){
+            this.inCalf = true;
+        }
+        else{
+            this.inCalf = false;
+        }
+    }
+
+    public static final Creator<Cow> CREATOR = new Creator<Cow>() {
+        @Override
+        public Cow createFromParcel(Parcel source) {
+            return new Cow(source);
+        }
+
+        @Override
+        public Cow[] newArray(int size) {
+            return new Cow[size];
+        }
+    };
+
+    public JSONObject getJsonObject() {
+        JSONObject jsonObject = new JSONObject();
+        try {
+            jsonObject.put("id", id);
+            jsonObject.put("name", ((name == null) ? "" : name));
+            jsonObject.put("earTagNumber", ((earTagNumber == null) ? "" : earTagNumber));
+            jsonObject.put("dateOfBirth", ((dateOfBirth == null) ? "" : dateOfBirth));
+            jsonObject.put("age", age);
+            jsonObject.put("ageType", ageType);
+            JSONArray breedJsonArray = new JSONArray();
+            for (int i = 0; i < breeds.size(); i++) {
+                if(breeds.get(i).equals(OTHER_BREED)){
+                    breedJsonArray.put(i, otherBreed);//replace the value of 'other breed' with actual breed
+                }
+                else {
+                    breedJsonArray.put(i, breeds.get(i));
+                }
+            }
+
+            jsonObject.put("breeds", breedJsonArray);
+            jsonObject.put("sex", sex);
+            JSONArray deformityJsonArray = new JSONArray();
+            for (int i = 0; i < deformities.size(); i++) {
+                deformityJsonArray.put(i, deformities.get(i));
+            }
+            jsonObject.put("deformities", deformityJsonArray);
+            jsonObject.put("mode", ((mode == null) ? "" : mode));
+            jsonObject.put("serviceType", ((serviceType == null) ? "" : serviceType));
+            jsonObject.put("otherDeformity", ((otherDeformity == null) ? "" : otherDeformity));
+            jsonObject.put("countryOfOrigin", ((countryOfOrigin == null) ? "" : countryOfOrigin));
+            if (isNotDamOrSire) {
+                jsonObject.put("type", "cow");
+                jsonObject.put("sire", ((sire == null) ? "" : sire.getJsonObject()));
+                jsonObject.put("dam", ((dam == null) ? "" : dam.getJsonObject()));
+            }
+            if(piggyBack!=null && piggyBack.length()>0) {
+                jsonObject.put("piggyBack",piggyBack);
+            }
+            int inCalf = 0;
+            if(this.inCalf){
+                inCalf = 1;
+            }
+            jsonObject.put("inCalf", inCalf);
+            jsonObject.put("milkingStatus", milkingStatus);
+        } catch (JSONException e) {
+            e.printStackTrace();
+        }
+        return jsonObject;
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/Dam.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/Dam.java
new file mode 100644
index 0000000..07e7513
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/Dam.java
@@ -0,0 +1,84 @@
+package org.cgiar.ilri.np.farmer.carrier;
+
+import android.os.Parcel;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.Serializable;
+
+/**
+ * Created by jason on 8/5/13.
+ */
+public class Dam extends Cow implements Serializable
+{
+    private String embryoNumber;
+
+    public Dam()
+    {
+        super(false);
+        setSex(SEX_FEMALE);
+        embryoNumber="";
+    }
+
+    public Dam(Parcel source)
+    {
+        this();
+        readFromParcel(source);
+    }
+
+    public void setEmbryoNumber(String embryoNumber)
+    {
+        this.embryoNumber = embryoNumber;
+    }
+
+    public String getEmbryoNumber() {
+        return embryoNumber;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags)
+    {
+        super.writeToParcel(dest, flags);
+        dest.writeString(embryoNumber);
+    }
+
+
+    @Override
+    public void readFromParcel(Parcel in)
+    {
+        super.readFromParcel(in);
+        embryoNumber=in.readString();
+    }
+
+    public static final Creator<Dam> CREATOR = new Creator<Dam>()
+    {
+        @Override
+        public Dam createFromParcel(Parcel source)
+        {
+            return new Dam(source);
+        }
+
+        @Override
+        public Dam[] newArray(int size)
+        {
+            return new Dam[size];
+        }
+    };
+
+    @Override
+    public JSONObject getJsonObject()
+    {
+        JSONObject jsonObject=super.getJsonObject();
+        try
+        {
+            jsonObject.put("type","dam");
+            jsonObject.put("embryoNumber",((embryoNumber==null) ? "":embryoNumber));
+        }
+        catch (JSONException e)
+        {
+            e.printStackTrace();
+        }
+        return jsonObject;
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/Event.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/Event.java
new file mode 100644
index 0000000..68e8a56
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/Event.java
@@ -0,0 +1,151 @@
+package org.cgiar.ilri.np.farmer.carrier;
+
+import android.util.Log;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+/**
+ * Created by jrogena on 09/04/14.
+ */
+public class Event {
+    private static final String TAG = "Event";
+    private static final String DATE_FORMAT = "YYYY-MM-dd HH:mm:ss";
+    private int id;
+    private String eventDate;
+    private String birthType;
+    private int parentCowEventID;
+    private int bullID;
+    private int servicingDays;
+    private String cod;
+    private int noOfLiveBirths;
+    private String type;
+    private String remarks;
+    private boolean savedOnServer;
+    private String dateAdded;
+
+    public Event(){
+
+    }
+
+    public int getId() {
+        return id;
+    }
+
+    public void setId(int id) {
+        this.id = id;
+    }
+
+    public String getType(){
+        return this.type;
+    }
+
+    public void setType(String type){
+        this.type = type;
+    }
+
+    public String getRemarks(){
+        return this.remarks;
+    }
+
+    public void setRemarks(String remarks){
+        this.remarks = remarks;
+    }
+
+    public String getEventDate() {
+        return eventDate;
+    }
+
+    public void setDateAdded(String dateAdded){
+        this.dateAdded = dateAdded;
+    }
+
+    public String getDateAdded(){
+        return  dateAdded;
+    }
+
+    public long getDateAddedMillisecods(){
+        SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT);
+
+        long result = 0;
+
+        try {
+            Date dateAdded = dateFormat.parse(this.dateAdded);
+            result = dateAdded.getTime();
+        } catch (ParseException e) {
+            e.printStackTrace();
+        }
+
+        Log.d(TAG, "Event date added in milliseconds = "+String.valueOf(result));
+
+        return result;
+    }
+
+    public void setEventDate(String eventDate) {
+        this.eventDate = eventDate;
+    }
+
+    public String getBirthType() {
+        return birthType;
+    }
+
+    public void setBirthType(String birthType) {
+        this.birthType = birthType;
+    }
+
+    public int getParentCowEventID() {
+        return parentCowEventID;
+    }
+
+    public void setParentCowEventID(int parentCowEventID) {
+        this.parentCowEventID = parentCowEventID;
+    }
+
+    public int getBullID() {
+        return bullID;
+    }
+
+    public void setBullID(int bullID) {
+        this.bullID = bullID;
+    }
+
+    public int getServicingDays() {
+        return servicingDays;
+    }
+
+    public void setServicingDays(int servicingDays) {
+        this.servicingDays = servicingDays;
+    }
+
+    public boolean isServicingEvent(){
+        if(type.equals("Artificial Insemination") || type.equals("Bull Servicing")){
+            return true;
+        }
+        return false;
+    }
+
+    public void setSavedOnServer(boolean savedOnServer){
+        this.savedOnServer = savedOnServer;
+    }
+
+    public boolean getSavedOnServer(){
+        return savedOnServer;
+    }
+
+    public String getCod() {
+        return cod;
+    }
+
+    public void setCod(String cod) {
+        this.cod = cod;
+    }
+
+    public int getNoOfLiveBirths() {
+        return noOfLiveBirths;
+    }
+
+    public void setNoOfLiveBirths(int noOfLiveBirths) {
+        this.noOfLiveBirths = noOfLiveBirths;
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/EventConstraint.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/EventConstraint.java
new file mode 100644
index 0000000..866c028
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/EventConstraint.java
@@ -0,0 +1,88 @@
+package org.cgiar.ilri.np.farmer.carrier;
+
+import android.util.Log;
+
+/**
+ * Created by jrogena on 21/05/14.
+ */
+public class EventConstraint {
+    private final String TAG = "EventConstraint";
+    private final String UNIT_DAY = "Days";
+    private final String UNIT_MONTH = "Months";
+    private final String UNIT_YEAR = "Years";
+
+    public static final String CONSTRAINT_MATURITY = "Maturity";
+    public static final String CONSTRAINT_BIRTH_TO_LACTATION = "MaxTimeBirthLactation";
+    public static final String CONSTRAINT_MILKING = "Milking";
+    public static final String CONSTRAINT_CALVING = "Calving";
+    public static final String CONSTRAINT_MILK_FLACTUATION = "DeltaMilk";
+    public static final String CONSTRAINT_MILK_MAX_SITTING = "MaxMilkSitting";
+    public static final String CONSTRAINT_MILK_MAX_COMBINED = "MaxMilkCombined";
+
+    private int id;
+    private String event;
+    private int time;
+    private String timeUnits;
+
+    public EventConstraint(int id, String event, int time, String timeUnits) {
+        this.id = id;
+        this.event = event;
+        this.time = time;
+        this.timeUnits = timeUnits;
+    }
+
+    public int getId() {
+        return id;
+    }
+
+    public void setId(int id) {
+        this.id = id;
+    }
+
+    public String getEvent() {
+        return event;
+    }
+
+    public void setEvent(String event) {
+        this.event = event;
+    }
+
+    public int getTime() {
+        return time;
+    }
+
+    public void setTime(int time) {
+        this.time = time;
+    }
+
+    public String getTimeUnits() {
+        return timeUnits;
+    }
+
+    public void setTimeUnits(String timeUnits) {
+        this.timeUnits = timeUnits;
+    }
+
+    public long getTimeMilliseconds(){
+        long result = 0l;
+
+        long timeUnits = 0l;
+        if(this.timeUnits.equals(UNIT_DAY)) timeUnits = 86400000l;
+        else if(this.timeUnits.equals(UNIT_MONTH)) timeUnits = 86400000l * 30;//get number of milliseconds in a month
+        else if(this.timeUnits.equals(UNIT_YEAR)) timeUnits = 86400000l * 365;//get number of milliseconds in a year
+
+        result = timeUnits * this.time;
+
+        Log.d(TAG, "Event constraint Time milliseconds = "+String.valueOf(result));
+
+        return result;
+    }
+
+    public int getValue(){
+        return this.time;
+    }
+
+    public String getUnits(){
+        return this.timeUnits;
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/Farmer.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/Farmer.java
new file mode 100644
index 0000000..aca4c5c
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/Farmer.java
@@ -0,0 +1,351 @@
+package org.cgiar.ilri.np.farmer.carrier;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.util.Log;
+
+import org.cgiar.ilri.np.farmer.backend.DataHandler;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Created by jason on 8/5/13.
+ */
+public class Farmer implements Parcelable, Serializable
+{
+    public static final String TAG="Farmer";
+    public static final String PARCELABLE_KEY="farmer";
+    public static final String MODE_INITIAL_REGISTRATION = "initialRegistration";
+    public static final String MODE_NEW_COW_REGISTRATION = "newCowRegistration";
+    public static final String MODE_EDIT_FARMER = "editFarmer";
+    public static final String MODE_EDIT_COW = "editCow";
+    private int id;
+    private String fullName;
+    private String extensionPersonnel;
+    private String mobileNumber;
+    private List<Cow> cows;
+    private String longitude;
+    private String latitude;
+    private String simCardSN;
+    private String mode;
+    private String preferredLocale;
+    private boolean isInFarm;
+    private String site;
+    private boolean isActive;
+
+    public Farmer()
+    {
+        fullName="";
+        extensionPersonnel="";
+        mobileNumber="";
+        this.cows=new ArrayList<Cow>();
+        longitude="";
+        latitude="";
+        simCardSN ="";
+        mode = "";
+        preferredLocale = "";
+        isInFarm = false;
+        id = -1;
+        site = "";
+        isActive = true;
+    }
+
+    public Farmer(Parcel source)
+    {
+        this();
+        readFromParcel(source);
+    }
+
+    public Farmer(JSONObject farmerJsonObject){
+        try{
+            //Log.d(TAG, "Json for this farmer = "+farmerJsonObject.toString());
+            id = farmerJsonObject.getInt("id");
+            fullName = farmerJsonObject.getString("name");
+            this.extensionPersonnel = (DataHandler.isNull(farmerJsonObject.getString("extension_personnel"))) ? "" : farmerJsonObject.getString("extension_personnel");
+            mobileNumber = farmerJsonObject.getString("mobile_no");
+            longitude = farmerJsonObject.getString("gps_longitude");
+            latitude = farmerJsonObject.getString("gps_latitude");
+            simCardSN = farmerJsonObject.getString("sim_card_sn");
+            preferredLocale = farmerJsonObject.getString("pref_locale");
+            site = (DataHandler.isNull(farmerJsonObject.getString("location_district"))) ? "" : farmerJsonObject.getString("location_district");
+            if(farmerJsonObject.getInt("is_active") == 1){
+                isActive = true;
+            }
+            else{
+                isActive = false;
+            }
+            isInFarm = false;
+        }
+        catch (Exception e){
+            e.printStackTrace();
+        }
+    }
+
+    public int getId(){
+        return id;
+    }
+
+    public void setCows(JSONArray cowArray){
+        cows = new ArrayList<Cow>(cowArray.length());
+        for(int i = 0; i < cowArray.length(); i++){
+            Cow currCow = new Cow(cowArray, i);
+            cows.add(currCow);
+        }
+    }
+
+    public void setFullName(String fullName)
+    {
+        this.fullName = fullName;
+    }
+
+    public void setMode(String mode) {
+        this.mode = mode;
+    }
+
+    public void setExtensionPersonnel(String extensionPersonnel)
+    {
+        this.extensionPersonnel = extensionPersonnel;
+    }
+
+    public void setMobileNumber(String mobileNumber)
+    {
+        this.mobileNumber = mobileNumber;
+    }
+
+    public int getCowNumber()
+    {
+        return cows.size();
+    }
+
+    public String getMode() {
+        return this.mode;
+    }
+
+    /**
+     * This methods inits the number of cows the farmer has.
+     * Be warned that calling this function when this farmer object
+     * already has cows will invalidate the previous cows.
+     *
+     * @param number    The number of cows
+     */
+    public void setCowNumber(int number)
+    {
+        this.cows=new ArrayList<Cow>();
+        for (int i=0;i<number;i++)
+        {
+            cows.add(new Cow(true));
+        }
+    }
+
+    public void setCows(List<Cow> cows)
+    {
+        this.cows = cows;
+    }
+    public void setCow(Cow cow, int index)
+    {
+        if(index<cows.size())
+        {
+            cows.set(index,cow);
+        }
+        else
+        {
+            Log.e(TAG,"Trying to add cow in index greater than size of Cow list");
+        }
+    }
+
+    public String getPreferredLocale() {
+        return preferredLocale;
+    }
+
+    public void setPreferredLocale(String preferredLocale) {
+        this.preferredLocale = preferredLocale;
+    }
+
+    public void addCow(Cow cow)
+    {
+        this.cows.add(cow);
+    }
+
+    public void setLongitude(String longitude)
+    {
+        this.longitude = longitude;
+    }
+
+    public void setLatitude(String latitude)
+    {
+        this.latitude = latitude;
+    }
+
+    public void setSimCardSN(String simCardSN)
+    {
+        this.simCardSN = simCardSN;
+    }
+
+    public String getFullName() {
+        return fullName;
+    }
+
+    public String getExtensionPersonnel() {
+        return extensionPersonnel;
+    }
+
+    public String getMobileNumber() {
+        return mobileNumber;
+    }
+
+    public List<Cow> getCows() {
+        return cows;
+    }
+
+    public boolean isInFarm(){
+        return isInFarm;
+    }
+
+    public String getSite() {
+        return site;
+    }
+
+    public void setSite(String site) {
+        this.site = site;
+    }
+
+    public boolean isActive() {
+        return isActive;
+    }
+
+    public void setActive(boolean isActive) {
+        this.isActive = isActive;
+    }
+
+    public List<Cow> getCows(String sex){
+        List<Cow> newCowList = new ArrayList<Cow>();
+
+        //get all cows with the specific sex
+        for(int i = 0; i < cows.size(); i++){
+            if(cows.get(i).getSex().equals(sex))
+                newCowList.add(cows.get(i));
+        }
+        return newCowList;
+    }
+
+    public Cow getCow(int index)
+    {
+        if(index<cows.size())
+            return cows.get(index);
+        else
+            return null;
+    }
+
+    public String getLongitude() {
+        return longitude;
+    }
+
+    public String getLatitude() {
+        return latitude;
+    }
+
+    public String getSimCardSN()
+    {
+        return simCardSN;
+    }
+
+    @Override
+    public int describeContents()
+    {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags)
+    {
+        dest.writeInt(id);
+        dest.writeString(fullName);
+        dest.writeString(extensionPersonnel);
+        dest.writeString(mobileNumber);
+        dest.writeTypedList(cows);
+        dest.writeString(longitude);
+        dest.writeString(latitude);
+        dest.writeString(simCardSN);
+        dest.writeString(mode);
+        if(isInFarm) dest.writeInt(1);
+        else dest.writeInt(0);
+        dest.writeString(preferredLocale);
+        dest.writeString(site);
+        if(isActive) dest.writeInt(1);
+        else dest.writeInt(0);
+    }
+
+    public void readFromParcel(Parcel in)
+    {
+        this.id = in.readInt();
+        this.fullName=in.readString();
+        this.extensionPersonnel=in.readString();
+        this.mobileNumber=in.readString();
+        in.readTypedList(cows,Cow.CREATOR);
+        this.longitude=in.readString();
+        this.latitude=in.readString();
+        this.simCardSN =in.readString();
+        this.mode = in.readString();
+
+        int isInFarm = in.readInt();
+        if(isInFarm == 1) this.isInFarm = true;
+        else this.isInFarm = false;
+        this.preferredLocale = in.readString();
+        this.site = in.readString();
+        int isActive = in.readInt();
+        if(isActive == 1 ) this.isActive = true;
+        else this.isActive = false;
+    }
+
+    public static final Creator<Farmer> CREATOR=new Creator<Farmer>()
+    {
+        @Override
+        public Farmer createFromParcel(Parcel source)
+        {
+            return new Farmer(source);
+        }
+
+        @Override
+        public Farmer[] newArray(int size)
+        {
+            return new Farmer[size];
+        }
+    };
+
+    public JSONObject getJsonObject()
+    {
+        JSONObject jsonObject=new JSONObject();
+        try
+        {
+            jsonObject.put("id", id);
+            jsonObject.put("fullName",((fullName==null) ? "":fullName));
+            jsonObject.put("extensionPersonnel",((extensionPersonnel==null) ? "":extensionPersonnel));
+            jsonObject.put("mobileNumber",((mobileNumber==null) ? "":mobileNumber));
+            JSONArray cowsJsonArray=new JSONArray();
+            for (int i=0;i<cows.size();i++)
+            {
+                cowsJsonArray.put(i,cows.get(i).getJsonObject());
+            }
+            jsonObject.put("cows",cowsJsonArray);
+            jsonObject.put("longitude",((longitude==null) ? "":longitude));
+            jsonObject.put("latitude",((latitude==null) ? "":latitude));
+            jsonObject.put("simCardSN",((simCardSN ==null) ? "": simCardSN));
+            jsonObject.put("mode",((mode ==null) ? "": mode));
+            jsonObject.put("preferredLocale", preferredLocale);
+            jsonObject.put("site", site);
+            int isActive = 1;
+            if(this.isActive == false) isActive = 0;
+            jsonObject.put("isActive", isActive);
+        }
+        catch (JSONException e)
+        {
+            e.printStackTrace();
+        }
+        return  jsonObject;
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/MilkProduction.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/MilkProduction.java
new file mode 100644
index 0000000..43db08c
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/MilkProduction.java
@@ -0,0 +1,95 @@
+package org.cgiar.ilri.np.farmer.carrier;
+
+import java.text.SimpleDateFormat;
+
+/**
+ * Created by jason on 4/28/14.
+ */
+public class MilkProduction {
+    private static final String TAG = "MilkProduction";
+    public static final String TIME_MORNING = "Morning";
+    public static final String TIME_AFTERNOON = "Afternoon";
+    public static final String TIME_EVENING = "Evening";
+    public static final String TIME_COMBINED = "Combined";
+    public static final String QUANTITY_TYPE_LITRES = "Litres";
+    public static final String QUANTITY_TYPE_KGS = "KGs";
+    private static final String DATE_FORMAT = "yyyy-MM-dd";
+    private int id;
+    private String time;
+    private float quantity;
+    private String dateAdded;
+    private String date;
+    private String quantityType;
+
+
+    public MilkProduction(){
+        id = -1;
+        time = "";
+        quantity = -1;
+        dateAdded = "";
+        date = "";
+        quantityType = "";
+    }
+
+    public int getId() {
+        return id;
+    }
+
+    public void setId(int id) {
+        this.id = id;
+    }
+
+    public String getTime() {
+        return time;
+    }
+
+    public void setTime(String time) {
+        this.time = time;
+    }
+
+    public float getQuantity() {
+        return quantity;
+    }
+
+    public void setQuantity(float quantity) {
+        this.quantity = quantity;
+    }
+
+    public String getDateAdded() {
+        return dateAdded;
+    }
+
+    public void setDateAdded(String dateAdded) {
+        this.dateAdded = dateAdded;
+    }
+
+    public String getDate() {
+        return date;
+    }
+
+    public void setDate(String date) {
+        this.date = date;
+    }
+
+    public long getDateMilliseconds(){
+        long result = 0;
+
+        try{
+            SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT);
+            result = dateFormat.parse(this.date).getTime();
+        }
+        catch (Exception e){
+            e.printStackTrace();
+        }
+
+        return result;
+    }
+
+    public String getQuantityType() {
+        return quantityType;
+    }
+
+    public void setQuantityType(String quantityType) {
+        this.quantityType = quantityType;
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/Sire.java b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/Sire.java
new file mode 100644
index 0000000..f4b1dd5
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/np/farmer/carrier/Sire.java
@@ -0,0 +1,109 @@
+package org.cgiar.ilri.np.farmer.carrier;
+
+import android.os.Parcel;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.Serializable;
+
+/**
+ * Created by jason on 8/5/13.
+ */
+public class Sire extends Cow implements Serializable
+{
+    public static final String SIRE_OWNER_OWN_BULL = "";
+    private String strawNumber;
+    private String owner;
+    private String ownerType;
+
+    public Sire()
+    {
+        super(false);
+        setSex(SEX_MALE);
+        strawNumber="";
+        owner = "";
+        ownerType = "";
+    }
+
+    public Sire(Parcel source) {
+        this();
+        readFromParcel(source);
+    }
+
+    public void setStrawNumber(String strawNumber)
+    {
+        this.strawNumber = strawNumber;
+    }
+
+    public String getStrawNumber() {
+        return strawNumber;
+    }
+
+    public void setOwner(String owner){
+        this.owner = owner;
+    }
+
+    public String getOwner(){
+        return this.owner;
+    }
+
+    public String getOwnerType() {
+        return ownerType;
+    }
+
+    public void setOwnerType(String ownerType) {
+        this.ownerType = ownerType;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags)
+    {
+        super.writeToParcel(dest, flags);
+        dest.writeString(strawNumber);
+        dest.writeString(owner);
+        dest.writeString(ownerType);
+    }
+
+    @Override
+    public void readFromParcel(Parcel in)
+    {
+        super.readFromParcel(in);
+        strawNumber=in.readString();
+        owner=in.readString();
+        ownerType=in.readString();
+    }
+
+    public static final Creator<Sire> CREATOR=new Creator<Sire>()
+    {
+        @Override
+        public Sire createFromParcel(Parcel source)
+        {
+            return new Sire(source);
+        }
+
+        @Override
+        public Sire[] newArray(int size)
+        {
+            return new Sire[size];
+        }
+    };
+
+    @Override
+    public JSONObject getJsonObject()
+    {
+        JSONObject jsonObject=super.getJsonObject();
+        try
+        {
+            jsonObject.put("type","sire");
+            jsonObject.put("strawNumber",((strawNumber==null) ? "":strawNumber));
+            jsonObject.put("owner", owner);
+            jsonObject.put("ownerType", ownerType);
+        }
+        catch (JSONException e)
+        {
+            e.printStackTrace();
+        }
+        return jsonObject;
+    }
+}
-- 
2.7.1

