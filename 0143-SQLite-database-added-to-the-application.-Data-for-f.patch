From 2e0960bdbf6184913c9280f046967fc27f825d29 Mon Sep 17 00:00:00 2001
From: Jason Rogena <j.rogena@cgiar.org>
Date: Fri, 11 Apr 2014 10:08:28 +0300
Subject: [PATCH 143/213] SQLite database added to the application. Data for
 farmer, cows and events prefetched during authentication and cached in the
 database

---
 .../cgiar/ilri/mistro/farmer/AddEventActivity.java |  69 +++---
 .../mistro/farmer/AddMilkProductionActivity.java   |  98 +++-----
 .../cgiar/ilri/mistro/farmer/LandingActivity.java  |  51 +++--
 .../org/cgiar/ilri/mistro/farmer/MainMenu.java     |  28 ++-
 .../ilri/mistro/farmer/backend/DataHandler.java    | 248 ++++++++++++++++++++-
 .../farmer/backend/database/DatabaseHelper.java    | 176 +++++++++++++++
 .../org/cgiar/ilri/mistro/farmer/carrier/Cow.java  |  14 ++
 .../cgiar/ilri/mistro/farmer/carrier/Event.java    | 102 +++++++++
 .../cgiar/ilri/mistro/farmer/carrier/Farmer.java   |  11 +
 MistroFarmer/src/main/res/values/strings_en.xml    |   3 +
 MistroFarmer/src/main/res/values/strings_sw.xml    |   3 +
 11 files changed, 673 insertions(+), 130 deletions(-)
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/database/DatabaseHelper.java
 create mode 100644 MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Event.java

diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddEventActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddEventActivity.java
index 8300077..0f60fa5 100644
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddEventActivity.java
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddEventActivity.java
@@ -100,6 +100,7 @@ public class AddEventActivity extends SherlockActivity implements View.OnClickLi
     private String loadingPleaseWait;
     private List<Integer> servicingIDs;
     private List<String> servicingTypes;
+    private Farmer farmer;
 
     private String presetMode;
     private String presetServicingType;
@@ -886,8 +887,7 @@ public class AddEventActivity extends SherlockActivity implements View.OnClickLi
         }
     }
 
-    private class CowIdentifierThread extends AsyncTask<String,Integer,String>
-    {
+    private class CowIdentifierThread extends AsyncTask<String,Integer,Farmer> {
 
         private ProgressDialog progressDialog;
 
@@ -898,48 +898,34 @@ public class AddEventActivity extends SherlockActivity implements View.OnClickLi
         }
 
         @Override
-        protected String doInBackground(String... params)
-        {
-            JSONObject jsonObject=new JSONObject();
-            try
-            {
-                jsonObject.put("simCardSN",params[0]);
-                String result= DataHandler.sendDataToServer(AddEventActivity.this, jsonObject.toString(), DataHandler.FARMER_FETCH_COW_IDENTIFIERS_URL, true);
-                return result;
-            }
-            catch (JSONException e)
-            {
-                e.printStackTrace();
-            }
-            return null;
+        protected Farmer doInBackground(String... params) {
+            Farmer farmer = DataHandler.getFarmerData(AddEventActivity.this);
+            return farmer;
         }
 
         @Override
-        protected void onPostExecute(String result)
-        {
-            super.onPostExecute(result);
+        protected void onPostExecute(Farmer farmer) {
+            super.onPostExecute(farmer);
             progressDialog.dismiss();
-            try
-            {
-                JSONObject jsonObject=new JSONObject(result);
-                JSONArray cowNamesArray=jsonObject.getJSONArray("cowNames");
-                JSONArray earTagNumbersArray=jsonObject.getJSONArray("earTagNumbers");
-                JSONArray sexTextArray = jsonObject.getJSONArray("sex");
-                String[] cowArray=new String[cowNamesArray.length()];
-                String[] earTagArray=new String[cowNamesArray.length()];
-                String[] sexArray=new String[cowNamesArray.length()];
-                List<String> femaleList = new ArrayList<String>();
-                for(int i=0;i<cowNamesArray.length();i++)
-                {
-                    cowArray[i]=cowNamesArray.get(i).toString();
-                    earTagArray[i]=earTagNumbersArray.get(i).toString();
-                    sexArray[i]=sexTextArray.get(i).toString();
+
+            if(farmer == null){
+                Toast.makeText(AddEventActivity.this, Locale.getStringInLocale("unable_to_fetch_cached_data", AddEventActivity.this),Toast.LENGTH_LONG).show();
+            }
+            else{
+                AddEventActivity.this.farmer = farmer;
+                List<Cow> cows = farmer.getCows();
+                String[] cowArray=new String[cows.size()];
+                String[] earTagArray=new String[cows.size()];
+                String[] sexArray=new String[cows.size()];
+
+                for(int i=0;i<cows.size();i++) {
+                    cowArray[i]=cows.get(i).getName();
+                    earTagArray[i]=cows.get(i).getEarTagNumber();
+                    sexArray[i]=cows.get(i).getSex();
                 }
-                //TODO: warn user if no cows
-                if(cowArray.length==0)
-                {
-                    //Toast.makeText(AddEventActivity.this, Locale.getStringInLocale("no_data_received",AddEventActivity.this), Toast.LENGTH_LONG).show();
-                    Log.w(TAG, "No data received from the server");
+
+                if(cowArray.length==0) {
+                    Toast.makeText(AddEventActivity.this, Locale.getStringInLocale("you_do_not_have_cows", AddEventActivity.this),Toast.LENGTH_LONG).show();
                 }
                 AddEventActivity.this.cowNameArray =cowArray;
                 AddEventActivity.this.cowEarTagNumberArray=earTagArray;
@@ -958,11 +944,6 @@ public class AddEventActivity extends SherlockActivity implements View.OnClickLi
                 }
                 setCowIdentifiers(identifierArray);
             }
-            catch (JSONException e)
-            {
-                e.printStackTrace();
-            }
-
         }
     }
 
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddMilkProductionActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddMilkProductionActivity.java
index 69a915d..0f13a06 100644
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddMilkProductionActivity.java
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/AddMilkProductionActivity.java
@@ -30,6 +30,7 @@ import com.actionbarsherlock.view.MenuItem;
 import org.cgiar.ilri.mistro.farmer.backend.DataHandler;
 import org.cgiar.ilri.mistro.farmer.backend.Locale;
 import org.cgiar.ilri.mistro.farmer.carrier.Cow;
+import org.cgiar.ilri.mistro.farmer.carrier.Farmer;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -39,6 +40,7 @@ import java.text.SimpleDateFormat;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.GregorianCalendar;
+import java.util.List;
 
 public class AddMilkProductionActivity extends SherlockActivity implements View.OnClickListener, DatePickerDialog.OnDateSetListener {
 
@@ -64,6 +66,7 @@ public class AddMilkProductionActivity extends SherlockActivity implements View.
     private DatePickerDialog datePickerDialog;
     private Menu menu;
 
+    private Farmer farmer;
     private String[] cowNameArray;
     private String[] cowEarTagNumberArray;
     private String[] quantityTypes;
@@ -409,7 +412,7 @@ public class AddMilkProductionActivity extends SherlockActivity implements View.
         }
     }
 
-    private class CowIdentifierThread extends AsyncTask<String,Integer,String>
+    private class CowIdentifierThread extends AsyncTask<String,Integer,Farmer>
     {
         private ProgressDialog progressDialog;
 
@@ -420,81 +423,52 @@ public class AddMilkProductionActivity extends SherlockActivity implements View.
         }
 
         @Override
-        protected String doInBackground(String... params)
+        protected Farmer doInBackground(String... params)
         {
-            JSONObject jsonObject=new JSONObject();
-            try
-            {
-                jsonObject.put("simCardSN",params[0]);
-                jsonObject.put("cowSex", Cow.SEX_FEMALE);
-                String result=DataHandler.sendDataToServer(AddMilkProductionActivity.this, jsonObject.toString(),DataHandler.FARMER_FETCH_COW_IDENTIFIERS_URL, true);
-                return result;
-            }
-            catch (JSONException e)
-            {
-                e.printStackTrace();
-            }
-            return null;
+            Farmer farmer = DataHandler.getFarmerData(AddMilkProductionActivity.this);
+            return farmer;
         }
 
         @Override
-        protected void onPostExecute(String result)
+        protected void onPostExecute(Farmer farmer)
         {
-            super.onPostExecute(result);
+            super.onPostExecute(farmer);
             progressDialog.dismiss();
-            if(result == null ){
-                Toast.makeText(AddMilkProductionActivity.this,"server error",Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_GENERIC_FAILURE)){
-                Toast.makeText(AddMilkProductionActivity.this, Locale.getStringInLocale("generic_sms_error", AddMilkProductionActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_NO_SERVICE)){
-                Toast.makeText(AddMilkProductionActivity.this, Locale.getStringInLocale("no_service", AddMilkProductionActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RADIO_OFF)){
-                Toast.makeText(AddMilkProductionActivity.this, Locale.getStringInLocale("radio_off", AddMilkProductionActivity.this), Toast.LENGTH_LONG).show();
-            }
-            else if(result.equals(DataHandler.SMS_ERROR_RESULT_CANCELLED)){
-                Toast.makeText(AddMilkProductionActivity.this, Locale.getStringInLocale("server_not_receive_sms", AddMilkProductionActivity.this), Toast.LENGTH_LONG).show();
+            if(farmer == null ){
+                Toast.makeText(AddMilkProductionActivity.this, Locale.getStringInLocale("unable_to_fetch_cached_data", AddMilkProductionActivity.this),Toast.LENGTH_LONG).show();
             }
             else{
-                try
+                AddMilkProductionActivity.this.farmer = farmer;
+
+                //get cow names and ear tag numbers
+                List<Cow> cows = farmer.getCows(Cow.SEX_FEMALE);
+
+                String[] cowArray=new String[cows.size()];
+                String[] earTagArray=new String[cows.size()];
+                for(int i=0;i<cows.size();i++) {
+                    cowArray[i]=cows.get(i).getName();
+                    earTagArray[i]=cows.get(i).getEarTagNumber();
+                }
+
+                if(cowArray.length==0) {
+                    Toast.makeText(AddMilkProductionActivity.this, Locale.getStringInLocale("you_do_not_have_female_cows", AddMilkProductionActivity.this),Toast.LENGTH_LONG).show();
+                }
+
+                AddMilkProductionActivity.this.cowNameArray =cowArray;
+                AddMilkProductionActivity.this.cowEarTagNumberArray=earTagArray;
+                String[] identifierArray=new String[cowArray.length];
+                for (int i=0;i<cowArray.length;i++)
                 {
-                    JSONObject jsonObject=new JSONObject(result);
-                    JSONArray cowNamesArray=jsonObject.getJSONArray("cowNames");
-                    JSONArray earTagNumbersArray=jsonObject.getJSONArray("earTagNumbers");
-                    String[] cowArray=new String[cowNamesArray.length()];
-                    String[] earTagArray=new String[cowNamesArray.length()];
-                    for(int i=0;i<cowNamesArray.length();i++)
+                    if(cowArray[i]!=null&&!cowArray[i].equals(""))
                     {
-                        cowArray[i]=cowNamesArray.get(i).toString();
-                        earTagArray[i]=earTagNumbersArray.get(i).toString();
+                        identifierArray[i]=cowArray[i];
                     }
-                    //TODO: warn user if no cows
-                    if(cowArray.length==0)
+                    else
                     {
-                        Toast.makeText(AddMilkProductionActivity.this,"no cows fetched",Toast.LENGTH_LONG).show();
+                        identifierArray[i]=earTagArray[i];
                     }
-                    AddMilkProductionActivity.this.cowNameArray =cowArray;
-                    AddMilkProductionActivity.this.cowEarTagNumberArray=earTagArray;
-                    String[] identifierArray=new String[cowArray.length];
-                    for (int i=0;i<cowArray.length;i++)
-                    {
-                        if(cowArray[i]!=null&&!cowArray[i].equals(""))
-                        {
-                            identifierArray[i]=cowArray[i];
-                        }
-                        else
-                        {
-                            identifierArray[i]=earTagArray[i];
-                        }
-                    }
-                    setCowIdentifiers(identifierArray);
-                }
-                catch (JSONException e)
-                {
-                    e.printStackTrace();
                 }
+                setCowIdentifiers(identifierArray);
             }
 
         }
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/LandingActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/LandingActivity.java
index f38ab36..afe90c1 100644
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/LandingActivity.java
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/LandingActivity.java
@@ -243,19 +243,14 @@ public class LandingActivity extends SherlockActivity implements View.OnClickLis
                 showRegisterOrLoginDialog();
             }
             else {
-                try{
-                    JSONObject jsonObject = new JSONObject(result);
-                    String longitude = jsonObject.getString("gps_longitude");
-                    String latitude = jsonObject.getString("gps_latitude");
-                    Toast.makeText(LandingActivity.this, welcomeText+" "+jsonObject.getString("name"),Toast.LENGTH_LONG).show();
-                    Intent intent=new Intent(LandingActivity.this,MainMenu.class);
-                    intent.putExtra(MainMenu.KEY_LATITUDE,latitude);
-                    intent.putExtra(MainMenu.KEY_LONGITUDE,longitude);
-                    startActivity(intent);
-                }
-                catch (JSONException e){
-                    e.printStackTrace();
-                }
+                //save farmer data in the database
+                SaveFarmerDataThread saveFarmerDataThread = new SaveFarmerDataThread();
+                saveFarmerDataThread.execute(result);
+
+                Intent intent=new Intent(LandingActivity.this,MainMenu.class);
+                Log.d(TAG, result);
+                intent.putExtra(MainMenu.KEY_FARMER_DATA, result);
+                startActivity(intent);
             }
         }
 
@@ -336,10 +331,9 @@ public class LandingActivity extends SherlockActivity implements View.OnClickLis
             Log.d(TAG,"sim card registration *****"+result);
             if(result==null)
             {
-                Toast.makeText(LandingActivity.this,"Server Error",Toast.LENGTH_LONG).show();
+                Toast.makeText(LandingActivity.this, Locale.getStringInLocale("problem_connecting_to_server", LandingActivity.this),Toast.LENGTH_LONG).show();
             }
-            else if(result.equals(DataHandler.CODE_USER_NOT_AUTHENTICATED))
-            {
+            else if(result.equals(DataHandler.CODE_USER_NOT_AUTHENTICATED)) {
                 Utils.showGenericAlertDialog(LandingActivity.this,simCardRegistrationText,oldNumberNotInSystemText,okayText,null,null,null);
             }
             else if(result.equals(DataHandler.CODE_SIM_CARD_REGISTERED))
@@ -349,4 +343,29 @@ public class LandingActivity extends SherlockActivity implements View.OnClickLis
             }
         }
     }
+
+    private class SaveFarmerDataThread extends AsyncTask<String, Integer, Integer>{
+
+        @Override
+        protected Integer doInBackground(String... params) {
+            Log.d(TAG, "About to save farmer data in the database");
+
+            try {
+                JSONObject farmerData = new JSONObject(params[0]);
+                DataHandler.saveFarmerData(LandingActivity.this, farmerData);
+            } catch (JSONException e) {
+                e.printStackTrace();
+            }
+
+            return 0;
+        }
+
+        @Override
+        protected void onPostExecute(Integer integer) {
+            super.onPostExecute(integer);
+
+            Log.d(TAG, "Finished caching farmer data in SQLite database");
+        }
+    }
+
 }
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MainMenu.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MainMenu.java
index 212912e..a156582 100644
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MainMenu.java
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/MainMenu.java
@@ -32,12 +32,12 @@ public class MainMenu extends SherlockActivity implements View.OnClickListener,
     private static final String TAG="MainMenu";
     public static final String KEY_LONGITUDE = "longitude";
     public static final String KEY_LATITUDE = "latitude";
+    public static final String KEY_FARMER_DATA = "farmerData";
     private Button milkProductionB;
     private Button fertilityB;
     private Button eventsB;
     private Button logoutB;
-    private String regLatitude;
-    private String regLongitude;
+    private JSONObject farmerData;
     private LocationManager locationManager;
     private String longitude;
     private String latitude;
@@ -59,9 +59,17 @@ public class MainMenu extends SherlockActivity implements View.OnClickListener,
 
         Bundle bundle=this.getIntent().getExtras();
         if(bundle != null){
-            regLatitude = bundle.getString(KEY_LATITUDE);
-            regLongitude = bundle.getString(KEY_LONGITUDE);
-            registerCoords();
+            String farmerJSONString = bundle.getString(KEY_FARMER_DATA);
+
+            try{
+                farmerData = new JSONObject(farmerJSONString);
+                registerCoords();
+
+                Toast.makeText(this, Locale.getStringInLocale("welcome", this)+" "+farmerData.getString("name"), Toast.LENGTH_LONG).show();
+            }
+            catch (Exception e){
+                e.printStackTrace();
+            }
         }
 
         initTextInViews();
@@ -123,8 +131,14 @@ public class MainMenu extends SherlockActivity implements View.OnClickListener,
     }
 
     private void registerCoords(){
-        if(regLongitude==null || regLongitude.trim().length()==0 || regLatitude==null || regLatitude.trim().length()==0){
-            buildGPSAlert();
+        try {
+            String regLongitude = farmerData.getString("gps_longitude");
+            String regLatitude = farmerData.getString("gps_latitude");
+            if(regLongitude==null || regLongitude.trim().length()==0 || regLatitude==null || regLatitude.trim().length()==0){
+                buildGPSAlert();
+            }
+        } catch (JSONException e) {
+            e.printStackTrace();
         }
     }
 
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/DataHandler.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/DataHandler.java
index e2506e7..57ddc26 100644
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/DataHandler.java
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/DataHandler.java
@@ -9,11 +9,13 @@ import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.SharedPreferences;
+import android.database.sqlite.SQLiteDatabase;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
 import android.os.Bundle;
 import android.telephony.SmsManager;
 import android.telephony.SmsMessage;
+import android.telephony.TelephonyManager;
 import android.util.Log;
 
 import org.cgiar.ilri.mistro.farmer.R;
@@ -30,6 +32,12 @@ import org.apache.http.params.BasicHttpParams;
 import org.apache.http.params.HttpConnectionParams;
 import org.apache.http.params.HttpParams;
 import org.cgiar.ilri.mistro.farmer.Utils;
+import org.cgiar.ilri.mistro.farmer.backend.database.DatabaseHelper;
+import org.cgiar.ilri.mistro.farmer.carrier.Cow;
+import org.cgiar.ilri.mistro.farmer.carrier.Dam;
+import org.cgiar.ilri.mistro.farmer.carrier.Event;
+import org.cgiar.ilri.mistro.farmer.carrier.Farmer;
+import org.cgiar.ilri.mistro.farmer.carrier.Sire;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -111,6 +119,13 @@ public class DataHandler
     public static final String SMS_ERROR_RADIO_OFF = "sms_radio_off_error";
     public static final String SMS_ERROR_RESULT_CANCELLED = "sms_result_cancelled_error";
 
+    /**
+     * This method checks whether the application can access the internet
+     *
+     * @param context   The activity/service from where you want to check for the connection
+     *
+     * @return  True if the application can connect to the internet and False if not
+     */
     public static boolean checkNetworkConnection(Context context){
         ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
         NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();
@@ -123,8 +138,11 @@ public class DataHandler
     }
 
     /**
+     * This method checks if an internet connection is available and asks the user whether it can use SMS instead
+     * if no internet connection is found.
+     * Please do not run this method in the UI thread.
      *
-     * @param context
+     * @param context   The activity/service from where you want to check for the connection
      */
     public static void requestPermissionToUseSMS(final Context context){
         if(!checkNetworkConnection(context)){
@@ -175,6 +193,17 @@ public class DataHandler
         return response;
     }
 
+    /**
+     * This method sends data to the server using SMS
+     *
+     * @param context   The activity/service sending the data
+     * @param jsonString    The json string to be sent
+     * @param appendedURL   The page on the server to which the data is to be sent. All pages accessible from this app are specified in DataHandler
+     *                      eg DataHandler.FARMER_REGISTRATION_URL
+     * @param waitForResponse   Set to true if UI will be waiting for a response from the server
+     *
+     * @return  The response from the server
+     */
     private static String sendDataUsingSMS(final Context context, String jsonString, String appendedURL, boolean waitForResponse){
         if(getSharedPreference(context, SP_KEY_USE_SMS_TO_SEND_DATA,CANNOT_SEND_USING_SMS).equals(CAN_SEND_USING_SMS)){
             //clear shared preference meant to store server's response
@@ -439,6 +468,223 @@ public class DataHandler
     }
 
     /**
+     * This method saves farmer details into a SQLite database.
+     * Run this method in a thread running asynchronously to the UI thread.
+     *
+     * @param context The activity/service from where you want to save the farmer details
+     * @param farmerData Data for the farmer represented as a JSONObject
+     */
+    public static void saveFarmerData(Context context, JSONObject farmerData){
+        DatabaseHelper databaseHelper = new DatabaseHelper(context);
+        SQLiteDatabase writableDB = databaseHelper.getWritableDatabase();
+
+
+        //insert farmer data
+        if(writableDB.isOpen()){
+            try{
+                String[] columns = new String[]{"id","name","mobile_no","location_county","location_district","gps_longitude", "gps_latitude", "date_added", "sim_card_sn"};
+                String[] columnValues = new String[columns.length];
+
+                columnValues[0] = farmerData.getString("id");
+                columnValues[1] = farmerData.getString("name");
+                columnValues[2] = farmerData.getString("mobile_no");
+                columnValues[3] = farmerData.getString("location_county");
+                columnValues[4] = farmerData.getString("location_district");
+                columnValues[5] = farmerData.getString("gps_longitude");
+                columnValues[6] = farmerData.getString("gps_latitude");
+                columnValues[7] = farmerData.getString("date_added");
+                columnValues[8] = farmerData.getString("sim_card_sn");
+
+                databaseHelper.runInsertQuery(databaseHelper.TABLE_FARMER, columns, columnValues, 0, writableDB);
+
+                //insert cow data
+                JSONArray cowData = farmerData.getJSONArray("cows");
+                for(int i = 0; i < cowData.length(); i++){
+                    JSONObject currCow = cowData.getJSONObject(i);
+                    columns = new String[]{"id", "farmer_id", "name", "ear_tag_number", "date_of_birth", "age", "age_type", "sex", "sire_id", "dam_id", "date_added", "service_type", "country_id", "bull_owner", "owner_name"};
+                    columnValues = new String[columns.length];
+
+                    columnValues[0] = currCow.getString("id");
+                    columnValues[1] = currCow.getString("farmer_id");
+                    columnValues[2] = currCow.getString("name");
+                    columnValues[3] = currCow.getString("ear_tag_number");
+                    columnValues[4] = currCow.getString("date_of_birth");
+                    columnValues[5] = currCow.getString("age");
+                    columnValues[6] = currCow.getString("age_type");
+                    columnValues[7] = currCow.getString("sex");
+                    columnValues[8] = currCow.getString("sire_id");
+                    columnValues[9] = currCow.getString("dam_id");
+                    columnValues[10] = currCow.getString("date_added");
+                    columnValues[11] = currCow.getString("service_type");
+                    columnValues[12] = currCow.getString("country_id");
+                    columnValues[13] = currCow.getString("bull_owner");
+                    columnValues[14] = currCow.getString("owner_name");
+
+                    databaseHelper.runInsertQuery(databaseHelper.TABLE_COW, columns, columnValues, 0, writableDB);
+
+                    JSONArray cowEvents = currCow.getJSONArray("events");
+                    for(int j = 0; j < cowEvents.length(); j++){
+                        JSONObject currEvent = cowEvents.getJSONObject(j);
+
+                        columns = new String[]{"id", "cow_id", "event_name", "remarks", "event_date", "birth_type", "parent_cow_event", "bull_id", "servicing_days", "cod", "no_of_live_births"};
+                        columnValues = new String[columns.length];
+
+                        columnValues[0] = currEvent.getString("id");
+                        columnValues[1] = currEvent.getString("cow_id");
+                        columnValues[2] = currEvent.getString("event_name");
+                        columnValues[3] = currEvent.getString("remarks");
+                        columnValues[4] = currEvent.getString("event_date");
+                        columnValues[5] = currEvent.getString("birth_type");
+                        columnValues[6] = currEvent.getString("parent_cow_event");
+                        columnValues[7] = currEvent.getString("bull_id");
+                        columnValues[8] = currEvent.getString("servicing_days");
+                        columnValues[9] = currEvent.getString("cause_of_death");
+                        columnValues[10] = currEvent.getString("no_of_live_births");
+
+                        databaseHelper.runInsertQuery(databaseHelper.TABLE_EVENT, columns, columnValues, 0, writableDB);
+                    }
+                }
+            }
+            catch (Exception e){
+                e.printStackTrace();
+            }
+        }
+        else{
+            Log.e(TAG, "Writable database did not open. Was unable to save cow data into the SQLite DB");
+        }
+
+        //close the database
+        writableDB.close();
+        databaseHelper.close();
+    }
+
+    /**
+     * This method gets cached farmer data from the SQLite database
+     * @param context The activity/service from where you want to get the farmer data
+     *
+     * @return Returns null if something goes wrong or a farmer object if successful
+     */
+    public static Farmer getFarmerData(Context context){
+        Farmer farmer = null;
+        DatabaseHelper databaseHelper = new DatabaseHelper(context);
+        SQLiteDatabase readableDB = databaseHelper.getReadableDatabase();
+
+        //fetch farmer data
+        TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
+        String simCardSN = telephonyManager.getSimSerialNumber();
+
+        String[] columns = new String[]{"id","name","mobile_no","gps_longitude", "gps_latitude", "sim_card_sn"};
+        String selection  = "sim_card_sn='"+simCardSN+"'";
+        String[][] result = databaseHelper.runSelectQuery(readableDB,databaseHelper.TABLE_FARMER, columns, selection, null, null, null, null, null);
+        if(result.length == 1){//only one farmer should have this sim card sn
+
+            String farmerID = result[0][0];
+            farmer = new Farmer();
+            farmer.setFullName(result[0][1]);
+            farmer.setMobileNumber(result[0][2]);
+            farmer.setLongitude(result[0][3]);
+            farmer.setLatitude(result[0][4]);
+            farmer.setSimCardSN(result[0][5]);
+
+            //fetch cow data
+            columns = new String[]{"id", "name", "ear_tag_number", "date_of_birth", "age", "age_type", "sex", "sire_id", "dam_id", "date_added", "service_type", "country_id", "bull_owner", "owner_name"};
+            selection = "farmer_id="+farmerID;
+            result = databaseHelper.runSelectQuery(readableDB, databaseHelper.TABLE_COW, columns, selection, null, null, null, null, null);
+            if(result.length > 0){
+                for(int cowIndex = 0 ; cowIndex < result.length; cowIndex++){
+                    Cow currCow = new Cow(true);
+
+                    String cowID = result[cowIndex][0];
+                    currCow.setName(result[cowIndex][1]);
+                    currCow.setEarTagNumber(result[cowIndex][2]);
+                    Log.d(TAG, "Current cow's name and eartag number are "+result[cowIndex][1]+ " " + result[cowIndex][2]);
+                    currCow.setDateOfBirth(result[cowIndex][3]); //TODO: not sure if this will work
+                    if(result[cowIndex][4].length() > 0){
+                        currCow.setAge(Integer.parseInt(result[cowIndex][4]));
+                    }
+                    currCow.setAgeType(result[cowIndex][5]);
+                    currCow.setSex(result[cowIndex][6]);
+                    currCow.setServiceType(result[cowIndex][10]);
+
+                    //set sire
+                    if(result[cowIndex][7].length() > 0){
+                        selection = "id="+result[cowIndex][7];
+                        String[][] sireRes = databaseHelper.runSelectQuery(readableDB, databaseHelper.TABLE_COW, columns, selection, null, null, null, null, null);
+                        if(sireRes.length == 1){
+                            Sire sire = new Sire();
+                            sire.setName(result[cowIndex][1]);
+                            sire.setEarTagNumber(result[cowIndex][2]);
+
+                            currCow.setSire(sire);
+                        }
+                        else{
+                            Log.w(TAG, "No sire fetched for current cow");
+                            Log.w(TAG, " cow's id = "+result[cowIndex][0]);
+                            Log.w(TAG, " sire's id = "+result[cowIndex][7]);
+                        }
+                    }
+
+                    //set dam
+                    if(result[cowIndex][8].length() > 0){
+                        selection = "id="+result[cowIndex][7];
+                        String[][] damRes = databaseHelper.runSelectQuery(readableDB, databaseHelper.TABLE_COW, columns, selection, null, null, null, null, null);
+                        if(damRes.length == 1){
+                            Dam dam = new Dam();
+                            dam.setName(result[cowIndex][1]);
+                            dam.setEarTagNumber(result[cowIndex][2]);
+
+                            currCow.setDam(dam);
+                        }
+                        else{
+                            Log.w(TAG, "No dam fetched for current cow");
+                            Log.w(TAG, " cow's id = "+result[cowIndex][0]);
+                            Log.w(TAG, " dam's id = "+result[cowIndex][8]);
+                        }
+                    }
+
+                    //fetch cow events
+                    columns = new String[] {"id", "cow_id", "event_name", "remarks", "event_date", "birth_type", "parent_cow_event", "bull_id", "servicing_days", "cod", "no_of_live_births"};
+                    selection = "cow_id="+cowID;
+                    result = databaseHelper.runSelectQuery(readableDB, databaseHelper.TABLE_EVENT, columns, selection, null, null, null, null, null);
+                    for(int eventIndex = 0; eventIndex < result.length; eventIndex++){
+                        Event currEvent = new Event();
+
+                        currEvent.setId(Integer.parseInt(result[eventIndex][0]));
+                        currEvent.setType(result[eventIndex][2]);
+                        currEvent.setRemarks(result[eventIndex][3]);
+                        currEvent.setEventDate(result[eventIndex][4]);
+                        currEvent.setBirthType(result[eventIndex][5]);
+                        if(result[eventIndex][6].length() > 0)
+                            currEvent.setParentCowEventID(Integer.parseInt(result[eventIndex][6]));
+                        if(result[eventIndex][7].length() > 0)
+                            currEvent.setBullID(Integer.parseInt(result[eventIndex][7]));
+                        if(result[eventIndex][8].length() > 0)
+                            currEvent.setServicingDays(Integer.parseInt(result[eventIndex][8]));
+                        currEvent.setCod(result[eventIndex][9]);
+                        if(result[eventIndex][10].length() > 0)
+                            currEvent.setNoOfLiveBirths(Integer.parseInt(result[eventIndex][10]));
+
+                        currCow.addEvent(currEvent);
+                    }
+                    farmer.addCow(currCow);
+                }
+            }
+            else{
+                Log.w(TAG, "No cows fetched from database");
+                Log.w(TAG, " farmer's id = "+farmerID);
+                Log.w(TAG, " farmer's name = "+farmer.getFullName());
+            }
+        }
+        else{
+            Log.e(TAG, "Unable to get cached farmer data. Might be because no farmer in has the provided simCardSN or more than one do");
+            Log.e(TAG, " SimcardSN = "+simCardSN);
+            Log.e(TAG, " Number of fetched farmers = "+String.valueOf(result.length));
+        }
+
+        return farmer;
+    }
+
+    /**
      * This broadcast receiver is responsible for watching for SMSs coming for the server and concatenating SMS fragments in SMSs that are
      * longer than the standard SMS length
      */
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/database/DatabaseHelper.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/database/DatabaseHelper.java
new file mode 100644
index 0000000..07da5a0
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/database/DatabaseHelper.java
@@ -0,0 +1,176 @@
+package org.cgiar.ilri.mistro.farmer.backend.database;
+
+import android.content.ContentValues;
+import android.content.Context;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+import android.util.Log;
+
+import java.io.Serializable;
+
+/**
+ * This class handles transactions to the SQLite database
+ * Please handle with care and always call methods herein in an asynchronous thread (asynchronous to the UI thread)
+ *
+ * Created by jrogena on 03/04/14.
+ */
+public class DatabaseHelper extends SQLiteOpenHelper implements Serializable{
+
+    public static final String DB_NAME = "ngombe_planner";
+    public static final int DB_VERSION = 4;
+    public static final String TABLE_FARMER = "farmer";
+    public static final String TABLE_COW = "cow";
+    public static final String TABLE_EVENT = "event";
+    private static final String TAG = "DatabaseHelper";
+
+    /**
+     * Constructor for the DatabaseHelper class
+     *
+     * @param context   Context e.g activity/service requesting for the data
+     */
+    public DatabaseHelper(Context context){
+        super(context, DB_NAME, null, DB_VERSION);
+        Log.d(TAG, "Database version = "+DB_VERSION);
+    }
+
+    /**
+     * This should be called only when the database does not exist or a new version of the database has been defined
+     *
+     * @param db    The writable database
+     */
+    @Override
+    public void onCreate(SQLiteDatabase db) {
+        db.execSQL("CREATE TABLE "+TABLE_FARMER+" (id INTEGER PRIMARY KEY, name TEXT, mobile_no TEXT, location_county TEXT, location_district TEXT, gps_longitude TEXT, gps_latitude TEXT, date_added TEXT, sim_card_sn TEXT);");
+		db.execSQL("CREATE TABLE "+TABLE_COW+" (id INTEGER PRIMARY KEY, farmer_id INTEGER, name TEXT, ear_tag_number TEXT, date_of_birth TEXT, age INTEGER, age_type TEXT, sex TEXT, sire_id INTEGER, dam_id INTEGER, date_added TEXT, service_type TEXT, country_id INTEGER, bull_owner TEXT, owner_name TEXT);");
+        db.execSQL("CREATE TABLE "+TABLE_EVENT+" (id INTEGER PRIMARY KEY, cow_id INTEGER, event_name TEXT, remarks TEXT, event_date TEXT, birth_type TEXT, parent_cow_event INTEGER, bull_id INTEGER, servicing_days INTEGER, cod TEXT, no_of_live_births INTEGER)");
+        //insert any static data to the db now
+    }
+
+    /**
+     * Called when a new version of the database is detected
+     *      (i.e when the constructor is called with an updated version number)
+     *
+     * @param db    the writable database
+     * @param oldVersion    the old version number for the database
+     * @param newVersion    the new version number for the database
+     */
+    @Override
+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+        Log.w(TAG, "About to update the database. All data will be lost");
+        db.execSQL("DROP TABLE IF EXISTS "+TABLE_COW);
+        db.execSQL("DROP TABLE IF EXISTS "+TABLE_FARMER);
+        db.execSQL("DROP TABLE IF EXISTS "+TABLE_EVENT);
+
+        //recreate the database
+        onCreate(db);
+    }
+
+    /**
+     * This method is use dto run select queries to the database
+     *
+     * @param db    The readable database
+     * @param table The name of the table where the select query is to be run
+     * @param columns   An array of column names to be fetched in the query
+     * @param selection The selection criteria in the form column=value
+     * @param selectionArgs You may include ?s in selection, which will be replaced by the values from selectionArgs, in order that they appear in the selection. The values will be bound as Strings.
+     * @param groupBy   A filter declaring how to group rows, formatted as an SQL GROUP BY clause (excluding the GROUP BY itself). Passing null will cause the rows to not be grouped.
+     * @param having    A filter declare which row groups to include in the cursor, if row grouping is being used, formatted as an SQL HAVING clause (excluding the HAVING itself). Passing null will cause all row groups to be included, and is required when row grouping is not being used.
+     * @param orderBy   How to order the rows, formatted as an SQL ORDER BY clause (excluding the ORDER BY itself). Passing null will use the default sort order, which may be unordered.
+     * @param limit Limits the number of rows returned by the query, formatted as LIMIT clause. Passing null denotes no LIMIT clause.
+     *
+     * @return  A multidimensional array in the form array[selected_rows][selected_columns]
+     */
+    public String[][] runSelectQuery(SQLiteDatabase db, String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy, String limit) {
+
+        Log.d(TAG, "About to run select query on "+table+" table");
+        Cursor cursor=db.query(table, columns, selection, selectionArgs, groupBy, having, orderBy, limit);
+        if(cursor.getCount()!=-1) {
+            String[][] result=new String[cursor.getCount()][columns.length];
+            Log.d("runSelectQuery", "number of rows " + String.valueOf(cursor.getCount()));
+            int c1=0;
+            cursor.moveToFirst();
+            while(c1<cursor.getCount()) {
+                int c2=0;
+                while(c2<columns.length) {
+                    String currResult = cursor.getString(c2);
+                    if(currResult == null || currResult.equals("null"))
+                        currResult = "";//nulls from server not handled well by json. Set 'null' and null to empty string
+
+                    result[c1][c2] = currResult;
+                    c2++;
+                }
+                if(c1!=cursor.getCount()-1) {//is not the last row
+                    cursor.moveToNext();
+                }
+                c1++;
+            }
+            cursor.close();
+
+            return result;
+        }
+        else {
+            return null;
+        }
+    }
+
+    /**
+     * This method deletes rows form a table
+     *
+     * @param db    The writable database
+     * @param table The table from which rows are to be deleted
+     * @param referenceColumn   Column to be used as a reference for the delete
+     * @param columnValues   The values of the reference column. All rows with these values will be deleted
+     */
+    public void runDeleteQuery(SQLiteDatabase db, String table, String referenceColumn, String[] columnValues) {
+        Log.d(TAG, "About to run delete query on "+table+" table");
+
+        db.delete(table, referenceColumn+"=?", columnValues);
+    }
+
+    /**
+     * This method Runs an insert query (duh)
+     *
+     * @param table The table where you want to insert the data
+     * @param columns   An array of the columns to be inserted
+     * @param values    An array of the column values. Should correspond to the array of column names
+     * @param uniqueColumnIndex Index of the unique key (primary key). Set this to -1 if none
+     * @param db    The writable database
+     */
+    public void runInsertQuery(String table,String[] columns,String[] values, int uniqueColumnIndex,SQLiteDatabase db) {
+        Log.d(TAG, "About to run insert query on "+table+" table");
+        if(columns.length==values.length) {
+            ContentValues cv=new ContentValues();
+            int count=0;
+            while(count<columns.length) {
+                cv.put(columns[count], values[count]);
+                count++;
+            }
+
+            //delete row with same unique key
+            if(uniqueColumnIndex != -1){
+                Log.w(TAG, "About to delete any row with "+columns[uniqueColumnIndex]+" = "+values[uniqueColumnIndex]);
+                runDeleteQuery(db, table, columns[uniqueColumnIndex], new String[]{values[uniqueColumnIndex]});
+            }
+
+            db.insert(table, null, cv);
+
+            cv.clear();
+        }
+    }
+
+    /**
+     * This method runs a generic query in the database.
+     * If you want to run:
+     *      select queries, please use runSelectQuery()
+     *      insert queries, please use runInsertQuery()
+     *      delete queries, please use runDeleteQuery()
+     *
+     * @param db    The readable/writable database to use depending on whether you need to write into the database
+     * @param query The query that you want to run. Please use SQLite friendly queries
+     */
+    public void runQuery(SQLiteDatabase db, String query) {//non return queries
+        Log.d(TAG, "about to run generic query on the database");
+        db.execSQL(query);
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Cow.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Cow.java
index 71e0567..56cae07 100644
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Cow.java
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Cow.java
@@ -44,6 +44,7 @@ public class Cow implements Parcelable, Serializable {
     private String serviceType;
     private String otherDeformity;
     private String piggyBack;
+    private List<Event> events;
 
     public Cow(boolean isNotDamOrSire) {
         name = "";
@@ -65,6 +66,7 @@ public class Cow implements Parcelable, Serializable {
         serviceType = "";
         otherDeformity = "";
         piggyBack = "";
+        this.events = new ArrayList<Event>();
     }
 
     public Cow(Parcel in) {
@@ -147,6 +149,14 @@ public class Cow implements Parcelable, Serializable {
         this.countryOfOrigin = countryOfOrigin;
     }
 
+    public void addEvent(Event event){
+        this.events.add(event);
+    }
+
+    public void setEvents(List<Event> events){
+        this.events = events;
+    }
+
     public String getName() {
         return name;
     }
@@ -211,6 +221,10 @@ public class Cow implements Parcelable, Serializable {
         return countryOfOrigin;
     }
 
+    public List<Event> getEvents(){
+        return this.events;
+    }
+
     @Override
     public int describeContents() {
         return 0;
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Event.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Event.java
new file mode 100644
index 0000000..3f88ff5
--- /dev/null
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Event.java
@@ -0,0 +1,102 @@
+package org.cgiar.ilri.mistro.farmer.carrier;
+
+/**
+ * Created by jrogena on 09/04/14.
+ */
+public class Event {
+    private static final String TAG = "Event";
+    private int id;
+    private String eventDate;
+    private String birthType;
+    private int parentCowEventID;
+    private int bullID;
+    private int servicingDays;
+    private String cod;
+    private int noOfLiveBirths;
+    private String type;
+    private String remarks;
+
+    public Event(){
+
+    }
+
+    public int getId() {
+        return id;
+    }
+
+    public void setId(int id) {
+        this.id = id;
+    }
+
+    public String getType(){
+        return this.type;
+    }
+
+    public void setType(String type){
+        this.type = type;
+    }
+
+    public String getRemarks(){
+        return this.remarks;
+    }
+
+    public void setRemarks(String remarks){
+        this.remarks = remarks;
+    }
+
+    public String getEventDate() {
+        return eventDate;
+    }
+
+    public void setEventDate(String eventDate) {
+        this.eventDate = eventDate;
+    }
+
+    public String getBirthType() {
+        return birthType;
+    }
+
+    public void setBirthType(String birthType) {
+        this.birthType = birthType;
+    }
+
+    public int getParentCowEventID() {
+        return parentCowEventID;
+    }
+
+    public void setParentCowEventID(int parentCowEventID) {
+        this.parentCowEventID = parentCowEventID;
+    }
+
+    public int getBullID() {
+        return bullID;
+    }
+
+    public void setBullID(int bullID) {
+        this.bullID = bullID;
+    }
+
+    public int getServicingDays() {
+        return servicingDays;
+    }
+
+    public void setServicingDays(int servicingDays) {
+        this.servicingDays = servicingDays;
+    }
+
+    public String getCod() {
+        return cod;
+    }
+
+    public void setCod(String cod) {
+        this.cod = cod;
+    }
+
+    public int getNoOfLiveBirths() {
+        return noOfLiveBirths;
+    }
+
+    public void setNoOfLiveBirths(int noOfLiveBirths) {
+        this.noOfLiveBirths = noOfLiveBirths;
+    }
+}
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Farmer.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Farmer.java
index 1519fd4..4e1b55d 100644
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Farmer.java
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/carrier/Farmer.java
@@ -137,6 +137,17 @@ public class Farmer implements Parcelable, Serializable
         return cows;
     }
 
+    public List<Cow> getCows(String sex){
+        List<Cow> newCowList = new ArrayList<Cow>();
+
+        //get all cows with the specific sex
+        for(int i = 0; i < cows.size(); i++){
+            if(cows.get(i).getSex().equals(sex))
+                newCowList.add(cows.get(i));
+        }
+        return newCowList;
+    }
+
     public Cow getCow(int index)
     {
         if(index<cows.size())
diff --git a/MistroFarmer/src/main/res/values/strings_en.xml b/MistroFarmer/src/main/res/values/strings_en.xml
index 0392748..038b2d6 100644
--- a/MistroFarmer/src/main/res/values/strings_en.xml
+++ b/MistroFarmer/src/main/res/values/strings_en.xml
@@ -232,4 +232,7 @@
     <string name="warning_en">Warning</string>
     <string name="action_will_be_canceled_en">If you choose to go back to the Main Menu data you have entered in this screen will be lost. Press \'Okay\' if this is okay with you.</string>
     <string name="total_en">Total</string>
+    <string name="unable_to_fetch_cached_data_en">Unable to fetch some of the data cached on you device</string>
+    <string name="you_do_not_have_female_cows_en">You do not seem to have female cows</string>
+    <string name="you_do_not_have_cows_en">You do not seem to have cows</string>
 </resources>
diff --git a/MistroFarmer/src/main/res/values/strings_sw.xml b/MistroFarmer/src/main/res/values/strings_sw.xml
index ae1cf71..6de6001 100644
--- a/MistroFarmer/src/main/res/values/strings_sw.xml
+++ b/MistroFarmer/src/main/res/values/strings_sw.xml
@@ -232,4 +232,7 @@
     <string name="warning_sw">Onyo</string>
     <string name="action_will_be_canceled_sw">Habari uliyoingiza katika ukurasa huu itapotea ukiamua kurudi kwa Menu Kuu. Bonyeza \'Sawa\' kama hii ni sawa na wewe.</string>
     <string name="total_sw">Jumla</string>
+    <string name="unable_to_fetch_cached_data_sw">Data iliyohifadhiwa kwa simu yako hipatikani</string>
+    <string name="you_do_not_have_female_cows_sw">Hauna ng\'ombe wa kike</string>
+    <string name="you_do_not_have_cows_sw">Hauna ng\'ombe</string>
 </resources>
-- 
2.7.1

