From 747febcaea47162a033d4c678f1775d4073d1c93 Mon Sep 17 00:00:00 2001
From: Jason Rogena <j.rogena@cgiar.org>
Date: Tue, 10 Jun 2014 12:23:54 +0300
Subject: [PATCH 191/213] Version 0.9.9.7: Caching Extension Personnel

Extension personnel data now being cached when fetched from the
server and used when there is no network connection
---
 .../mistro/farmer/FarmerRegistrationActivity.java  |   3 +-
 .../ilri/mistro/farmer/backend/DataHandler.java    | 100 ++++++++++++++++++++-
 .../farmer/backend/database/DatabaseHelper.java    |  38 +++++---
 3 files changed, 128 insertions(+), 13 deletions(-)

diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/FarmerRegistrationActivity.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/FarmerRegistrationActivity.java
index dda5eeb..65948ae 100644
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/FarmerRegistrationActivity.java
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/FarmerRegistrationActivity.java
@@ -31,6 +31,7 @@ import com.actionbarsherlock.view.MenuItem;
 
 import org.cgiar.ilri.mistro.farmer.backend.DataHandler;
 import org.cgiar.ilri.mistro.farmer.backend.Locale;
+import org.cgiar.ilri.mistro.farmer.backend.database.DatabaseHelper;
 import org.cgiar.ilri.mistro.farmer.carrier.Farmer;
 import org.json.JSONArray;
 import org.json.JSONObject;
@@ -538,7 +539,7 @@ public class FarmerRegistrationActivity extends SherlockActivity implements Mist
         protected String doInBackground(Integer... params) {
             Log.d(TAG, "Fetching vets from server");
 
-            return DataHandler.sendDataToServer(FarmerRegistrationActivity.this, "", DataHandler.FARMER_FETCH_VETS_URL, true);
+            return DataHandler.sendDataToServer(FarmerRegistrationActivity.this, "", DataHandler.FARMER_FETCH_VETS_URL, true, DatabaseHelper.TABLE_EXTENSION_PERSONNEL);
         }
 
         @Override
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/DataHandler.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/DataHandler.java
index 8dfa57c..42995c4 100644
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/DataHandler.java
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/DataHandler.java
@@ -50,6 +50,7 @@ import java.io.InputStreamReader;
 import java.net.URL;
 import java.net.URLConnection;
 import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
 
 /**
@@ -203,6 +204,103 @@ public class DataHandler
     }
 
     /**
+     * This method sends the string corresponding to a jsonObject or jsonArray to the server. Note that if string is not from the specified types of
+     * objects the server might not reply as expected. This function also caches the results from the server into the specified table and fetches
+     * data from the cache table if no response from the server.
+     * This method should only be called from within an asynchronous thread. Refer to android.os.AsyncTask
+     *
+     * @param context The context from where the data is being sent
+     * @param jsonString The string corresponding to either a jsonObject or a jsonArray
+     * @param appendedURL The page on the server to which the data is to be sent. All pages accessible from this app are specified in DataHandler
+     *                    eg DataHandler.FARMER_REGISTRATION_URL
+     * @param waitForResponse Set to true if UI will be waiting for a response from the server
+     * @param cacheTable The table to be used as a cache for the data obtained from the server
+     *
+     * @return The response from the server
+     */
+    public static String sendDataToServer(Context context, String jsonString, String appendedURL, boolean waitForResponse, String cacheTable) {
+        String response = null;
+        if(checkNetworkConnection(context)){//try to
+            response = sendDataUsingHttpConnection(context, jsonString, appendedURL);
+
+            cacheServerData(context, response, cacheTable);
+        }
+        if(response == null){//means that either there was no connection to the server or a null was returned
+            return getCachedServerData(context, cacheTable);
+        }
+        return response;
+    }
+
+    private static void cacheServerData(Context context, String serverResponse, String cacheTable){
+        if(serverResponse != null){
+            try{
+                DatabaseHelper databaseHelper = new DatabaseHelper(context);
+                SQLiteDatabase writableDatabase = databaseHelper.getWritableDatabase();
+
+                JSONArray serverData = new JSONArray(serverResponse);
+                String[] columns = null;
+
+                databaseHelper.runTruncateQuery(writableDatabase, cacheTable);//Delete the cache that was already in the database
+
+                for(int i = 0; i < serverData.length(); i++){
+                    JSONObject currentRow = serverData.getJSONObject(i);
+                    if(i == 0){//initialize the columns to be saved in the cache table
+                        List<String> tmpColumns = new ArrayList<String>();
+                        Iterator<String> keys = currentRow.keys();
+                        while(keys.hasNext()){
+                            tmpColumns.add(keys.next());
+                        }
+
+                        columns = tmpColumns.toArray(new String[tmpColumns.size()]);
+                        Log.d(TAG, "Columns for the cache table are "+String.valueOf(columns));
+                    }
+
+                    if(columns != null){
+                        String[] columnValues = new String[columns.length];
+                        for(int j = 0; j < columns.length; j++){
+                            columnValues[j] = currentRow.getString(columns[j]);
+                        }
+
+                        databaseHelper.runInsertQuery(cacheTable, columns, columnValues, -1, writableDatabase);
+                    }
+                }
+            }
+            catch (Exception e){
+                e.printStackTrace();
+            }
+        }
+    }
+
+    private static String getCachedServerData(Context context, String cacheTable){
+        try{
+            DatabaseHelper databaseHelper = new DatabaseHelper(context);
+            SQLiteDatabase readableDatabase = databaseHelper.getReadableDatabase();
+
+            String[] columns = databaseHelper.getAllColumns(cacheTable);
+            if(columns != null){
+                String[][] results = databaseHelper.runSelectQuery(readableDatabase, cacheTable, columns, null, null, null, null, null, null);
+                JSONArray jsonArray = new JSONArray();
+                for(int i = 0; i < results.length; i++){
+                    JSONObject currRow = new JSONObject();
+
+                    for(int j = 0; j < results[i].length; j++){
+                        currRow.put(columns[j], results[i][j]);
+                    }
+
+                    jsonArray.put(currRow);
+                }
+
+                return jsonArray.toString();
+            }
+        }
+        catch (Exception e){
+            e.printStackTrace();
+        }
+
+        return null;
+    }
+
+    /**
      * This method sends data to the server using SMS
      *
      * @param context   The activity/service sending the data
@@ -376,7 +474,7 @@ public class DataHandler
      */
     public static String getSharedPreference(Context context, String sharedPreferenceKey, String defaultValue) {
         SharedPreferences sharedPreferences = context.getSharedPreferences(context.getString(R.string.app_name), Context.MODE_PRIVATE);
-        Log.d(TAG, "value of "+sharedPreferenceKey+" is "+sharedPreferences.getString(sharedPreferenceKey, defaultValue));
+        Log.d(TAG, "value of " + sharedPreferenceKey + " is " + sharedPreferences.getString(sharedPreferenceKey, defaultValue));
         return sharedPreferences.getString(sharedPreferenceKey, defaultValue);
     }
 
diff --git a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/database/DatabaseHelper.java b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/database/DatabaseHelper.java
index 1af4502..8e38d5c 100644
--- a/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/database/DatabaseHelper.java
+++ b/MistroFarmer/src/main/java/org/cgiar/ilri/mistro/farmer/backend/database/DatabaseHelper.java
@@ -8,6 +8,9 @@ import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
 
 import java.io.Serializable;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 
 /**
  * This class handles transactions to the SQLite database
@@ -18,13 +21,18 @@ import java.io.Serializable;
 public class DatabaseHelper extends SQLiteOpenHelper implements Serializable{
 
     public static final String DB_NAME = "ngombe_planner";
-    public static final int DB_VERSION = 11;
+    public static final int DB_VERSION = 12;
     public static final String TABLE_FARMER = "farmer";
     public static final String TABLE_COW = "cow";
     public static final String TABLE_EVENT = "event";
     public static final String TABLE_CACHED_REQUESTS = "cached_requests";
     public static final String TABLE_MILK_PRODUCTION = "milk_production";
     public static final String TABLE_EVENTS_CONSTRAINTS = "events_constraints";
+    public static final String TABLE_EXTENSION_PERSONNEL = "extension_personnel";
+
+    public static final String[] COLUMNS_EXTENSION_PERSONNEL = {"id", "name", "mobile_no", "date_added"};
+
+    private final Map<String, String[]> tableColumns = new HashMap<String, String[]>();
 
     private static final String TAG = "DatabaseHelper";
 
@@ -36,6 +44,12 @@ public class DatabaseHelper extends SQLiteOpenHelper implements Serializable{
     public DatabaseHelper(Context context){
         super(context, DB_NAME, null, DB_VERSION);
         Log.d(TAG, "Database version = "+DB_VERSION);
+
+        tableColumns.put(TABLE_EXTENSION_PERSONNEL, COLUMNS_EXTENSION_PERSONNEL);
+    }
+
+    public String[] getAllColumns(String table){
+        return tableColumns.get(table);
     }
 
     /**
@@ -47,10 +61,11 @@ public class DatabaseHelper extends SQLiteOpenHelper implements Serializable{
     public void onCreate(SQLiteDatabase db) {
         db.execSQL("CREATE TABLE " + TABLE_FARMER + " (id INTEGER PRIMARY KEY, name TEXT, mobile_no TEXT, location_county TEXT, location_district TEXT, gps_longitude TEXT, gps_latitude TEXT, date_added TEXT, sim_card_sn TEXT);");
 		db.execSQL("CREATE TABLE " + TABLE_COW + " (id INTEGER PRIMARY KEY, farmer_id INTEGER, name TEXT, ear_tag_number TEXT, date_of_birth TEXT, age INTEGER, age_type TEXT, sex TEXT, sire_id INTEGER, dam_id INTEGER, date_added TEXT, service_type TEXT, country_id INTEGER, bull_owner TEXT, owner_name TEXT);");
-        db.execSQL("CREATE TABLE "+TABLE_EVENT+" (id INTEGER PRIMARY KEY, cow_id INTEGER, event_name TEXT, remarks TEXT, event_date TEXT, birth_type TEXT, parent_cow_event INTEGER, bull_id INTEGER, servicing_days INTEGER, cod TEXT, no_of_live_births INTEGER, saved_on_server INTEGER, date_added TEXT)");
-        db.execSQL("CREATE TABLE "+TABLE_CACHED_REQUESTS+" (id INTEGER PRIMARY KEY AUTOINCREMENT, url TEXT, json TEXT)");
-        db.execSQL("CREATE TABLE "+TABLE_MILK_PRODUCTION+" (id INTEGER PRIMARY KEY, cow_id INTEGER, time TEXT, quantity INTEGER, date_added TEXT, date TEXT, quantity_type TEXT)");
-        db.execSQL("CREATE TABLE "+TABLE_EVENTS_CONSTRAINTS+" (id INTEGER PRIMARY KEY, event TEXT, time INTEGER, time_units TEXT)");
+        db.execSQL("CREATE TABLE " + TABLE_EVENT + " (id INTEGER PRIMARY KEY, cow_id INTEGER, event_name TEXT, remarks TEXT, event_date TEXT, birth_type TEXT, parent_cow_event INTEGER, bull_id INTEGER, servicing_days INTEGER, cod TEXT, no_of_live_births INTEGER, saved_on_server INTEGER, date_added TEXT)");
+        db.execSQL("CREATE TABLE " + TABLE_CACHED_REQUESTS + " (id INTEGER PRIMARY KEY AUTOINCREMENT, url TEXT, json TEXT)");
+        db.execSQL("CREATE TABLE " + TABLE_MILK_PRODUCTION + " (id INTEGER PRIMARY KEY, cow_id INTEGER, time TEXT, quantity INTEGER, date_added TEXT, date TEXT, quantity_type TEXT)");
+        db.execSQL("CREATE TABLE " + TABLE_EVENTS_CONSTRAINTS + " (id INTEGER PRIMARY KEY, event TEXT, time INTEGER, time_units TEXT)");
+        db.execSQL("CREATE TABLE " + TABLE_EXTENSION_PERSONNEL + " (id INTEGER PRIMARY KEY, name TEXT, mobile_no TEXT, date_added TEXT)");
         //insert any static data to the db now
     }
 
@@ -65,12 +80,13 @@ public class DatabaseHelper extends SQLiteOpenHelper implements Serializable{
     @Override
     public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
         Log.w(TAG, "About to update the database. All data will be lost");
-        db.execSQL("DROP TABLE IF EXISTS "+TABLE_COW);
-        db.execSQL("DROP TABLE IF EXISTS "+TABLE_FARMER);
-        db.execSQL("DROP TABLE IF EXISTS "+TABLE_EVENT);
-        db.execSQL("DROP TABLE IF EXISTS "+TABLE_CACHED_REQUESTS);
-        db.execSQL("DROP TABLE IF EXISTS "+TABLE_MILK_PRODUCTION);
-        db.execSQL("DROP TABLE IF EXISTS "+TABLE_EVENTS_CONSTRAINTS);
+        db.execSQL("DROP TABLE IF EXISTS " + TABLE_COW);
+        db.execSQL("DROP TABLE IF EXISTS " + TABLE_FARMER);
+        db.execSQL("DROP TABLE IF EXISTS " + TABLE_EVENT);
+        db.execSQL("DROP TABLE IF EXISTS " + TABLE_CACHED_REQUESTS);
+        db.execSQL("DROP TABLE IF EXISTS " + TABLE_MILK_PRODUCTION);
+        db.execSQL("DROP TABLE IF EXISTS " + TABLE_EVENTS_CONSTRAINTS);
+        db.execSQL("DROP TABLE IF EXISTS " + TABLE_EXTENSION_PERSONNEL);
 
         //recreate the database
         onCreate(db);
-- 
2.7.1

